
RTC_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008de0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008f90  08008f90  00018f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009408  08009408  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009408  08009408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009410  08009410  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009414  08009414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000240  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ebd8  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023fb  00000000  00000000  0002ee1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  00031220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a2f  00000000  00000000  00031f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024f8c  00000000  00000000  00032977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000115a8  00000000  00000000  00057903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbe8f  00000000  00000000  00068eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004b2c  00000000  00000000  00144d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00149868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f78 	.word	0x08008f78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008f78 	.word	0x08008f78

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x39 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f023 030f 	bic.w	r3, r3, #15
 8001020:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f043 030c 	orr.w	r3, r3, #12
 800102e:	b2db      	uxtb	r3, r3
 8001030:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2db      	uxtb	r3, r3
 800103a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800103c:	7bbb      	ldrb	r3, [r7, #14]
 800103e:	f043 030c 	orr.w	r3, r3, #12
 8001042:	b2db      	uxtb	r3, r3
 8001044:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	b2db      	uxtb	r3, r3
 800104e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, (39 << 1) ,(uint8_t *) data_t, 4, 100);
 8001050:	f107 0208 	add.w	r2, r7, #8
 8001054:	2364      	movs	r3, #100	; 0x64
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2304      	movs	r3, #4
 800105a:	214e      	movs	r1, #78	; 0x4e
 800105c:	4803      	ldr	r0, [pc, #12]	; (800106c <lcd_send_cmd+0x5c>)
 800105e:	f001 fa07 	bl	8002470 <HAL_I2C_Master_Transmit>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000208 	.word	0x20000208

08001070 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af02      	add	r7, sp, #8
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f023 030f 	bic.w	r3, r3, #15
 8001080:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f043 030d 	orr.w	r3, r3, #13
 800108e:	b2db      	uxtb	r3, r3
 8001090:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	f043 0309 	orr.w	r3, r3, #9
 8001098:	b2db      	uxtb	r3, r3
 800109a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	f043 030d 	orr.w	r3, r3, #13
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	f043 0309 	orr.w	r3, r3, #9
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, (39 << 1),(uint8_t *) data_t, 4, 100);
 80010b0:	f107 0208 	add.w	r2, r7, #8
 80010b4:	2364      	movs	r3, #100	; 0x64
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2304      	movs	r3, #4
 80010ba:	214e      	movs	r1, #78	; 0x4e
 80010bc:	4803      	ldr	r0, [pc, #12]	; (80010cc <lcd_send_data+0x5c>)
 80010be:	f001 f9d7 	bl	8002470 <HAL_I2C_Master_Transmit>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000208 	.word	0x20000208

080010d0 <lcd_init>:

void lcd_init (void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

    // 4 bit initialisation
    HAL_Delay(50);  // wait for >40ms
 80010d4:	2032      	movs	r0, #50	; 0x32
 80010d6:	f000 fd71 	bl	8001bbc <HAL_Delay>
    lcd_send_cmd (0x30);
 80010da:	2030      	movs	r0, #48	; 0x30
 80010dc:	f7ff ff98 	bl	8001010 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 80010e0:	2005      	movs	r0, #5
 80010e2:	f000 fd6b 	bl	8001bbc <HAL_Delay>
    lcd_send_cmd (0x30);
 80010e6:	2030      	movs	r0, #48	; 0x30
 80010e8:	f7ff ff92 	bl	8001010 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 80010ec:	2001      	movs	r0, #1
 80010ee:	f000 fd65 	bl	8001bbc <HAL_Delay>
    lcd_send_cmd (0x30);
 80010f2:	2030      	movs	r0, #48	; 0x30
 80010f4:	f7ff ff8c 	bl	8001010 <lcd_send_cmd>
    HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fd5f 	bl	8001bbc <HAL_Delay>
    lcd_send_cmd (0x20);  // 4bit mode
 80010fe:	2020      	movs	r0, #32
 8001100:	f7ff ff86 	bl	8001010 <lcd_send_cmd>
    HAL_Delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f000 fd59 	bl	8001bbc <HAL_Delay>

    // display initialisation
	lcd_send_cmd(0x28);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f7ff ff80 	bl	8001010 <lcd_send_cmd>
	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f000 fd53 	bl	8001bbc <HAL_Delay>
	lcd_send_cmd(0x08);  // display on/off control
 8001116:	2008      	movs	r0, #8
 8001118:	f7ff ff7a 	bl	8001010 <lcd_send_cmd>
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f000 fd4d 	bl	8001bbc <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ff74 	bl	8001010 <lcd_send_cmd>
	HAL_Delay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 fd47 	bl	8001bbc <HAL_Delay>
	HAL_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 fd44 	bl	8001bbc <HAL_Delay>
	lcd_send_cmd(0x06);
 8001134:	2006      	movs	r0, #6
 8001136:	f7ff ff6b 	bl	8001010 <lcd_send_cmd>
	HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fd3e 	bl	8001bbc <HAL_Delay>
	lcd_send_cmd(0x0C);
 8001140:	200c      	movs	r0, #12
 8001142:	f7ff ff65 	bl	8001010 <lcd_send_cmd>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001152:	e006      	b.n	8001162 <lcd_send_string+0x18>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff87 	bl	8001070 <lcd_send_data>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f4      	bne.n	8001154 <lcd_send_string+0xa>
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <set_time>:
/* USER CODE BEGIN 0 */

/** Initialize RTC and set the Time and Date
*/
void set_time (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime = {0};
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]

	sTime.Hours = 0x15;
 800118c:	2315      	movs	r3, #21
 800118e:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x45;
 8001190:	2345      	movs	r3, #69	; 0x45
 8001192:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 8001194:	2300      	movs	r3, #0
 8001196:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	4812      	ldr	r0, [pc, #72]	; (80011f0 <set_time+0x7c>)
 80011a8:	f002 fc02 	bl	80039b0 <HAL_RTC_SetTime>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <set_time+0x42>
	{
	  Error_Handler();
 80011b2:	f000 fa6b 	bl	800168c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011b6:	2301      	movs	r3, #1
 80011b8:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 80011ba:	2301      	movs	r3, #1
 80011bc:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 80011be:	2301      	movs	r3, #1
 80011c0:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x24;
 80011c2:	2324      	movs	r3, #36	; 0x24
 80011c4:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2201      	movs	r2, #1
 80011ca:	4619      	mov	r1, r3
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <set_time+0x7c>)
 80011ce:	f002 fce7 	bl	8003ba0 <HAL_RTC_SetDate>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <set_time+0x68>
	{
	  Error_Handler();
 80011d8:	f000 fa58 	bl	800168c <Error_Handler>
	}

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F4); // backup register
 80011dc:	f243 22f4 	movw	r2, #13044	; 0x32f4
 80011e0:	2101      	movs	r1, #1
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <set_time+0x7c>)
 80011e4:	f002 fff5 	bl	80041d2 <HAL_RTCEx_BKUPWrite>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	2000025c 	.word	0x2000025c

080011f4 <set_alarm>:

void set_alarm (void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0

	RTC_AlarmTypeDef sAlarm = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2228      	movs	r2, #40	; 0x28
 80011fe:	2100      	movs	r1, #0
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fa7e 	bl	8005702 <memset>
	/** Enable the Alarm A
	*/
	sAlarm.AlarmTime.Hours = 0x15;
 8001206:	2315      	movs	r3, #21
 8001208:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x48;
 800120a:	2348      	movs	r3, #72	; 0x48
 800120c:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 800120e:	2300      	movs	r3, #0
 8001210:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = 0x1;
 800122a:	2301      	movs	r3, #1
 800122c:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2201      	movs	r2, #1
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <set_alarm+0x60>)
 800123e:	f002 fd83 	bl	8003d48 <HAL_RTC_SetAlarm_IT>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <set_alarm+0x58>
	{
	  Error_Handler();
 8001248:	f000 fa20 	bl	800168c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
	/* USER CODE END RTC_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000025c 	.word	0x2000025c

08001258 <get_time>:

void get_time (void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* get the current RTC time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <get_time+0x58>)
 8001266:	f002 fc3d 	bl	8003ae4 <HAL_RTC_GetTime>

	/* get the current RTC Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	480f      	ldr	r0, [pc, #60]	; (80012b0 <get_time+0x58>)
 8001274:	f002 fd18 	bl	8003ca8 <HAL_RTC_GetDate>

	/* Display time format : hh:mm:ss */
	sprintf(time, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001278:	783b      	ldrb	r3, [r7, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	4619      	mov	r1, r3
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	460b      	mov	r3, r1
 8001286:	490b      	ldr	r1, [pc, #44]	; (80012b4 <get_time+0x5c>)
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <get_time+0x60>)
 800128a:	f004 f9d7 	bl	800563c <siprintf>

	/* Display Date format : dd:mm:yy */
	sprintf(date, "%02d:%02d:%02d", gDate.Date, gDate.Month, 2000 + gDate.Year);
 800128e:	7dbb      	ldrb	r3, [r7, #22]
 8001290:	461a      	mov	r2, r3
 8001292:	7d7b      	ldrb	r3, [r7, #21]
 8001294:	4619      	mov	r1, r3
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	460b      	mov	r3, r1
 80012a0:	4904      	ldr	r1, [pc, #16]	; (80012b4 <get_time+0x5c>)
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <get_time+0x64>)
 80012a4:	f004 f9ca 	bl	800563c <siprintf>

}
 80012a8:	bf00      	nop
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000025c 	.word	0x2000025c
 80012b4:	08008f90 	.word	0x08008f90
 80012b8:	200001fc 	.word	0x200001fc
 80012bc:	200001f0 	.word	0x200001f0

080012c0 <lcd_time>:

void lcd_time (void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80);
 80012c4:	2080      	movs	r0, #128	; 0x80
 80012c6:	f7ff fea3 	bl	8001010 <lcd_send_cmd>
	lcd_send_string(time);
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <lcd_time+0x20>)
 80012cc:	f7ff ff3d 	bl	800114a <lcd_send_string>
	lcd_send_cmd(0xC0);
 80012d0:	20c0      	movs	r0, #192	; 0xc0
 80012d2:	f7ff fe9d 	bl	8001010 <lcd_send_cmd>
	lcd_send_string(date);
 80012d6:	4803      	ldr	r0, [pc, #12]	; (80012e4 <lcd_time+0x24>)
 80012d8:	f7ff ff37 	bl	800114a <lcd_send_string>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200001fc 	.word	0x200001fc
 80012e4:	200001f0 	.word	0x200001f0

080012e8 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	alarm = 1;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_RTC_AlarmAEventCallback+0x1c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000206 	.word	0x20000206

08001308 <Action_On_Alarm>:

void Action_On_Alarm (void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800130e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <Action_On_Alarm+0x54>)
 8001314:	f000 ff4d 	bl	80021b2 <HAL_GPIO_TogglePin>
	lcd_send_cmd(0x80);
 8001318:	2080      	movs	r0, #128	; 0x80
 800131a:	f7ff fe79 	bl	8001010 <lcd_send_cmd>
	lcd_send_string("VerdeMobility\n");
 800131e:	4810      	ldr	r0, [pc, #64]	; (8001360 <Action_On_Alarm+0x58>)
 8001320:	f7ff ff13 	bl	800114a <lcd_send_string>
	lcd_send_cmd(0xC0);
 8001324:	20c0      	movs	r0, #192	; 0xc0
 8001326:	f7ff fe73 	bl	8001010 <lcd_send_cmd>
	lcd_send_string("TIME and DATE\n");
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <Action_On_Alarm+0x5c>)
 800132c:	f7ff ff0d 	bl	800114a <lcd_send_string>
    HAL_Delay(3000);
 8001330:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001334:	f000 fc42 	bl	8001bbc <HAL_Delay>
    for (int i = 0; i<60; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e005      	b.n	800134a <Action_On_Alarm+0x42>
    {
    	lcd_send_string(" ");
 800133e:	480a      	ldr	r0, [pc, #40]	; (8001368 <Action_On_Alarm+0x60>)
 8001340:	f7ff ff03 	bl	800114a <lcd_send_string>
    for (int i = 0; i<60; i++)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3301      	adds	r3, #1
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b3b      	cmp	r3, #59	; 0x3b
 800134e:	ddf6      	ble.n	800133e <Action_On_Alarm+0x36>
    }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020400 	.word	0x40020400
 8001360:	08008fa0 	.word	0x08008fa0
 8001364:	08008fb0 	.word	0x08008fb0
 8001368:	08008fc0 	.word	0x08008fc0

0800136c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001370:	f000 fbb2 	bl	8001ad8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001374:	f000 f836 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001378:	f000 f936 	bl	80015e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800137c:	f000 f8a4 	bl	80014c8 <MX_I2C1_Init>
  MX_RTC_Init();
 8001380:	f000 f8e2 	bl	8001548 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8001384:	f000 f906 	bl	8001594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8001388:	f7ff fea2 	bl	80010d0 <lcd_init>

  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F4)
 800138c:	2101      	movs	r1, #1
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <main+0x70>)
 8001390:	f002 ff39 	bl	8004206 <HAL_RTCEx_BKUPRead>
 8001394:	4603      	mov	r3, r0
 8001396:	f243 22f4 	movw	r2, #13044	; 0x32f4
 800139a:	4293      	cmp	r3, r2
 800139c:	d001      	beq.n	80013a2 <main+0x36>
  {
	  set_time();  // set the time
 800139e:	f7ff fee9 	bl	8001174 <set_time>
  }

  set_alarm();
 80013a2:	f7ff ff27 	bl	80011f4 <set_alarm>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  get_time ();
 80013a6:	f7ff ff57 	bl	8001258 <get_time>
	  lcd_time ();
 80013aa:	f7ff ff89 	bl	80012c0 <lcd_time>
	  HAL_Delay (500);
 80013ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b2:	f000 fc03 	bl	8001bbc <HAL_Delay>

	  if (alarm == 1)
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <main+0x74>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d1f3      	bne.n	80013a6 <main+0x3a>
	  {
		  HAL_Delay(3000);
 80013be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013c2:	f000 fbfb 	bl	8001bbc <HAL_Delay>
		  Action_On_Alarm();
 80013c6:	f7ff ff9f 	bl	8001308 <Action_On_Alarm>
		  HAL_Delay(3000);
 80013ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013ce:	f000 fbf5 	bl	8001bbc <HAL_Delay>
		  alarm = 0;
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <main+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	  get_time ();
 80013d8:	e7e5      	b.n	80013a6 <main+0x3a>
 80013da:	bf00      	nop
 80013dc:	2000025c 	.word	0x2000025c
 80013e0:	20000206 	.word	0x20000206

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	; 0x50
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0320 	add.w	r3, r7, #32
 80013ee:	2230      	movs	r2, #48	; 0x30
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 f985 	bl	8005702 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <SystemClock_Config+0xdc>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a2b      	ldr	r2, [pc, #172]	; (80014c0 <SystemClock_Config+0xdc>)
 8001412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <SystemClock_Config+0xdc>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001424:	2300      	movs	r3, #0
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemClock_Config+0xe0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a25      	ldr	r2, [pc, #148]	; (80014c4 <SystemClock_Config+0xe0>)
 800142e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <SystemClock_Config+0xe0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001440:	2309      	movs	r3, #9
 8001442:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001452:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001458:	2304      	movs	r3, #4
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800145c:	23b4      	movs	r3, #180	; 0xb4
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001464:	2304      	movs	r3, #4
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fbd1 	bl	8002c14 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001478:	f000 f908 	bl	800168c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800147c:	f001 fb7a 	bl	8002b74 <HAL_PWREx_EnableOverDrive>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001486:	f000 f901 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148a:	230f      	movs	r3, #15
 800148c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148e:	2302      	movs	r3, #2
 8001490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001496:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2105      	movs	r1, #5
 80014a8:	4618      	mov	r0, r3
 80014aa:	f001 fe2b 	bl	8003104 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80014b4:	f000 f8ea 	bl	800168c <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_I2C1_Init+0x74>)
 80014ce:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <MX_I2C1_Init+0x78>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_I2C1_Init+0x74>)
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <MX_I2C1_Init+0x7c>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_I2C1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_I2C1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_I2C1_Init+0x74>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_I2C1_Init+0x74>)
 8001506:	f000 fe6f 	bl	80021e8 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 f8bc 	bl	800168c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <MX_I2C1_Init+0x74>)
 8001518:	f001 fab1 	bl	8002a7e <HAL_I2CEx_ConfigAnalogFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001522:	f000 f8b3 	bl	800168c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C1_Init+0x74>)
 800152a:	f001 fae4 	bl	8002af6 <HAL_I2CEx_ConfigDigitalFilter>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 f8aa 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000208 	.word	0x20000208
 8001540:	40005400 	.word	0x40005400
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_RTC_Init+0x44>)
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <MX_RTC_Init+0x48>)
 8001550:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_RTC_Init+0x44>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_RTC_Init+0x44>)
 800155a:	227f      	movs	r2, #127	; 0x7f
 800155c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_RTC_Init+0x44>)
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_RTC_Init+0x44>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_RTC_Init+0x44>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_RTC_Init+0x44>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_RTC_Init+0x44>)
 8001578:	f002 f9a4 	bl	80038c4 <HAL_RTC_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001582:	f000 f883 	bl	800168c <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */

  /* USER CODE END Check_RTC_BKUP */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000025c 	.word	0x2000025c
 8001590:	40002800 	.word	0x40002800

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <MX_USART2_UART_Init+0x50>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_USART2_UART_Init+0x4c>)
 80015cc:	f002 fe3d 	bl	800424a <HAL_UART_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d6:	f000 f859 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000027c 	.word	0x2000027c
 80015e4:	40004400 	.word	0x40004400

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a18      	ldr	r2, [pc, #96]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_GPIO_Init+0x9c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <MX_GPIO_Init+0x9c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_GPIO_Init+0x9c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <MX_GPIO_Init+0xa0>)
 800165a:	f000 fd91 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800165e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	2301      	movs	r3, #1
 8001666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4619      	mov	r1, r3
 8001676:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_GPIO_Init+0xa0>)
 8001678:	f000 fbd6 	bl	8001e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800167c:	bf00      	nop
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40020400 	.word	0x40020400

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_I2C_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001726:	23c0      	movs	r3, #192	; 0xc0
 8001728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172a:	2312      	movs	r3, #18
 800172c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001736:	2304      	movs	r3, #4
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <HAL_I2C_MspInit+0x8c>)
 8001742:	f000 fb71 	bl	8001e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_I2C_MspInit+0x88>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40005400 	.word	0x40005400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	; 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	2230      	movs	r2, #48	; 0x30
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f003 ffba 	bl	8005702 <memset>
  if(hrtc->Instance==RTC)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_RTC_MspInit+0x5c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d119      	bne.n	80017cc <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001798:	2320      	movs	r3, #32
 800179a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800179c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fecc 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80017b2:	f7ff ff6b 	bl	800168c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_RTC_MspInit+0x60>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2029      	movs	r0, #41	; 0x29
 80017c2:	f000 fafa 	bl	8001dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017c6:	2029      	movs	r0, #41	; 0x29
 80017c8:	f000 fb13 	bl	8001df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017cc:	bf00      	nop
 80017ce:	3738      	adds	r7, #56	; 0x38
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40002800 	.word	0x40002800
 80017d8:	42470e3c 	.word	0x42470e3c

080017dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_UART_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12b      	bne.n	8001856 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800180c:	6413      	str	r3, [r2, #64]	; 0x40
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_UART_MspInit+0x88>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_UART_MspInit+0x88>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001836:	230c      	movs	r3, #12
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001846:	2307      	movs	r3, #7
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_UART_MspInit+0x8c>)
 8001852:	f000 fae9 	bl	8001e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40004400 	.word	0x40004400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020000 	.word	0x40020000

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <NMI_Handler+0x4>

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f960 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <RTC_Alarm_IRQHandler+0x10>)
 80018c6:	f002 fb81 	bl	8003fcc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000025c 	.word	0x2000025c

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_kill>:

int _kill(int pid, int sig)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ee:	f003 ff5b 	bl	80057a8 <__errno>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2216      	movs	r2, #22
 80018f6:	601a      	str	r2, [r3, #0]
  return -1;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe7 	bl	80018e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001916:	e7fe      	b.n	8001916 <_exit+0x12>

08001918 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e00a      	b.n	8001940 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192a:	f3af 8000 	nop.w
 800192e:	4601      	mov	r1, r0
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	b2ca      	uxtb	r2, r1
 8001938:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf0      	blt.n	800192a <_read+0x12>
  }

  return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	e009      	b.n	8001978 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	dbf1      	blt.n	8001964 <_write+0x12>
  }
  return len;
 8001980:	687b      	ldr	r3, [r7, #4]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <_close>:

int _close(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b2:	605a      	str	r2, [r3, #4]
  return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_isatty>:

int _isatty(int file)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f003 fec0 	bl	80057a8 <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20030000 	.word	0x20030000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	200002c0 	.word	0x200002c0
 8001a5c:	20000418 	.word	0x20000418

08001a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ffd7 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f003 fe7f 	bl	80057b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff fc59 	bl	800136c <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001abc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ac8:	08009418 	.word	0x08009418
  ldr r2, =_sbss
 8001acc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ad0:	20000414 	.word	0x20000414

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>
	...

08001ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001adc:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <HAL_Init+0x40>)
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_Init+0x40>)
 8001aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <HAL_Init+0x40>)
 8001afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b00:	2003      	movs	r0, #3
 8001b02:	f000 f94f 	bl	8001da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b06:	200f      	movs	r0, #15
 8001b08:	f000 f808 	bl	8001b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b0c:	f7ff fdc4 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_InitTick+0x54>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_InitTick+0x58>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f967 	bl	8001e0e <HAL_SYSTICK_Config>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b0f      	cmp	r3, #15
 8001b4e:	d80a      	bhi.n	8001b66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b50:	2200      	movs	r2, #0
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f000 f92f 	bl	8001dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_InitTick+0x5c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000008 	.word	0x20000008
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	200002c4 	.word	0x200002c4

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200002c4 	.word	0x200002c4

08001bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc4:	f7ff ffee 	bl	8001ba4 <HAL_GetTick>
 8001bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd4:	d005      	beq.n	8001be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_Delay+0x44>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001be2:	bf00      	nop
 8001be4:	f7ff ffde 	bl	8001ba4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d8f7      	bhi.n	8001be4 <HAL_Delay+0x28>
  {
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000008 	.word	0x20000008

08001c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1a:	68ba      	ldr	r2, [r7, #8]
 8001c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c20:	4013      	ands	r3, r2
 8001c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <__NVIC_SetPriorityGrouping+0x44>)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	60d3      	str	r3, [r2, #12]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <__NVIC_GetPriorityGrouping+0x18>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f003 0307 	and.w	r3, r3, #7
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db0b      	blt.n	8001c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	f003 021f 	and.w	r2, r3, #31
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <__NVIC_EnableIRQ+0x38>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	2001      	movs	r0, #1
 8001c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000e100 	.word	0xe000e100

08001ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	db0a      	blt.n	8001cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	490c      	ldr	r1, [pc, #48]	; (8001cf0 <__NVIC_SetPriority+0x4c>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	0112      	lsls	r2, r2, #4
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ccc:	e00a      	b.n	8001ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4908      	ldr	r1, [pc, #32]	; (8001cf4 <__NVIC_SetPriority+0x50>)
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3b04      	subs	r3, #4
 8001cdc:	0112      	lsls	r2, r2, #4
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	761a      	strb	r2, [r3, #24]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000e100 	.word	0xe000e100
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b089      	sub	sp, #36	; 0x24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f1c3 0307 	rsb	r3, r3, #7
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	bf28      	it	cs
 8001d16:	2304      	movcs	r3, #4
 8001d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	2b06      	cmp	r3, #6
 8001d20:	d902      	bls.n	8001d28 <NVIC_EncodePriority+0x30>
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3b03      	subs	r3, #3
 8001d26:	e000      	b.n	8001d2a <NVIC_EncodePriority+0x32>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43da      	mvns	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d40:	f04f 31ff 	mov.w	r1, #4294967295
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d50:	4313      	orrs	r3, r2
         );
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d70:	d301      	bcc.n	8001d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00f      	b.n	8001d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <SysTick_Config+0x40>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d7e:	210f      	movs	r1, #15
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f7ff ff8e 	bl	8001ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <SysTick_Config+0x40>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Config+0x40>)
 8001d90:	2207      	movs	r2, #7
 8001d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	e000e010 	.word	0xe000e010

08001da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff29 	bl	8001c04 <__NVIC_SetPriorityGrouping>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dcc:	f7ff ff3e 	bl	8001c4c <__NVIC_GetPriorityGrouping>
 8001dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f7ff ff8e 	bl	8001cf8 <NVIC_EncodePriority>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff5d 	bl	8001ca4 <__NVIC_SetPriority>
}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff31 	bl	8001c68 <__NVIC_EnableIRQ>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff ffa2 	bl	8001d60 <SysTick_Config>
 8001e1c:	4603      	mov	r3, r0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	e177      	b.n	8002134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e44:	2201      	movs	r2, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8166 	bne.w	800212e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d005      	beq.n	8001e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d130      	bne.n	8001edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80c0 	beq.w	800212e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	4b66      	ldr	r3, [pc, #408]	; (800214c <HAL_GPIO_Init+0x324>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_GPIO_Init+0x324>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_GPIO_Init+0x324>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fca:	4a61      	ldr	r2, [pc, #388]	; (8002150 <HAL_GPIO_Init+0x328>)
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a58      	ldr	r2, [pc, #352]	; (8002154 <HAL_GPIO_Init+0x32c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d037      	beq.n	8002066 <HAL_GPIO_Init+0x23e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a57      	ldr	r2, [pc, #348]	; (8002158 <HAL_GPIO_Init+0x330>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d031      	beq.n	8002062 <HAL_GPIO_Init+0x23a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a56      	ldr	r2, [pc, #344]	; (800215c <HAL_GPIO_Init+0x334>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <HAL_GPIO_Init+0x236>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a55      	ldr	r2, [pc, #340]	; (8002160 <HAL_GPIO_Init+0x338>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d025      	beq.n	800205a <HAL_GPIO_Init+0x232>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a54      	ldr	r2, [pc, #336]	; (8002164 <HAL_GPIO_Init+0x33c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d01f      	beq.n	8002056 <HAL_GPIO_Init+0x22e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a53      	ldr	r2, [pc, #332]	; (8002168 <HAL_GPIO_Init+0x340>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d019      	beq.n	8002052 <HAL_GPIO_Init+0x22a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x344>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <HAL_GPIO_Init+0x226>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_GPIO_Init+0x348>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_GPIO_Init+0x222>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a50      	ldr	r2, [pc, #320]	; (8002174 <HAL_GPIO_Init+0x34c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d007      	beq.n	8002046 <HAL_GPIO_Init+0x21e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_GPIO_Init+0x350>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_GPIO_Init+0x21a>
 800203e:	2309      	movs	r3, #9
 8002040:	e012      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002042:	230a      	movs	r3, #10
 8002044:	e010      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002046:	2308      	movs	r3, #8
 8002048:	e00e      	b.n	8002068 <HAL_GPIO_Init+0x240>
 800204a:	2307      	movs	r3, #7
 800204c:	e00c      	b.n	8002068 <HAL_GPIO_Init+0x240>
 800204e:	2306      	movs	r3, #6
 8002050:	e00a      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002052:	2305      	movs	r3, #5
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002056:	2304      	movs	r3, #4
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x240>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x240>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x240>
 8002066:	2300      	movs	r3, #0
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <HAL_GPIO_Init+0x328>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002086:	4b3d      	ldr	r3, [pc, #244]	; (800217c <HAL_GPIO_Init+0x354>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020aa:	4a34      	ldr	r2, [pc, #208]	; (800217c <HAL_GPIO_Init+0x354>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b0:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_GPIO_Init+0x354>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <HAL_GPIO_Init+0x354>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_GPIO_Init+0x354>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fe:	4a1f      	ldr	r2, [pc, #124]	; (800217c <HAL_GPIO_Init+0x354>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_GPIO_Init+0x354>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <HAL_GPIO_Init+0x354>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f67f ae84 	bls.w	8001e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40021400 	.word	0x40021400
 800216c:	40021800 	.word	0x40021800
 8002170:	40021c00 	.word	0x40021c00
 8002174:	40022000 	.word	0x40022000
 8002178:	40022400 	.word	0x40022400
 800217c:	40013c00 	.word	0x40013c00

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	041a      	lsls	r2, r3, #16
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	400b      	ands	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e12b      	b.n	8002452 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fa6a 	bl	80016e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2224      	movs	r2, #36	; 0x24
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800223a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800224a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800224c:	f001 f952 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8002250:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4a81      	ldr	r2, [pc, #516]	; (800245c <HAL_I2C_Init+0x274>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d807      	bhi.n	800226c <HAL_I2C_Init+0x84>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4a80      	ldr	r2, [pc, #512]	; (8002460 <HAL_I2C_Init+0x278>)
 8002260:	4293      	cmp	r3, r2
 8002262:	bf94      	ite	ls
 8002264:	2301      	movls	r3, #1
 8002266:	2300      	movhi	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	e006      	b.n	800227a <HAL_I2C_Init+0x92>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a7d      	ldr	r2, [pc, #500]	; (8002464 <HAL_I2C_Init+0x27c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	bf94      	ite	ls
 8002274:	2301      	movls	r3, #1
 8002276:	2300      	movhi	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e7      	b.n	8002452 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4a78      	ldr	r2, [pc, #480]	; (8002468 <HAL_I2C_Init+0x280>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	0c9b      	lsrs	r3, r3, #18
 800228c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4a6a      	ldr	r2, [pc, #424]	; (800245c <HAL_I2C_Init+0x274>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d802      	bhi.n	80022bc <HAL_I2C_Init+0xd4>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3301      	adds	r3, #1
 80022ba:	e009      	b.n	80022d0 <HAL_I2C_Init+0xe8>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	4a69      	ldr	r2, [pc, #420]	; (800246c <HAL_I2C_Init+0x284>)
 80022c8:	fba2 2303 	umull	r2, r3, r2, r3
 80022cc:	099b      	lsrs	r3, r3, #6
 80022ce:	3301      	adds	r3, #1
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	495c      	ldr	r1, [pc, #368]	; (800245c <HAL_I2C_Init+0x274>)
 80022ec:	428b      	cmp	r3, r1
 80022ee:	d819      	bhi.n	8002324 <HAL_I2C_Init+0x13c>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1e59      	subs	r1, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80022fe:	1c59      	adds	r1, r3, #1
 8002300:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002304:	400b      	ands	r3, r1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00a      	beq.n	8002320 <HAL_I2C_Init+0x138>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e59      	subs	r1, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fbb1 f3f3 	udiv	r3, r1, r3
 8002318:	3301      	adds	r3, #1
 800231a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231e:	e051      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 8002320:	2304      	movs	r3, #4
 8002322:	e04f      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d111      	bne.n	8002350 <HAL_I2C_Init+0x168>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	440b      	add	r3, r1
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf0c      	ite	eq
 8002348:	2301      	moveq	r3, #1
 800234a:	2300      	movne	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e012      	b.n	8002376 <HAL_I2C_Init+0x18e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Init+0x196>
 800237a:	2301      	movs	r3, #1
 800237c:	e022      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10e      	bne.n	80023a4 <HAL_I2C_Init+0x1bc>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	1e58      	subs	r0, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6859      	ldr	r1, [r3, #4]
 800238e:	460b      	mov	r3, r1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	440b      	add	r3, r1
 8002394:	fbb0 f3f3 	udiv	r3, r0, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a2:	e00f      	b.n	80023c4 <HAL_I2C_Init+0x1dc>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	0099      	lsls	r1, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	6809      	ldr	r1, [r1, #0]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69da      	ldr	r2, [r3, #28]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6911      	ldr	r1, [r2, #16]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68d2      	ldr	r2, [r2, #12]
 80023fe:	4311      	orrs	r1, r2
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	430b      	orrs	r3, r1
 8002406:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	000186a0 	.word	0x000186a0
 8002460:	001e847f 	.word	0x001e847f
 8002464:	003d08ff 	.word	0x003d08ff
 8002468:	431bde83 	.word	0x431bde83
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	460b      	mov	r3, r1
 800247e:	817b      	strh	r3, [r7, #10]
 8002480:	4613      	mov	r3, r2
 8002482:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fb8e 	bl	8001ba4 <HAL_GetTick>
 8002488:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	f040 80e0 	bne.w	8002658 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2319      	movs	r3, #25
 800249e:	2201      	movs	r2, #1
 80024a0:	4970      	ldr	r1, [pc, #448]	; (8002664 <HAL_I2C_Master_Transmit+0x1f4>)
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f964 	bl	8002770 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
 80024b0:	e0d3      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_I2C_Master_Transmit+0x50>
 80024bc:	2302      	movs	r3, #2
 80024be:	e0cc      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d007      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2221      	movs	r2, #33	; 0x21
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2210      	movs	r2, #16
 8002502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4a50      	ldr	r2, [pc, #320]	; (8002668 <HAL_I2C_Master_Transmit+0x1f8>)
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002528:	8979      	ldrh	r1, [r7, #10]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f89c 	bl	800266c <I2C_MasterRequestWrite>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e08d      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002554:	e066      	b.n	8002624 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f9de 	bl	800291c <I2C_WaitOnTXEFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00d      	beq.n	8002582 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	2b04      	cmp	r3, #4
 800256c:	d107      	bne.n	800257e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e06b      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d11b      	bne.n	80025f8 <HAL_I2C_Master_Transmit+0x188>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	781a      	ldrb	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	6a39      	ldr	r1, [r7, #32]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f000 f9ce 	bl	800299e <I2C_WaitOnBTFFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b04      	cmp	r3, #4
 800260e:	d107      	bne.n	8002620 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01a      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002628:	2b00      	cmp	r3, #0
 800262a:	d194      	bne.n	8002556 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	00100002 	.word	0x00100002
 8002668:	ffff0000 	.word	0xffff0000

0800266c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d006      	beq.n	8002696 <I2C_MasterRequestWrite+0x2a>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d003      	beq.n	8002696 <I2C_MasterRequestWrite+0x2a>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002694:	d108      	bne.n	80026a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e00b      	b.n	80026c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d107      	bne.n	80026c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 f84f 	bl	8002770 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00d      	beq.n	80026f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e6:	d103      	bne.n	80026f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e035      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026fc:	d108      	bne.n	8002710 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	e01b      	b.n	8002748 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002710:	897b      	ldrh	r3, [r7, #10]
 8002712:	11db      	asrs	r3, r3, #7
 8002714:	b2db      	uxtb	r3, r3
 8002716:	f003 0306 	and.w	r3, r3, #6
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f063 030f 	orn	r3, r3, #15
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <I2C_MasterRequestWrite+0xfc>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f875 	bl	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e010      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800273e:	897b      	ldrh	r3, [r7, #10]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <I2C_MasterRequestWrite+0x100>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f865 	bl	800281e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	00010008 	.word	0x00010008
 800276c:	00010002 	.word	0x00010002

08002770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002780:	e025      	b.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d021      	beq.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7ff fa0b 	bl	8001ba4 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d302      	bcc.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d116      	bne.n	80027ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f043 0220 	orr.w	r2, r3, #32
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e023      	b.n	8002816 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10d      	bne.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	43da      	mvns	r2, r3
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4013      	ands	r3, r2
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	bf0c      	ite	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	2300      	movne	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
 80027f2:	e00c      	b.n	800280e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	429a      	cmp	r2, r3
 8002812:	d0b6      	beq.n	8002782 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800282c:	e051      	b.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283c:	d123      	bne.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800284c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002856:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0204 	orr.w	r2, r3, #4
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e046      	b.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d021      	beq.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288e:	f7ff f989 	bl	8001ba4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d302      	bcc.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d116      	bne.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e020      	b.n	8002914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e00b      	b.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d18d      	bne.n	800282e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002928:	e02d      	b.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f878 	bl	8002a20 <I2C_IsAcknowledgeFailed>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e02d      	b.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d021      	beq.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002942:	f7ff f92f 	bl	8001ba4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	429a      	cmp	r2, r3
 8002950:	d302      	bcc.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d116      	bne.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0220 	orr.w	r2, r3, #32
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d1ca      	bne.n	800292a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029aa:	e02d      	b.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f837 	bl	8002a20 <I2C_IsAcknowledgeFailed>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e02d      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d021      	beq.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c4:	f7ff f8ee 	bl	8001ba4 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d302      	bcc.n	80029da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d1ca      	bne.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d11b      	bne.n	8002a70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b20      	cmp	r3, #32
 8002a92:	d129      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2224      	movs	r2, #36	; 0x24
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0210 	bic.w	r2, r2, #16
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d12a      	bne.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b30:	89fb      	ldrh	r3, [r7, #14]
 8002b32:	f023 030f 	bic.w	r3, r3, #15
 8002b36:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_PWREx_EnableOverDrive+0x90>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ba0:	f7ff f800 	bl	8001ba4 <HAL_GetTick>
 8002ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ba6:	e009      	b.n	8002bbc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ba8:	f7fe fffc 	bl	8001ba4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb6:	d901      	bls.n	8002bbc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e01f      	b.n	8002bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bca:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bd0:	f7fe ffe8 	bl	8001ba4 <HAL_GetTick>
 8002bd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bd6:	e009      	b.n	8002bec <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd8:	f7fe ffe4 	bl	8001ba4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be6:	d901      	bls.n	8002bec <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e007      	b.n	8002bfc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40023800 	.word	0x40023800
 8002c08:	420e0040 	.word	0x420e0040
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	420e0044 	.word	0x420e0044

08002c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e267      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d075      	beq.n	8002d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3e:	4b85      	ldr	r3, [pc, #532]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d112      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b82      	ldr	r3, [pc, #520]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b7e      	ldr	r3, [pc, #504]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05b      	beq.n	8002d1c <HAL_RCC_OscConfig+0x108>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d157      	bne.n	8002d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e242      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d106      	bne.n	8002c88 <HAL_RCC_OscConfig+0x74>
 8002c7a:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a75      	ldr	r2, [pc, #468]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e01d      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c90:	d10c      	bne.n	8002cac <HAL_RCC_OscConfig+0x98>
 8002c92:	4b70      	ldr	r3, [pc, #448]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a6f      	ldr	r2, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6c      	ldr	r2, [pc, #432]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e00b      	b.n	8002cc4 <HAL_RCC_OscConfig+0xb0>
 8002cac:	4b69      	ldr	r3, [pc, #420]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a68      	ldr	r2, [pc, #416]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ccc:	f7fe ff6a 	bl	8001ba4 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd4:	f7fe ff66 	bl	8001ba4 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b64      	cmp	r3, #100	; 0x64
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e207      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce6:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xc0>
 8002cf2:	e014      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fe ff56 	bl	8001ba4 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7fe ff52 	bl	8001ba4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e1f3      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0xe8>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d063      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00b      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d36:	4b47      	ldr	r3, [pc, #284]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d11c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b44      	ldr	r3, [pc, #272]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d116      	bne.n	8002d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e1c7      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4937      	ldr	r1, [pc, #220]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	e03a      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d84:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fe ff0b 	bl	8001ba4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fe ff07 	bl	8001ba4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e1a8      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db0:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4925      	ldr	r1, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
 8002dc4:	e015      	b.n	8002df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dc6:	4b24      	ldr	r3, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x244>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe feea 	bl	8001ba4 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dd4:	f7fe fee6 	bl	8001ba4 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e187      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d036      	beq.n	8002e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe feca 	bl	8001ba4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fe fec6 	bl	8001ba4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e167      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_OscConfig+0x240>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x200>
 8002e32:	e01b      	b.n	8002e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <HAL_RCC_OscConfig+0x248>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fe feb3 	bl	8001ba4 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e00e      	b.n	8002e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fe feaf 	bl	8001ba4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d907      	bls.n	8002e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e150      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8002e54:	40023800 	.word	0x40023800
 8002e58:	42470000 	.word	0x42470000
 8002e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ea      	bne.n	8002e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8097 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10f      	bne.n	8002eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a7c      	ldr	r2, [pc, #496]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9a:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eaa:	4b77      	ldr	r3, [pc, #476]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d118      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb6:	4b74      	ldr	r3, [pc, #464]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a73      	ldr	r2, [pc, #460]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fe6f 	bl	8001ba4 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eca:	f7fe fe6b 	bl	8001ba4 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b6a      	ldr	r3, [pc, #424]	; (8003088 <HAL_RCC_OscConfig+0x474>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x2ea>
 8002ef0:	4b64      	ldr	r3, [pc, #400]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a63      	ldr	r2, [pc, #396]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	e01c      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x30c>
 8002f06:	4b5f      	ldr	r3, [pc, #380]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5b      	ldr	r2, [pc, #364]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCC_OscConfig+0x324>
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	4a57      	ldr	r2, [pc, #348]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2c:	4b55      	ldr	r3, [pc, #340]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 0304 	bic.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe fe30 	bl	8001ba4 <HAL_GetTick>
 8002f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	e00a      	b.n	8002f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f48:	f7fe fe2c 	bl	8001ba4 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e0cb      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	4b49      	ldr	r3, [pc, #292]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ee      	beq.n	8002f48 <HAL_RCC_OscConfig+0x334>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fe1a 	bl	8001ba4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fe fe16 	bl	8001ba4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0b5      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	4b3e      	ldr	r3, [pc, #248]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ee      	bne.n	8002f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	4a38      	ldr	r2, [pc, #224]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a1 	beq.w	80030f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d05c      	beq.n	8003078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d141      	bne.n	800304a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc6:	4b31      	ldr	r3, [pc, #196]	; (800308c <HAL_RCC_OscConfig+0x478>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fdea 	bl	8001ba4 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd4:	f7fe fde6 	bl	8001ba4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e087      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe6:	4b27      	ldr	r3, [pc, #156]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	041b      	lsls	r3, r3, #16
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	491b      	ldr	r1, [pc, #108]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fdbf 	bl	8001ba4 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe fdbb 	bl	8001ba4 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e05c      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x416>
 8003048:	e054      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	; (800308c <HAL_RCC_OscConfig+0x478>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fda8 	bl	8001ba4 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fda4 	bl	8001ba4 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e045      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCC_OscConfig+0x470>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x444>
 8003076:	e03d      	b.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d107      	bne.n	8003090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e038      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
 8003084:	40023800 	.word	0x40023800
 8003088:	40007000 	.word	0x40007000
 800308c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x4ec>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d028      	beq.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d11a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d111      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	3b01      	subs	r3, #1
 80030da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40023800 	.word	0x40023800

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0cc      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b68      	ldr	r3, [pc, #416]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d90c      	bls.n	8003140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d044      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d119      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d003      	beq.n	80031c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e067      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4934      	ldr	r1, [pc, #208]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fe fcd6 	bl	8001ba4 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fe fcd2 	bl	8001ba4 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e04f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2b      	ldr	r3, [pc, #172]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d20c      	bcs.n	800324c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fc36 	bl	8001b1c <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08008fc4 	.word	0x08008fc4
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b094      	sub	sp, #80	; 0x50
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	2300      	movs	r3, #0
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	2300      	movs	r3, #0
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80e1 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e0db      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003308:	e0db      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330e:	e0d8      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
 800333a:	2300      	movs	r3, #0
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
 800333e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	0159      	lsls	r1, r3, #5
 8003350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003354:	0150      	lsls	r0, r2, #5
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4621      	mov	r1, r4
 800335c:	1a51      	subs	r1, r2, r1
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	4629      	mov	r1, r5
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003374:	4659      	mov	r1, fp
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	4651      	mov	r1, sl
 800337a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337e:	4651      	mov	r1, sl
 8003380:	018a      	lsls	r2, r1, #6
 8003382:	4651      	mov	r1, sl
 8003384:	ebb2 0801 	subs.w	r8, r2, r1
 8003388:	4659      	mov	r1, fp
 800338a:	eb63 0901 	sbc.w	r9, r3, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a2:	4690      	mov	r8, r2
 80033a4:	4699      	mov	r9, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	eb18 0303 	adds.w	r3, r8, r3
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	462b      	mov	r3, r5
 80033b0:	eb49 0303 	adc.w	r3, r9, r3
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c2:	4629      	mov	r1, r5
 80033c4:	024b      	lsls	r3, r1, #9
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033cc:	4621      	mov	r1, r4
 80033ce:	024a      	lsls	r2, r1, #9
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e0:	f7fd fc62 	bl	8000ca8 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	e058      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	4611      	mov	r1, r2
 80033fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341a:	0150      	lsls	r0, r2, #5
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4641      	mov	r1, r8
 8003422:	ebb2 0a01 	subs.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb63 0b01 	sbc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800343c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003440:	ebb2 040a 	subs.w	r4, r2, sl
 8003444:	eb63 050b 	sbc.w	r5, r3, fp
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	464b      	mov	r3, r9
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	61fa      	str	r2, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	f7fd fc08 	bl	8000ca8 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3750      	adds	r7, #80	; 0x50
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08008fd4 	.word	0x08008fd4

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08008fd4 	.word	0x08008fd4

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003574:	2b00      	cmp	r3, #0
 8003576:	d075      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800357e:	f7fe fb11 	bl	8001ba4 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003586:	f7fe fb0d 	bl	8001ba4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e189      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003598:	4b8a      	ldr	r3, [pc, #552]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	019a      	lsls	r2, r3, #6
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	071b      	lsls	r3, r3, #28
 80035bc:	4981      	ldr	r1, [pc, #516]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01f      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035d0:	4b7c      	ldr	r3, [pc, #496]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	0f1b      	lsrs	r3, r3, #28
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	019a      	lsls	r2, r3, #6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	431a      	orrs	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	071b      	lsls	r3, r3, #28
 80035f0:	4974      	ldr	r1, [pc, #464]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035f8:	4b72      	ldr	r3, [pc, #456]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035fe:	f023 021f 	bic.w	r2, r3, #31
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	3b01      	subs	r3, #1
 8003608:	496e      	ldr	r1, [pc, #440]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	019a      	lsls	r2, r3, #6
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	071b      	lsls	r3, r3, #28
 8003630:	4964      	ldr	r1, [pc, #400]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003638:	4b61      	ldr	r3, [pc, #388]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800363e:	f7fe fab1 	bl	8001ba4 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003646:	f7fe faad 	bl	8001ba4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e129      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003658:	4b5a      	ldr	r3, [pc, #360]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003678:	2b00      	cmp	r3, #0
 800367a:	d079      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800367c:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003682:	f7fe fa8f 	bl	8001ba4 <HAL_GetTick>
 8003686:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003688:	e008      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800368a:	f7fe fa8b 	bl	8001ba4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e107      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800369c:	4b49      	ldr	r3, [pc, #292]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d0ef      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036b6:	4b43      	ldr	r3, [pc, #268]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	0f1b      	lsrs	r3, r3, #28
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	019a      	lsls	r2, r3, #6
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	431a      	orrs	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	071b      	lsls	r3, r3, #28
 80036d6:	493b      	ldr	r1, [pc, #236]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036de:	4b39      	ldr	r3, [pc, #228]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	4934      	ldr	r1, [pc, #208]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d01e      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003704:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	019a      	lsls	r2, r3, #6
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	071b      	lsls	r3, r3, #28
 8003724:	4927      	ldr	r1, [pc, #156]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800372e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003748:	f7fe fa2c 	bl	8001ba4 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003750:	f7fe fa28 	bl	8001ba4 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e0a4      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003762:	4b18      	ldr	r3, [pc, #96]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376e:	d1ef      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 808b 	beq.w	8003894 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4a0f      	ldr	r2, [pc, #60]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378c:	6413      	str	r3, [r2, #64]	; 0x40
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037a6:	f7fe f9fd 	bl	8001ba4 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037ac:	e010      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe f9f9 	bl	8001ba4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d909      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e075      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80037c0:	42470068 	.word	0x42470068
 80037c4:	40023800 	.word	0x40023800
 80037c8:	42470070 	.word	0x42470070
 80037cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d0:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0e8      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02f      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d028      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003802:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003804:	4b2d      	ldr	r3, [pc, #180]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003806:	2201      	movs	r2, #1
 8003808:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003810:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b01      	cmp	r3, #1
 8003820:	d114      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003822:	f7fe f9bf 	bl	8001ba4 <HAL_GetTick>
 8003826:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fe f9bb 	bl	8001ba4 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e035      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ee      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003858:	d10d      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800386a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386e:	4912      	ldr	r1, [pc, #72]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
 8003874:	e005      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a0f      	ldr	r2, [pc, #60]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800387c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	490a      	ldr	r1, [pc, #40]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003890:	4313      	orrs	r3, r2
 8003892:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80038a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40007000 	.word	0x40007000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	42470e40 	.word	0x42470e40
 80038c0:	424711e0 	.word	0x424711e0

080038c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e066      	b.n	80039a8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	7f5b      	ldrb	r3, [r3, #29]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ff44 	bl	8001778 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	22ca      	movs	r2, #202	; 0xca
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2253      	movs	r2, #83	; 0x53
 8003904:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fbce 	bl	80040a8 <RTC_EnterInitMode>
 800390c:	4603      	mov	r3, r0
 800390e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d12c      	bne.n	8003970 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003928:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68d2      	ldr	r2, [r2, #12]
 8003950:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6919      	ldr	r1, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	041a      	lsls	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fbd5 	bl	8004116 <RTC_ExitInitMode>
 800396c:	4603      	mov	r3, r0
 800396e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d113      	bne.n	800399e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	7f1b      	ldrb	r3, [r3, #28]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_RTC_SetTime+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e087      	b.n	8003adc <HAL_RTC_SetTime+0x12c>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2202      	movs	r2, #2
 80039d6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d126      	bne.n	8003a2c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fbb2 	bl	8004160 <RTC_ByteToBcd2>
 80039fc:	4603      	mov	r3, r0
 80039fe:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fbab 	bl	8004160 <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a0e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	789b      	ldrb	r3, [r3, #2]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fba3 	bl	8004160 <RTC_ByteToBcd2>
 8003a1a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a1c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e018      	b.n	8003a5e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a4c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a52:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	78db      	ldrb	r3, [r3, #3]
 8003a58:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	22ca      	movs	r2, #202	; 0xca
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2253      	movs	r2, #83	; 0x53
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fb1a 	bl	80040a8 <RTC_EnterInitMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d120      	bne.n	8003ac0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003a88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003a8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fb2d 	bl	8004116 <RTC_ExitInitMode>
 8003abc:	4603      	mov	r3, r0
 8003abe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d102      	bne.n	8003acc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]

  return status;
 8003ada:	7cfb      	ldrb	r3, [r7, #19]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd90      	pop	{r4, r7, pc}

08003ae4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003b16:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003b1a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	0d9b      	lsrs	r3, r3, #22
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11a      	bne.n	8003b96 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fb18 	bl	800419a <RTC_Bcd2ToByte>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb0f 	bl	800419a <RTC_Bcd2ToByte>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	789b      	ldrb	r3, [r3, #2]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb06 	bl	800419a <RTC_Bcd2ToByte>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	7f1b      	ldrb	r3, [r3, #28]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_RTC_SetDate+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e071      	b.n	8003ca0 <HAL_RTC_SetDate+0x100>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10e      	bne.n	8003bec <HAL_RTC_SetDate+0x4c>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	f023 0310 	bic.w	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	330a      	adds	r3, #10
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d11c      	bne.n	8003c2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	78db      	ldrb	r3, [r3, #3]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fab2 	bl	8004160 <RTC_ByteToBcd2>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	785b      	ldrb	r3, [r3, #1]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 faab 	bl	8004160 <RTC_ByteToBcd2>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c0e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	789b      	ldrb	r3, [r3, #2]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 faa3 	bl	8004160 <RTC_ByteToBcd2>
 8003c1a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c1c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e00e      	b.n	8003c4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	78db      	ldrb	r3, [r3, #3]
 8003c30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c38:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	22ca      	movs	r2, #202	; 0xca
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2253      	movs	r2, #83	; 0x53
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 fa24 	bl	80040a8 <RTC_EnterInitMode>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa4b 	bl	8004116 <RTC_ExitInitMode>
 8003c80:	4603      	mov	r3, r0
 8003c82:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	771a      	strb	r2, [r3, #28]

  return status;
 8003c9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd90      	pop	{r4, r7, pc}

08003ca8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003cc2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	0a1b      	lsrs	r3, r3, #8
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0b5b      	lsrs	r3, r3, #13
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0307 	and.w	r3, r3, #7
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11a      	bne.n	8003d3c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	78db      	ldrb	r3, [r3, #3]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa45 	bl	800419a <RTC_Bcd2ToByte>
 8003d10:	4603      	mov	r3, r0
 8003d12:	461a      	mov	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	785b      	ldrb	r3, [r3, #1]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fa3c 	bl	800419a <RTC_Bcd2ToByte>
 8003d22:	4603      	mov	r3, r0
 8003d24:	461a      	mov	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fa33 	bl	800419a <RTC_Bcd2ToByte>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003d54:	4b9a      	ldr	r3, [pc, #616]	; (8003fc0 <HAL_RTC_SetAlarm_IT+0x278>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a9a      	ldr	r2, [pc, #616]	; (8003fc4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0adb      	lsrs	r3, r3, #11
 8003d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d64:	fb02 f303 	mul.w	r3, r2, r3
 8003d68:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	7f1b      	ldrb	r3, [r3, #28]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_RTC_SetAlarm_IT+0x36>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e11c      	b.n	8003fb8 <HAL_RTC_SetAlarm_IT+0x270>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2202      	movs	r2, #2
 8003d88:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d137      	bne.n	8003e00 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2200      	movs	r2, #0
 8003da2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f9d9 	bl	8004160 <RTC_ByteToBcd2>
 8003dae:	4603      	mov	r3, r0
 8003db0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	785b      	ldrb	r3, [r3, #1]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f9d2 	bl	8004160 <RTC_ByteToBcd2>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003dc0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	789b      	ldrb	r3, [r3, #2]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f9ca 	bl	8004160 <RTC_ByteToBcd2>
 8003dcc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003dce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	78db      	ldrb	r3, [r3, #3]
 8003dd6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003dd8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f9bc 	bl	8004160 <RTC_ByteToBcd2>
 8003de8:	4603      	mov	r3, r0
 8003dea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003dec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003df4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e023      	b.n	8003e48 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e20:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003e22:	68ba      	ldr	r2, [r7, #8]
 8003e24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003e26:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	78db      	ldrb	r3, [r3, #3]
 8003e2c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003e2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e36:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003e38:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003e3e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	22ca      	movs	r2, #202	; 0xca
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2253      	movs	r2, #83	; 0x53
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e7c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003e8e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1e5a      	subs	r2, r3, #1
 8003e94:	617a      	str	r2, [r7, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	22ff      	movs	r2, #255	; 0xff
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e082      	b.n	8003fb8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0e7      	beq.n	8003e90 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	e04b      	b.n	8003f8a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f00:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003f12:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003f14:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_RTC_SetAlarm_IT+0x278>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <HAL_RTC_SetAlarm_IT+0x27c>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0adb      	lsrs	r3, r3, #11
 8003f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	617a      	str	r2, [r7, #20]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10b      	bne.n	8003f4c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	22ff      	movs	r2, #255	; 0xff
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2203      	movs	r2, #3
 8003f40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e035      	b.n	8003fb8 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0e7      	beq.n	8003f2a <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f78:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f88:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f94:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_RTC_SetAlarm_IT+0x280>)
 8003f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa0:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	22ff      	movs	r2, #255	; 0xff
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3724      	adds	r7, #36	; 0x24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	10624dd3 	.word	0x10624dd3
 8003fc8:	40013c00 	.word	0x40013c00

08003fcc <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d012      	beq.n	8004008 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fd f979 	bl	80012e8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004006:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d012      	beq.n	800403c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f906 	bl	8004236 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	b2da      	uxtb	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f462 7220 	orn	r2, r2, #640	; 0x280
 800403a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RTC_AlarmIRQHandler+0x88>)
 800403e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004042:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	775a      	strb	r2, [r3, #29]
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004072:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004074:	f7fd fd96 	bl	8001ba4 <HAL_GetTick>
 8004078:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800407a:	e009      	b.n	8004090 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800407c:	f7fd fd92 	bl	8001ba4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408a:	d901      	bls.n	8004090 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e007      	b.n	80040a0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ee      	beq.n	800407c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d122      	bne.n	800410c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fd65 	bl	8001ba4 <HAL_GetTick>
 80040da:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040dc:	e00c      	b.n	80040f8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040de:	f7fd fd61 	bl	8001ba4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ec:	d904      	bls.n	80040f8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d102      	bne.n	800410c <RTC_EnterInitMode+0x64>
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d1e8      	bne.n	80040de <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800410c:	7bfb      	ldrb	r3, [r7, #15]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b084      	sub	sp, #16
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004130:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ff89 	bl	8004058 <HAL_RTC_WaitForSynchro>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2204      	movs	r2, #4
 8004150:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800416e:	e005      	b.n	800417c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	3301      	adds	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	3b0a      	subs	r3, #10
 800417a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	2b09      	cmp	r3, #9
 8004180:	d8f6      	bhi.n	8004170 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	b2da      	uxtb	r2, r3
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	4313      	orrs	r3, r2
 800418c:	b2db      	uxtb	r3, r3
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	4603      	mov	r3, r0
 80041a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	0092      	lsls	r2, r2, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4413      	add	r3, r2
 80041c4:	b2db      	uxtb	r3, r3
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b087      	sub	sp, #28
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3350      	adds	r3, #80	; 0x50
 80041e8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3350      	adds	r3, #80	; 0x50
 800421a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e03f      	b.n	80042dc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fd fab3 	bl	80017dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2224      	movs	r2, #36	; 0x24
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800428c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f828 	bl	80042e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b0c0      	sub	sp, #256	; 0x100
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	68d9      	ldr	r1, [r3, #12]
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	ea40 0301 	orr.w	r3, r0, r1
 800430c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800430e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	431a      	orrs	r2, r3
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800433c:	f021 010c 	bic.w	r1, r1, #12
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800434a:	430b      	orrs	r3, r1
 800434c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435e:	6999      	ldr	r1, [r3, #24]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	ea40 0301 	orr.w	r3, r0, r1
 800436a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b8f      	ldr	r3, [pc, #572]	; (80045b0 <UART_SetConfig+0x2cc>)
 8004374:	429a      	cmp	r2, r3
 8004376:	d005      	beq.n	8004384 <UART_SetConfig+0xa0>
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b8d      	ldr	r3, [pc, #564]	; (80045b4 <UART_SetConfig+0x2d0>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d104      	bne.n	800438e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004384:	f7ff f8ca 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8004388:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800438c:	e003      	b.n	8004396 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800438e:	f7ff f8b1 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004392:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	f040 810c 	bne.w	80045bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043b6:	4622      	mov	r2, r4
 80043b8:	462b      	mov	r3, r5
 80043ba:	1891      	adds	r1, r2, r2
 80043bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80043be:	415b      	adcs	r3, r3
 80043c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80043c6:	4621      	mov	r1, r4
 80043c8:	eb12 0801 	adds.w	r8, r2, r1
 80043cc:	4629      	mov	r1, r5
 80043ce:	eb43 0901 	adc.w	r9, r3, r1
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043e6:	4690      	mov	r8, r2
 80043e8:	4699      	mov	r9, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	eb18 0303 	adds.w	r3, r8, r3
 80043f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043f4:	462b      	mov	r3, r5
 80043f6:	eb49 0303 	adc.w	r3, r9, r3
 80043fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800440a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800440e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004412:	460b      	mov	r3, r1
 8004414:	18db      	adds	r3, r3, r3
 8004416:	653b      	str	r3, [r7, #80]	; 0x50
 8004418:	4613      	mov	r3, r2
 800441a:	eb42 0303 	adc.w	r3, r2, r3
 800441e:	657b      	str	r3, [r7, #84]	; 0x54
 8004420:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004424:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004428:	f7fc fc3e 	bl	8000ca8 <__aeabi_uldivmod>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004432:	fba3 2302 	umull	r2, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	011c      	lsls	r4, r3, #4
 800443a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004444:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004448:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	1891      	adds	r1, r2, r2
 8004452:	64b9      	str	r1, [r7, #72]	; 0x48
 8004454:	415b      	adcs	r3, r3
 8004456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004458:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800445c:	4641      	mov	r1, r8
 800445e:	eb12 0a01 	adds.w	sl, r2, r1
 8004462:	4649      	mov	r1, r9
 8004464:	eb43 0b01 	adc.w	fp, r3, r1
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004474:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004478:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800447c:	4692      	mov	sl, r2
 800447e:	469b      	mov	fp, r3
 8004480:	4643      	mov	r3, r8
 8004482:	eb1a 0303 	adds.w	r3, sl, r3
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800448a:	464b      	mov	r3, r9
 800448c:	eb4b 0303 	adc.w	r3, fp, r3
 8004490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044a8:	460b      	mov	r3, r1
 80044aa:	18db      	adds	r3, r3, r3
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
 80044ae:	4613      	mov	r3, r2
 80044b0:	eb42 0303 	adc.w	r3, r2, r3
 80044b4:	647b      	str	r3, [r7, #68]	; 0x44
 80044b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044be:	f7fc fbf3 	bl	8000ca8 <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4611      	mov	r1, r2
 80044c8:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044ca:	fba3 2301 	umull	r2, r3, r3, r1
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2264      	movs	r2, #100	; 0x64
 80044d2:	fb02 f303 	mul.w	r3, r2, r3
 80044d6:	1acb      	subs	r3, r1, r3
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044de:	4b36      	ldr	r3, [pc, #216]	; (80045b8 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 2302 	umull	r2, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044ec:	441c      	add	r4, r3
 80044ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004500:	4642      	mov	r2, r8
 8004502:	464b      	mov	r3, r9
 8004504:	1891      	adds	r1, r2, r2
 8004506:	63b9      	str	r1, [r7, #56]	; 0x38
 8004508:	415b      	adcs	r3, r3
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004510:	4641      	mov	r1, r8
 8004512:	1851      	adds	r1, r2, r1
 8004514:	6339      	str	r1, [r7, #48]	; 0x30
 8004516:	4649      	mov	r1, r9
 8004518:	414b      	adcs	r3, r1
 800451a:	637b      	str	r3, [r7, #52]	; 0x34
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004528:	4659      	mov	r1, fp
 800452a:	00cb      	lsls	r3, r1, #3
 800452c:	4651      	mov	r1, sl
 800452e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004532:	4651      	mov	r1, sl
 8004534:	00ca      	lsls	r2, r1, #3
 8004536:	4610      	mov	r0, r2
 8004538:	4619      	mov	r1, r3
 800453a:	4603      	mov	r3, r0
 800453c:	4642      	mov	r2, r8
 800453e:	189b      	adds	r3, r3, r2
 8004540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004544:	464b      	mov	r3, r9
 8004546:	460a      	mov	r2, r1
 8004548:	eb42 0303 	adc.w	r3, r2, r3
 800454c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800455c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004560:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004576:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800457a:	f7fc fb95 	bl	8000ca8 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004584:	fba3 1302 	umull	r1, r3, r3, r2
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	2164      	movs	r1, #100	; 0x64
 800458c:	fb01 f303 	mul.w	r3, r1, r3
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	3332      	adds	r3, #50	; 0x32
 8004596:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <UART_SetConfig+0x2d4>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	095b      	lsrs	r3, r3, #5
 800459e:	f003 0207 	and.w	r2, r3, #7
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4422      	add	r2, r4
 80045aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045ac:	e106      	b.n	80047bc <UART_SetConfig+0x4d8>
 80045ae:	bf00      	nop
 80045b0:	40011000 	.word	0x40011000
 80045b4:	40011400 	.word	0x40011400
 80045b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80045c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80045ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80045ce:	4642      	mov	r2, r8
 80045d0:	464b      	mov	r3, r9
 80045d2:	1891      	adds	r1, r2, r2
 80045d4:	6239      	str	r1, [r7, #32]
 80045d6:	415b      	adcs	r3, r3
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045de:	4641      	mov	r1, r8
 80045e0:	1854      	adds	r4, r2, r1
 80045e2:	4649      	mov	r1, r9
 80045e4:	eb43 0501 	adc.w	r5, r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	00eb      	lsls	r3, r5, #3
 80045f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f6:	00e2      	lsls	r2, r4, #3
 80045f8:	4614      	mov	r4, r2
 80045fa:	461d      	mov	r5, r3
 80045fc:	4643      	mov	r3, r8
 80045fe:	18e3      	adds	r3, r4, r3
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004604:	464b      	mov	r3, r9
 8004606:	eb45 0303 	adc.w	r3, r5, r3
 800460a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800461a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800462a:	4629      	mov	r1, r5
 800462c:	008b      	lsls	r3, r1, #2
 800462e:	4621      	mov	r1, r4
 8004630:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004634:	4621      	mov	r1, r4
 8004636:	008a      	lsls	r2, r1, #2
 8004638:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800463c:	f7fc fb34 	bl	8000ca8 <__aeabi_uldivmod>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4b60      	ldr	r3, [pc, #384]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004646:	fba3 2302 	umull	r2, r3, r3, r2
 800464a:	095b      	lsrs	r3, r3, #5
 800464c:	011c      	lsls	r4, r3, #4
 800464e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004652:	2200      	movs	r2, #0
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004658:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800465c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	1891      	adds	r1, r2, r2
 8004666:	61b9      	str	r1, [r7, #24]
 8004668:	415b      	adcs	r3, r3
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004670:	4641      	mov	r1, r8
 8004672:	1851      	adds	r1, r2, r1
 8004674:	6139      	str	r1, [r7, #16]
 8004676:	4649      	mov	r1, r9
 8004678:	414b      	adcs	r3, r1
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004688:	4659      	mov	r1, fp
 800468a:	00cb      	lsls	r3, r1, #3
 800468c:	4651      	mov	r1, sl
 800468e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004692:	4651      	mov	r1, sl
 8004694:	00ca      	lsls	r2, r1, #3
 8004696:	4610      	mov	r0, r2
 8004698:	4619      	mov	r1, r3
 800469a:	4603      	mov	r3, r0
 800469c:	4642      	mov	r2, r8
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046a4:	464b      	mov	r3, r9
 80046a6:	460a      	mov	r2, r1
 80046a8:	eb42 0303 	adc.w	r3, r2, r3
 80046ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80046ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046da:	f7fc fae5 	bl	8000ca8 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4611      	mov	r1, r2
 80046e4:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046e6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2264      	movs	r2, #100	; 0x64
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a33      	ldr	r2, [pc, #204]	; (80047c8 <UART_SetConfig+0x4e4>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004704:	441c      	add	r4, r3
 8004706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470a:	2200      	movs	r2, #0
 800470c:	673b      	str	r3, [r7, #112]	; 0x70
 800470e:	677a      	str	r2, [r7, #116]	; 0x74
 8004710:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004714:	4642      	mov	r2, r8
 8004716:	464b      	mov	r3, r9
 8004718:	1891      	adds	r1, r2, r2
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	415b      	adcs	r3, r3
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004724:	4641      	mov	r1, r8
 8004726:	1851      	adds	r1, r2, r1
 8004728:	6039      	str	r1, [r7, #0]
 800472a:	4649      	mov	r1, r9
 800472c:	414b      	adcs	r3, r1
 800472e:	607b      	str	r3, [r7, #4]
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800473c:	4659      	mov	r1, fp
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4651      	mov	r1, sl
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4651      	mov	r1, sl
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4642      	mov	r2, r8
 8004752:	189b      	adds	r3, r3, r2
 8004754:	66bb      	str	r3, [r7, #104]	; 0x68
 8004756:	464b      	mov	r3, r9
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
 800476a:	667a      	str	r2, [r7, #100]	; 0x64
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004778:	4649      	mov	r1, r9
 800477a:	008b      	lsls	r3, r1, #2
 800477c:	4641      	mov	r1, r8
 800477e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004782:	4641      	mov	r1, r8
 8004784:	008a      	lsls	r2, r1, #2
 8004786:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800478a:	f7fc fa8d 	bl	8000ca8 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <UART_SetConfig+0x4e4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	; 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	3332      	adds	r3, #50	; 0x32
 80047a6:	4a08      	ldr	r2, [pc, #32]	; (80047c8 <UART_SetConfig+0x4e4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 020f 	and.w	r2, r3, #15
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4422      	add	r2, r4
 80047ba:	609a      	str	r2, [r3, #8]
}
 80047bc:	bf00      	nop
 80047be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80047c2:	46bd      	mov	sp, r7
 80047c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c8:	51eb851f 	.word	0x51eb851f

080047cc <__cvt>:
 80047cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	ec55 4b10 	vmov	r4, r5, d0
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	460e      	mov	r6, r1
 80047d8:	4619      	mov	r1, r3
 80047da:	462b      	mov	r3, r5
 80047dc:	bfbb      	ittet	lt
 80047de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80047e2:	461d      	movlt	r5, r3
 80047e4:	2300      	movge	r3, #0
 80047e6:	232d      	movlt	r3, #45	; 0x2d
 80047e8:	700b      	strb	r3, [r1, #0]
 80047ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80047f0:	4691      	mov	r9, r2
 80047f2:	f023 0820 	bic.w	r8, r3, #32
 80047f6:	bfbc      	itt	lt
 80047f8:	4622      	movlt	r2, r4
 80047fa:	4614      	movlt	r4, r2
 80047fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004800:	d005      	beq.n	800480e <__cvt+0x42>
 8004802:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004806:	d100      	bne.n	800480a <__cvt+0x3e>
 8004808:	3601      	adds	r6, #1
 800480a:	2102      	movs	r1, #2
 800480c:	e000      	b.n	8004810 <__cvt+0x44>
 800480e:	2103      	movs	r1, #3
 8004810:	ab03      	add	r3, sp, #12
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	ab02      	add	r3, sp, #8
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	ec45 4b10 	vmov	d0, r4, r5
 800481c:	4653      	mov	r3, sl
 800481e:	4632      	mov	r2, r6
 8004820:	f001 f87e 	bl	8005920 <_dtoa_r>
 8004824:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004828:	4607      	mov	r7, r0
 800482a:	d102      	bne.n	8004832 <__cvt+0x66>
 800482c:	f019 0f01 	tst.w	r9, #1
 8004830:	d022      	beq.n	8004878 <__cvt+0xac>
 8004832:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004836:	eb07 0906 	add.w	r9, r7, r6
 800483a:	d110      	bne.n	800485e <__cvt+0x92>
 800483c:	783b      	ldrb	r3, [r7, #0]
 800483e:	2b30      	cmp	r3, #48	; 0x30
 8004840:	d10a      	bne.n	8004858 <__cvt+0x8c>
 8004842:	2200      	movs	r2, #0
 8004844:	2300      	movs	r3, #0
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fc f94d 	bl	8000ae8 <__aeabi_dcmpeq>
 800484e:	b918      	cbnz	r0, 8004858 <__cvt+0x8c>
 8004850:	f1c6 0601 	rsb	r6, r6, #1
 8004854:	f8ca 6000 	str.w	r6, [sl]
 8004858:	f8da 3000 	ldr.w	r3, [sl]
 800485c:	4499      	add	r9, r3
 800485e:	2200      	movs	r2, #0
 8004860:	2300      	movs	r3, #0
 8004862:	4620      	mov	r0, r4
 8004864:	4629      	mov	r1, r5
 8004866:	f7fc f93f 	bl	8000ae8 <__aeabi_dcmpeq>
 800486a:	b108      	cbz	r0, 8004870 <__cvt+0xa4>
 800486c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004870:	2230      	movs	r2, #48	; 0x30
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	454b      	cmp	r3, r9
 8004876:	d307      	bcc.n	8004888 <__cvt+0xbc>
 8004878:	9b03      	ldr	r3, [sp, #12]
 800487a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800487c:	1bdb      	subs	r3, r3, r7
 800487e:	4638      	mov	r0, r7
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	b004      	add	sp, #16
 8004884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004888:	1c59      	adds	r1, r3, #1
 800488a:	9103      	str	r1, [sp, #12]
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e7f0      	b.n	8004872 <__cvt+0xa6>

08004890 <__exponent>:
 8004890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004892:	4603      	mov	r3, r0
 8004894:	2900      	cmp	r1, #0
 8004896:	bfb8      	it	lt
 8004898:	4249      	neglt	r1, r1
 800489a:	f803 2b02 	strb.w	r2, [r3], #2
 800489e:	bfb4      	ite	lt
 80048a0:	222d      	movlt	r2, #45	; 0x2d
 80048a2:	222b      	movge	r2, #43	; 0x2b
 80048a4:	2909      	cmp	r1, #9
 80048a6:	7042      	strb	r2, [r0, #1]
 80048a8:	dd2a      	ble.n	8004900 <__exponent+0x70>
 80048aa:	f10d 0207 	add.w	r2, sp, #7
 80048ae:	4617      	mov	r7, r2
 80048b0:	260a      	movs	r6, #10
 80048b2:	4694      	mov	ip, r2
 80048b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80048b8:	fb06 1415 	mls	r4, r6, r5, r1
 80048bc:	3430      	adds	r4, #48	; 0x30
 80048be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80048c2:	460c      	mov	r4, r1
 80048c4:	2c63      	cmp	r4, #99	; 0x63
 80048c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80048ca:	4629      	mov	r1, r5
 80048cc:	dcf1      	bgt.n	80048b2 <__exponent+0x22>
 80048ce:	3130      	adds	r1, #48	; 0x30
 80048d0:	f1ac 0402 	sub.w	r4, ip, #2
 80048d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80048d8:	1c41      	adds	r1, r0, #1
 80048da:	4622      	mov	r2, r4
 80048dc:	42ba      	cmp	r2, r7
 80048de:	d30a      	bcc.n	80048f6 <__exponent+0x66>
 80048e0:	f10d 0209 	add.w	r2, sp, #9
 80048e4:	eba2 020c 	sub.w	r2, r2, ip
 80048e8:	42bc      	cmp	r4, r7
 80048ea:	bf88      	it	hi
 80048ec:	2200      	movhi	r2, #0
 80048ee:	4413      	add	r3, r2
 80048f0:	1a18      	subs	r0, r3, r0
 80048f2:	b003      	add	sp, #12
 80048f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80048fe:	e7ed      	b.n	80048dc <__exponent+0x4c>
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	3130      	adds	r1, #48	; 0x30
 8004904:	7083      	strb	r3, [r0, #2]
 8004906:	70c1      	strb	r1, [r0, #3]
 8004908:	1d03      	adds	r3, r0, #4
 800490a:	e7f1      	b.n	80048f0 <__exponent+0x60>

0800490c <_printf_float>:
 800490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	ed2d 8b02 	vpush	{d8}
 8004914:	b08d      	sub	sp, #52	; 0x34
 8004916:	460c      	mov	r4, r1
 8004918:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800491c:	4616      	mov	r6, r2
 800491e:	461f      	mov	r7, r3
 8004920:	4605      	mov	r5, r0
 8004922:	f000 fef7 	bl	8005714 <_localeconv_r>
 8004926:	f8d0 a000 	ldr.w	sl, [r0]
 800492a:	4650      	mov	r0, sl
 800492c:	f7fb fcb0 	bl	8000290 <strlen>
 8004930:	2300      	movs	r3, #0
 8004932:	930a      	str	r3, [sp, #40]	; 0x28
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	9305      	str	r3, [sp, #20]
 8004938:	f8d8 3000 	ldr.w	r3, [r8]
 800493c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004940:	3307      	adds	r3, #7
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	f103 0208 	add.w	r2, r3, #8
 800494a:	f8c8 2000 	str.w	r2, [r8]
 800494e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004952:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004956:	9307      	str	r3, [sp, #28]
 8004958:	f8cd 8018 	str.w	r8, [sp, #24]
 800495c:	ee08 0a10 	vmov	s16, r0
 8004960:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004964:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004968:	4b9e      	ldr	r3, [pc, #632]	; (8004be4 <_printf_float+0x2d8>)
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	f7fc f8ed 	bl	8000b4c <__aeabi_dcmpun>
 8004972:	bb88      	cbnz	r0, 80049d8 <_printf_float+0xcc>
 8004974:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004978:	4b9a      	ldr	r3, [pc, #616]	; (8004be4 <_printf_float+0x2d8>)
 800497a:	f04f 32ff 	mov.w	r2, #4294967295
 800497e:	f7fc f8c7 	bl	8000b10 <__aeabi_dcmple>
 8004982:	bb48      	cbnz	r0, 80049d8 <_printf_float+0xcc>
 8004984:	2200      	movs	r2, #0
 8004986:	2300      	movs	r3, #0
 8004988:	4640      	mov	r0, r8
 800498a:	4649      	mov	r1, r9
 800498c:	f7fc f8b6 	bl	8000afc <__aeabi_dcmplt>
 8004990:	b110      	cbz	r0, 8004998 <_printf_float+0x8c>
 8004992:	232d      	movs	r3, #45	; 0x2d
 8004994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004998:	4a93      	ldr	r2, [pc, #588]	; (8004be8 <_printf_float+0x2dc>)
 800499a:	4b94      	ldr	r3, [pc, #592]	; (8004bec <_printf_float+0x2e0>)
 800499c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049a0:	bf94      	ite	ls
 80049a2:	4690      	movls	r8, r2
 80049a4:	4698      	movhi	r8, r3
 80049a6:	2303      	movs	r3, #3
 80049a8:	6123      	str	r3, [r4, #16]
 80049aa:	9b05      	ldr	r3, [sp, #20]
 80049ac:	f023 0304 	bic.w	r3, r3, #4
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	f04f 0900 	mov.w	r9, #0
 80049b6:	9700      	str	r7, [sp, #0]
 80049b8:	4633      	mov	r3, r6
 80049ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80049bc:	4621      	mov	r1, r4
 80049be:	4628      	mov	r0, r5
 80049c0:	f000 f9da 	bl	8004d78 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	f040 8090 	bne.w	8004aea <_printf_float+0x1de>
 80049ca:	f04f 30ff 	mov.w	r0, #4294967295
 80049ce:	b00d      	add	sp, #52	; 0x34
 80049d0:	ecbd 8b02 	vpop	{d8}
 80049d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	4649      	mov	r1, r9
 80049e0:	f7fc f8b4 	bl	8000b4c <__aeabi_dcmpun>
 80049e4:	b140      	cbz	r0, 80049f8 <_printf_float+0xec>
 80049e6:	464b      	mov	r3, r9
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bfbc      	itt	lt
 80049ec:	232d      	movlt	r3, #45	; 0x2d
 80049ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049f2:	4a7f      	ldr	r2, [pc, #508]	; (8004bf0 <_printf_float+0x2e4>)
 80049f4:	4b7f      	ldr	r3, [pc, #508]	; (8004bf4 <_printf_float+0x2e8>)
 80049f6:	e7d1      	b.n	800499c <_printf_float+0x90>
 80049f8:	6863      	ldr	r3, [r4, #4]
 80049fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80049fe:	9206      	str	r2, [sp, #24]
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	d13f      	bne.n	8004a84 <_printf_float+0x178>
 8004a04:	2306      	movs	r3, #6
 8004a06:	6063      	str	r3, [r4, #4]
 8004a08:	9b05      	ldr	r3, [sp, #20]
 8004a0a:	6861      	ldr	r1, [r4, #4]
 8004a0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a10:	2300      	movs	r3, #0
 8004a12:	9303      	str	r3, [sp, #12]
 8004a14:	ab0a      	add	r3, sp, #40	; 0x28
 8004a16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a1a:	ab09      	add	r3, sp, #36	; 0x24
 8004a1c:	ec49 8b10 	vmov	d0, r8, r9
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	6022      	str	r2, [r4, #0]
 8004a24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a28:	4628      	mov	r0, r5
 8004a2a:	f7ff fecf 	bl	80047cc <__cvt>
 8004a2e:	9b06      	ldr	r3, [sp, #24]
 8004a30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a32:	2b47      	cmp	r3, #71	; 0x47
 8004a34:	4680      	mov	r8, r0
 8004a36:	d108      	bne.n	8004a4a <_printf_float+0x13e>
 8004a38:	1cc8      	adds	r0, r1, #3
 8004a3a:	db02      	blt.n	8004a42 <_printf_float+0x136>
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	4299      	cmp	r1, r3
 8004a40:	dd41      	ble.n	8004ac6 <_printf_float+0x1ba>
 8004a42:	f1ab 0302 	sub.w	r3, fp, #2
 8004a46:	fa5f fb83 	uxtb.w	fp, r3
 8004a4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a4e:	d820      	bhi.n	8004a92 <_printf_float+0x186>
 8004a50:	3901      	subs	r1, #1
 8004a52:	465a      	mov	r2, fp
 8004a54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a58:	9109      	str	r1, [sp, #36]	; 0x24
 8004a5a:	f7ff ff19 	bl	8004890 <__exponent>
 8004a5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a60:	1813      	adds	r3, r2, r0
 8004a62:	2a01      	cmp	r2, #1
 8004a64:	4681      	mov	r9, r0
 8004a66:	6123      	str	r3, [r4, #16]
 8004a68:	dc02      	bgt.n	8004a70 <_printf_float+0x164>
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	07d2      	lsls	r2, r2, #31
 8004a6e:	d501      	bpl.n	8004a74 <_printf_float+0x168>
 8004a70:	3301      	adds	r3, #1
 8004a72:	6123      	str	r3, [r4, #16]
 8004a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d09c      	beq.n	80049b6 <_printf_float+0xaa>
 8004a7c:	232d      	movs	r3, #45	; 0x2d
 8004a7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a82:	e798      	b.n	80049b6 <_printf_float+0xaa>
 8004a84:	9a06      	ldr	r2, [sp, #24]
 8004a86:	2a47      	cmp	r2, #71	; 0x47
 8004a88:	d1be      	bne.n	8004a08 <_printf_float+0xfc>
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1bc      	bne.n	8004a08 <_printf_float+0xfc>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7b9      	b.n	8004a06 <_printf_float+0xfa>
 8004a92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a96:	d118      	bne.n	8004aca <_printf_float+0x1be>
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	6863      	ldr	r3, [r4, #4]
 8004a9c:	dd0b      	ble.n	8004ab6 <_printf_float+0x1aa>
 8004a9e:	6121      	str	r1, [r4, #16]
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_printf_float+0x19c>
 8004aa2:	6822      	ldr	r2, [r4, #0]
 8004aa4:	07d0      	lsls	r0, r2, #31
 8004aa6:	d502      	bpl.n	8004aae <_printf_float+0x1a2>
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	440b      	add	r3, r1
 8004aac:	6123      	str	r3, [r4, #16]
 8004aae:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ab0:	f04f 0900 	mov.w	r9, #0
 8004ab4:	e7de      	b.n	8004a74 <_printf_float+0x168>
 8004ab6:	b913      	cbnz	r3, 8004abe <_printf_float+0x1b2>
 8004ab8:	6822      	ldr	r2, [r4, #0]
 8004aba:	07d2      	lsls	r2, r2, #31
 8004abc:	d501      	bpl.n	8004ac2 <_printf_float+0x1b6>
 8004abe:	3302      	adds	r3, #2
 8004ac0:	e7f4      	b.n	8004aac <_printf_float+0x1a0>
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7f2      	b.n	8004aac <_printf_float+0x1a0>
 8004ac6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004acc:	4299      	cmp	r1, r3
 8004ace:	db05      	blt.n	8004adc <_printf_float+0x1d0>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	6121      	str	r1, [r4, #16]
 8004ad4:	07d8      	lsls	r0, r3, #31
 8004ad6:	d5ea      	bpl.n	8004aae <_printf_float+0x1a2>
 8004ad8:	1c4b      	adds	r3, r1, #1
 8004ada:	e7e7      	b.n	8004aac <_printf_float+0x1a0>
 8004adc:	2900      	cmp	r1, #0
 8004ade:	bfd4      	ite	le
 8004ae0:	f1c1 0202 	rsble	r2, r1, #2
 8004ae4:	2201      	movgt	r2, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	e7e0      	b.n	8004aac <_printf_float+0x1a0>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	055a      	lsls	r2, r3, #21
 8004aee:	d407      	bmi.n	8004b00 <_printf_float+0x1f4>
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	4642      	mov	r2, r8
 8004af4:	4631      	mov	r1, r6
 8004af6:	4628      	mov	r0, r5
 8004af8:	47b8      	blx	r7
 8004afa:	3001      	adds	r0, #1
 8004afc:	d12c      	bne.n	8004b58 <_printf_float+0x24c>
 8004afe:	e764      	b.n	80049ca <_printf_float+0xbe>
 8004b00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b04:	f240 80e0 	bls.w	8004cc8 <_printf_float+0x3bc>
 8004b08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f7fb ffea 	bl	8000ae8 <__aeabi_dcmpeq>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	d034      	beq.n	8004b82 <_printf_float+0x276>
 8004b18:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <_printf_float+0x2ec>)
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f af51 	beq.w	80049ca <_printf_float+0xbe>
 8004b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	db02      	blt.n	8004b36 <_printf_float+0x22a>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	07d8      	lsls	r0, r3, #31
 8004b34:	d510      	bpl.n	8004b58 <_printf_float+0x24c>
 8004b36:	ee18 3a10 	vmov	r3, s16
 8004b3a:	4652      	mov	r2, sl
 8004b3c:	4631      	mov	r1, r6
 8004b3e:	4628      	mov	r0, r5
 8004b40:	47b8      	blx	r7
 8004b42:	3001      	adds	r0, #1
 8004b44:	f43f af41 	beq.w	80049ca <_printf_float+0xbe>
 8004b48:	f04f 0800 	mov.w	r8, #0
 8004b4c:	f104 091a 	add.w	r9, r4, #26
 8004b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4543      	cmp	r3, r8
 8004b56:	dc09      	bgt.n	8004b6c <_printf_float+0x260>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	079b      	lsls	r3, r3, #30
 8004b5c:	f100 8107 	bmi.w	8004d6e <_printf_float+0x462>
 8004b60:	68e0      	ldr	r0, [r4, #12]
 8004b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b64:	4298      	cmp	r0, r3
 8004b66:	bfb8      	it	lt
 8004b68:	4618      	movlt	r0, r3
 8004b6a:	e730      	b.n	80049ce <_printf_float+0xc2>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	464a      	mov	r2, r9
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f af27 	beq.w	80049ca <_printf_float+0xbe>
 8004b7c:	f108 0801 	add.w	r8, r8, #1
 8004b80:	e7e6      	b.n	8004b50 <_printf_float+0x244>
 8004b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	dc39      	bgt.n	8004bfc <_printf_float+0x2f0>
 8004b88:	4a1b      	ldr	r2, [pc, #108]	; (8004bf8 <_printf_float+0x2ec>)
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af19 	beq.w	80049ca <_printf_float+0xbe>
 8004b98:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	d102      	bne.n	8004ba6 <_printf_float+0x29a>
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	07d9      	lsls	r1, r3, #31
 8004ba4:	d5d8      	bpl.n	8004b58 <_printf_float+0x24c>
 8004ba6:	ee18 3a10 	vmov	r3, s16
 8004baa:	4652      	mov	r2, sl
 8004bac:	4631      	mov	r1, r6
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	f43f af09 	beq.w	80049ca <_printf_float+0xbe>
 8004bb8:	f04f 0900 	mov.w	r9, #0
 8004bbc:	f104 0a1a 	add.w	sl, r4, #26
 8004bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc2:	425b      	negs	r3, r3
 8004bc4:	454b      	cmp	r3, r9
 8004bc6:	dc01      	bgt.n	8004bcc <_printf_float+0x2c0>
 8004bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bca:	e792      	b.n	8004af2 <_printf_float+0x1e6>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4652      	mov	r2, sl
 8004bd0:	4631      	mov	r1, r6
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	f43f aef7 	beq.w	80049ca <_printf_float+0xbe>
 8004bdc:	f109 0901 	add.w	r9, r9, #1
 8004be0:	e7ee      	b.n	8004bc0 <_printf_float+0x2b4>
 8004be2:	bf00      	nop
 8004be4:	7fefffff 	.word	0x7fefffff
 8004be8:	08008fdc 	.word	0x08008fdc
 8004bec:	08008fe0 	.word	0x08008fe0
 8004bf0:	08008fe4 	.word	0x08008fe4
 8004bf4:	08008fe8 	.word	0x08008fe8
 8004bf8:	08008fec 	.word	0x08008fec
 8004bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bfa8      	it	ge
 8004c04:	461a      	movge	r2, r3
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	4691      	mov	r9, r2
 8004c0a:	dc37      	bgt.n	8004c7c <_printf_float+0x370>
 8004c0c:	f04f 0b00 	mov.w	fp, #0
 8004c10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c14:	f104 021a 	add.w	r2, r4, #26
 8004c18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c1a:	9305      	str	r3, [sp, #20]
 8004c1c:	eba3 0309 	sub.w	r3, r3, r9
 8004c20:	455b      	cmp	r3, fp
 8004c22:	dc33      	bgt.n	8004c8c <_printf_float+0x380>
 8004c24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	db3b      	blt.n	8004ca4 <_printf_float+0x398>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07da      	lsls	r2, r3, #31
 8004c30:	d438      	bmi.n	8004ca4 <_printf_float+0x398>
 8004c32:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c36:	eba2 0903 	sub.w	r9, r2, r3
 8004c3a:	9b05      	ldr	r3, [sp, #20]
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	4591      	cmp	r9, r2
 8004c40:	bfa8      	it	ge
 8004c42:	4691      	movge	r9, r2
 8004c44:	f1b9 0f00 	cmp.w	r9, #0
 8004c48:	dc35      	bgt.n	8004cb6 <_printf_float+0x3aa>
 8004c4a:	f04f 0800 	mov.w	r8, #0
 8004c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c52:	f104 0a1a 	add.w	sl, r4, #26
 8004c56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	eba3 0309 	sub.w	r3, r3, r9
 8004c60:	4543      	cmp	r3, r8
 8004c62:	f77f af79 	ble.w	8004b58 <_printf_float+0x24c>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4652      	mov	r2, sl
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	47b8      	blx	r7
 8004c70:	3001      	adds	r0, #1
 8004c72:	f43f aeaa 	beq.w	80049ca <_printf_float+0xbe>
 8004c76:	f108 0801 	add.w	r8, r8, #1
 8004c7a:	e7ec      	b.n	8004c56 <_printf_float+0x34a>
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4642      	mov	r2, r8
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	d1c0      	bne.n	8004c0c <_printf_float+0x300>
 8004c8a:	e69e      	b.n	80049ca <_printf_float+0xbe>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4631      	mov	r1, r6
 8004c90:	4628      	mov	r0, r5
 8004c92:	9205      	str	r2, [sp, #20]
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	f43f ae97 	beq.w	80049ca <_printf_float+0xbe>
 8004c9c:	9a05      	ldr	r2, [sp, #20]
 8004c9e:	f10b 0b01 	add.w	fp, fp, #1
 8004ca2:	e7b9      	b.n	8004c18 <_printf_float+0x30c>
 8004ca4:	ee18 3a10 	vmov	r3, s16
 8004ca8:	4652      	mov	r2, sl
 8004caa:	4631      	mov	r1, r6
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b8      	blx	r7
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	d1be      	bne.n	8004c32 <_printf_float+0x326>
 8004cb4:	e689      	b.n	80049ca <_printf_float+0xbe>
 8004cb6:	9a05      	ldr	r2, [sp, #20]
 8004cb8:	464b      	mov	r3, r9
 8004cba:	4442      	add	r2, r8
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	47b8      	blx	r7
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d1c1      	bne.n	8004c4a <_printf_float+0x33e>
 8004cc6:	e680      	b.n	80049ca <_printf_float+0xbe>
 8004cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cca:	2a01      	cmp	r2, #1
 8004ccc:	dc01      	bgt.n	8004cd2 <_printf_float+0x3c6>
 8004cce:	07db      	lsls	r3, r3, #31
 8004cd0:	d53a      	bpl.n	8004d48 <_printf_float+0x43c>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	f43f ae74 	beq.w	80049ca <_printf_float+0xbe>
 8004ce2:	ee18 3a10 	vmov	r3, s16
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f ae6b 	beq.w	80049ca <_printf_float+0xbe>
 8004cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004d00:	f7fb fef2 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d04:	b9d8      	cbnz	r0, 8004d3e <_printf_float+0x432>
 8004d06:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004d0a:	f108 0201 	add.w	r2, r8, #1
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	d10e      	bne.n	8004d36 <_printf_float+0x42a>
 8004d18:	e657      	b.n	80049ca <_printf_float+0xbe>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f ae50 	beq.w	80049ca <_printf_float+0xbe>
 8004d2a:	f108 0801 	add.w	r8, r8, #1
 8004d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d30:	3b01      	subs	r3, #1
 8004d32:	4543      	cmp	r3, r8
 8004d34:	dcf1      	bgt.n	8004d1a <_printf_float+0x40e>
 8004d36:	464b      	mov	r3, r9
 8004d38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d3c:	e6da      	b.n	8004af4 <_printf_float+0x1e8>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	f104 0a1a 	add.w	sl, r4, #26
 8004d46:	e7f2      	b.n	8004d2e <_printf_float+0x422>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4642      	mov	r2, r8
 8004d4c:	e7df      	b.n	8004d0e <_printf_float+0x402>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	464a      	mov	r2, r9
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b8      	blx	r7
 8004d58:	3001      	adds	r0, #1
 8004d5a:	f43f ae36 	beq.w	80049ca <_printf_float+0xbe>
 8004d5e:	f108 0801 	add.w	r8, r8, #1
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d66:	1a5b      	subs	r3, r3, r1
 8004d68:	4543      	cmp	r3, r8
 8004d6a:	dcf0      	bgt.n	8004d4e <_printf_float+0x442>
 8004d6c:	e6f8      	b.n	8004b60 <_printf_float+0x254>
 8004d6e:	f04f 0800 	mov.w	r8, #0
 8004d72:	f104 0919 	add.w	r9, r4, #25
 8004d76:	e7f4      	b.n	8004d62 <_printf_float+0x456>

08004d78 <_printf_common>:
 8004d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	4699      	mov	r9, r3
 8004d80:	688a      	ldr	r2, [r1, #8]
 8004d82:	690b      	ldr	r3, [r1, #16]
 8004d84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	bfb8      	it	lt
 8004d8c:	4613      	movlt	r3, r2
 8004d8e:	6033      	str	r3, [r6, #0]
 8004d90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d94:	4607      	mov	r7, r0
 8004d96:	460c      	mov	r4, r1
 8004d98:	b10a      	cbz	r2, 8004d9e <_printf_common+0x26>
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	6033      	str	r3, [r6, #0]
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	0699      	lsls	r1, r3, #26
 8004da2:	bf42      	ittt	mi
 8004da4:	6833      	ldrmi	r3, [r6, #0]
 8004da6:	3302      	addmi	r3, #2
 8004da8:	6033      	strmi	r3, [r6, #0]
 8004daa:	6825      	ldr	r5, [r4, #0]
 8004dac:	f015 0506 	ands.w	r5, r5, #6
 8004db0:	d106      	bne.n	8004dc0 <_printf_common+0x48>
 8004db2:	f104 0a19 	add.w	sl, r4, #25
 8004db6:	68e3      	ldr	r3, [r4, #12]
 8004db8:	6832      	ldr	r2, [r6, #0]
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	42ab      	cmp	r3, r5
 8004dbe:	dc26      	bgt.n	8004e0e <_printf_common+0x96>
 8004dc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc4:	1e13      	subs	r3, r2, #0
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	2301      	movne	r3, #1
 8004dcc:	0692      	lsls	r2, r2, #26
 8004dce:	d42b      	bmi.n	8004e28 <_printf_common+0xb0>
 8004dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	47c0      	blx	r8
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d01e      	beq.n	8004e1c <_printf_common+0xa4>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	6922      	ldr	r2, [r4, #16]
 8004de2:	f003 0306 	and.w	r3, r3, #6
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	bf02      	ittt	eq
 8004dea:	68e5      	ldreq	r5, [r4, #12]
 8004dec:	6833      	ldreq	r3, [r6, #0]
 8004dee:	1aed      	subeq	r5, r5, r3
 8004df0:	68a3      	ldr	r3, [r4, #8]
 8004df2:	bf0c      	ite	eq
 8004df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004df8:	2500      	movne	r5, #0
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bfc4      	itt	gt
 8004dfe:	1a9b      	subgt	r3, r3, r2
 8004e00:	18ed      	addgt	r5, r5, r3
 8004e02:	2600      	movs	r6, #0
 8004e04:	341a      	adds	r4, #26
 8004e06:	42b5      	cmp	r5, r6
 8004e08:	d11a      	bne.n	8004e40 <_printf_common+0xc8>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e008      	b.n	8004e20 <_printf_common+0xa8>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4652      	mov	r2, sl
 8004e12:	4649      	mov	r1, r9
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c0      	blx	r8
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d103      	bne.n	8004e24 <_printf_common+0xac>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7c6      	b.n	8004db6 <_printf_common+0x3e>
 8004e28:	18e1      	adds	r1, r4, r3
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	2030      	movs	r0, #48	; 0x30
 8004e2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e32:	4422      	add	r2, r4
 8004e34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	e7c7      	b.n	8004dd0 <_printf_common+0x58>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4622      	mov	r2, r4
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0e6      	beq.n	8004e1c <_printf_common+0xa4>
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7d9      	b.n	8004e06 <_printf_common+0x8e>
	...

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	7e0f      	ldrb	r7, [r1, #24]
 8004e5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e5c:	2f78      	cmp	r7, #120	; 0x78
 8004e5e:	4691      	mov	r9, r2
 8004e60:	4680      	mov	r8, r0
 8004e62:	460c      	mov	r4, r1
 8004e64:	469a      	mov	sl, r3
 8004e66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	; 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d4 	beq.w	800501e <_printf_i+0x1ca>
 8004e76:	2f58      	cmp	r7, #88	; 0x58
 8004e78:	f000 80c0 	beq.w	8004ffc <_printf_i+0x1a8>
 8004e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a101      	add	r1, pc, #4	; (adr r1, 8004e94 <_printf_i+0x40>)
 8004e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	08005005 	.word	0x08005005
 8004ec4:	08004f2d 	.word	0x08004f2d
 8004ec8:	08004fbf 	.word	0x08004fbf
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005027 	.word	0x08005027
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f2d 	.word	0x08004f2d
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004fc7 	.word	0x08004fc7
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e09f      	b.n	8005040 <_printf_i+0x1ec>
 8004f00:	6820      	ldr	r0, [r4, #0]
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	0607      	lsls	r7, r0, #24
 8004f06:	f103 0104 	add.w	r1, r3, #4
 8004f0a:	6029      	str	r1, [r5, #0]
 8004f0c:	d501      	bpl.n	8004f12 <_printf_i+0xbe>
 8004f0e:	681e      	ldr	r6, [r3, #0]
 8004f10:	e003      	b.n	8004f1a <_printf_i+0xc6>
 8004f12:	0646      	lsls	r6, r0, #25
 8004f14:	d5fb      	bpl.n	8004f0e <_printf_i+0xba>
 8004f16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	da03      	bge.n	8004f26 <_printf_i+0xd2>
 8004f1e:	232d      	movs	r3, #45	; 0x2d
 8004f20:	4276      	negs	r6, r6
 8004f22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f26:	485a      	ldr	r0, [pc, #360]	; (8005090 <_printf_i+0x23c>)
 8004f28:	230a      	movs	r3, #10
 8004f2a:	e012      	b.n	8004f52 <_printf_i+0xfe>
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	6820      	ldr	r0, [r4, #0]
 8004f30:	1d19      	adds	r1, r3, #4
 8004f32:	6029      	str	r1, [r5, #0]
 8004f34:	0605      	lsls	r5, r0, #24
 8004f36:	d501      	bpl.n	8004f3c <_printf_i+0xe8>
 8004f38:	681e      	ldr	r6, [r3, #0]
 8004f3a:	e002      	b.n	8004f42 <_printf_i+0xee>
 8004f3c:	0641      	lsls	r1, r0, #25
 8004f3e:	d5fb      	bpl.n	8004f38 <_printf_i+0xe4>
 8004f40:	881e      	ldrh	r6, [r3, #0]
 8004f42:	4853      	ldr	r0, [pc, #332]	; (8005090 <_printf_i+0x23c>)
 8004f44:	2f6f      	cmp	r7, #111	; 0x6f
 8004f46:	bf0c      	ite	eq
 8004f48:	2308      	moveq	r3, #8
 8004f4a:	230a      	movne	r3, #10
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f52:	6865      	ldr	r5, [r4, #4]
 8004f54:	60a5      	str	r5, [r4, #8]
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	bfa2      	ittt	ge
 8004f5a:	6821      	ldrge	r1, [r4, #0]
 8004f5c:	f021 0104 	bicge.w	r1, r1, #4
 8004f60:	6021      	strge	r1, [r4, #0]
 8004f62:	b90e      	cbnz	r6, 8004f68 <_printf_i+0x114>
 8004f64:	2d00      	cmp	r5, #0
 8004f66:	d04b      	beq.n	8005000 <_printf_i+0x1ac>
 8004f68:	4615      	mov	r5, r2
 8004f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f72:	5dc7      	ldrb	r7, [r0, r7]
 8004f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f78:	4637      	mov	r7, r6
 8004f7a:	42bb      	cmp	r3, r7
 8004f7c:	460e      	mov	r6, r1
 8004f7e:	d9f4      	bls.n	8004f6a <_printf_i+0x116>
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d10b      	bne.n	8004f9c <_printf_i+0x148>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	07de      	lsls	r6, r3, #31
 8004f88:	d508      	bpl.n	8004f9c <_printf_i+0x148>
 8004f8a:	6923      	ldr	r3, [r4, #16]
 8004f8c:	6861      	ldr	r1, [r4, #4]
 8004f8e:	4299      	cmp	r1, r3
 8004f90:	bfde      	ittt	le
 8004f92:	2330      	movle	r3, #48	; 0x30
 8004f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f9c:	1b52      	subs	r2, r2, r5
 8004f9e:	6122      	str	r2, [r4, #16]
 8004fa0:	f8cd a000 	str.w	sl, [sp]
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	aa03      	add	r2, sp, #12
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f7ff fee4 	bl	8004d78 <_printf_common>
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d14a      	bne.n	800504a <_printf_i+0x1f6>
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	b004      	add	sp, #16
 8004fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	f043 0320 	orr.w	r3, r3, #32
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	4833      	ldr	r0, [pc, #204]	; (8005094 <_printf_i+0x240>)
 8004fc8:	2778      	movs	r7, #120	; 0x78
 8004fca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	6829      	ldr	r1, [r5, #0]
 8004fd2:	061f      	lsls	r7, r3, #24
 8004fd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fd8:	d402      	bmi.n	8004fe0 <_printf_i+0x18c>
 8004fda:	065f      	lsls	r7, r3, #25
 8004fdc:	bf48      	it	mi
 8004fde:	b2b6      	uxthmi	r6, r6
 8004fe0:	07df      	lsls	r7, r3, #31
 8004fe2:	bf48      	it	mi
 8004fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fe8:	6029      	str	r1, [r5, #0]
 8004fea:	bf48      	it	mi
 8004fec:	6023      	strmi	r3, [r4, #0]
 8004fee:	b91e      	cbnz	r6, 8004ff8 <_printf_i+0x1a4>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	f023 0320 	bic.w	r3, r3, #32
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	e7a7      	b.n	8004f4c <_printf_i+0xf8>
 8004ffc:	4824      	ldr	r0, [pc, #144]	; (8005090 <_printf_i+0x23c>)
 8004ffe:	e7e4      	b.n	8004fca <_printf_i+0x176>
 8005000:	4615      	mov	r5, r2
 8005002:	e7bd      	b.n	8004f80 <_printf_i+0x12c>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	6826      	ldr	r6, [r4, #0]
 8005008:	6961      	ldr	r1, [r4, #20]
 800500a:	1d18      	adds	r0, r3, #4
 800500c:	6028      	str	r0, [r5, #0]
 800500e:	0635      	lsls	r5, r6, #24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	d501      	bpl.n	8005018 <_printf_i+0x1c4>
 8005014:	6019      	str	r1, [r3, #0]
 8005016:	e002      	b.n	800501e <_printf_i+0x1ca>
 8005018:	0670      	lsls	r0, r6, #25
 800501a:	d5fb      	bpl.n	8005014 <_printf_i+0x1c0>
 800501c:	8019      	strh	r1, [r3, #0]
 800501e:	2300      	movs	r3, #0
 8005020:	6123      	str	r3, [r4, #16]
 8005022:	4615      	mov	r5, r2
 8005024:	e7bc      	b.n	8004fa0 <_printf_i+0x14c>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	1d1a      	adds	r2, r3, #4
 800502a:	602a      	str	r2, [r5, #0]
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	6862      	ldr	r2, [r4, #4]
 8005030:	2100      	movs	r1, #0
 8005032:	4628      	mov	r0, r5
 8005034:	f7fb f8dc 	bl	80001f0 <memchr>
 8005038:	b108      	cbz	r0, 800503e <_printf_i+0x1ea>
 800503a:	1b40      	subs	r0, r0, r5
 800503c:	6060      	str	r0, [r4, #4]
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	2300      	movs	r3, #0
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005048:	e7aa      	b.n	8004fa0 <_printf_i+0x14c>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	462a      	mov	r2, r5
 800504e:	4649      	mov	r1, r9
 8005050:	4640      	mov	r0, r8
 8005052:	47d0      	blx	sl
 8005054:	3001      	adds	r0, #1
 8005056:	d0ad      	beq.n	8004fb4 <_printf_i+0x160>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	079b      	lsls	r3, r3, #30
 800505c:	d413      	bmi.n	8005086 <_printf_i+0x232>
 800505e:	68e0      	ldr	r0, [r4, #12]
 8005060:	9b03      	ldr	r3, [sp, #12]
 8005062:	4298      	cmp	r0, r3
 8005064:	bfb8      	it	lt
 8005066:	4618      	movlt	r0, r3
 8005068:	e7a6      	b.n	8004fb8 <_printf_i+0x164>
 800506a:	2301      	movs	r3, #1
 800506c:	4632      	mov	r2, r6
 800506e:	4649      	mov	r1, r9
 8005070:	4640      	mov	r0, r8
 8005072:	47d0      	blx	sl
 8005074:	3001      	adds	r0, #1
 8005076:	d09d      	beq.n	8004fb4 <_printf_i+0x160>
 8005078:	3501      	adds	r5, #1
 800507a:	68e3      	ldr	r3, [r4, #12]
 800507c:	9903      	ldr	r1, [sp, #12]
 800507e:	1a5b      	subs	r3, r3, r1
 8005080:	42ab      	cmp	r3, r5
 8005082:	dcf2      	bgt.n	800506a <_printf_i+0x216>
 8005084:	e7eb      	b.n	800505e <_printf_i+0x20a>
 8005086:	2500      	movs	r5, #0
 8005088:	f104 0619 	add.w	r6, r4, #25
 800508c:	e7f5      	b.n	800507a <_printf_i+0x226>
 800508e:	bf00      	nop
 8005090:	08008fee 	.word	0x08008fee
 8005094:	08008fff 	.word	0x08008fff

08005098 <_scanf_float>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	b087      	sub	sp, #28
 800509e:	4617      	mov	r7, r2
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	688b      	ldr	r3, [r1, #8]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050aa:	bf83      	ittte	hi
 80050ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050b0:	195b      	addhi	r3, r3, r5
 80050b2:	9302      	strhi	r3, [sp, #8]
 80050b4:	2300      	movls	r3, #0
 80050b6:	bf86      	itte	hi
 80050b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050bc:	608b      	strhi	r3, [r1, #8]
 80050be:	9302      	strls	r3, [sp, #8]
 80050c0:	680b      	ldr	r3, [r1, #0]
 80050c2:	468b      	mov	fp, r1
 80050c4:	2500      	movs	r5, #0
 80050c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050ca:	f84b 3b1c 	str.w	r3, [fp], #28
 80050ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050d2:	4680      	mov	r8, r0
 80050d4:	460c      	mov	r4, r1
 80050d6:	465e      	mov	r6, fp
 80050d8:	46aa      	mov	sl, r5
 80050da:	46a9      	mov	r9, r5
 80050dc:	9501      	str	r5, [sp, #4]
 80050de:	68a2      	ldr	r2, [r4, #8]
 80050e0:	b152      	cbz	r2, 80050f8 <_scanf_float+0x60>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b4e      	cmp	r3, #78	; 0x4e
 80050e8:	d864      	bhi.n	80051b4 <_scanf_float+0x11c>
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d83c      	bhi.n	8005168 <_scanf_float+0xd0>
 80050ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050f2:	b2c8      	uxtb	r0, r1
 80050f4:	280e      	cmp	r0, #14
 80050f6:	d93a      	bls.n	800516e <_scanf_float+0xd6>
 80050f8:	f1b9 0f00 	cmp.w	r9, #0
 80050fc:	d003      	beq.n	8005106 <_scanf_float+0x6e>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	f10a 3aff 	add.w	sl, sl, #4294967295
 800510a:	f1ba 0f01 	cmp.w	sl, #1
 800510e:	f200 8113 	bhi.w	8005338 <_scanf_float+0x2a0>
 8005112:	455e      	cmp	r6, fp
 8005114:	f200 8105 	bhi.w	8005322 <_scanf_float+0x28a>
 8005118:	2501      	movs	r5, #1
 800511a:	4628      	mov	r0, r5
 800511c:	b007      	add	sp, #28
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005126:	2a0d      	cmp	r2, #13
 8005128:	d8e6      	bhi.n	80050f8 <_scanf_float+0x60>
 800512a:	a101      	add	r1, pc, #4	; (adr r1, 8005130 <_scanf_float+0x98>)
 800512c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005130:	0800526f 	.word	0x0800526f
 8005134:	080050f9 	.word	0x080050f9
 8005138:	080050f9 	.word	0x080050f9
 800513c:	080050f9 	.word	0x080050f9
 8005140:	080052cf 	.word	0x080052cf
 8005144:	080052a7 	.word	0x080052a7
 8005148:	080050f9 	.word	0x080050f9
 800514c:	080050f9 	.word	0x080050f9
 8005150:	0800527d 	.word	0x0800527d
 8005154:	080050f9 	.word	0x080050f9
 8005158:	080050f9 	.word	0x080050f9
 800515c:	080050f9 	.word	0x080050f9
 8005160:	080050f9 	.word	0x080050f9
 8005164:	08005235 	.word	0x08005235
 8005168:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800516c:	e7db      	b.n	8005126 <_scanf_float+0x8e>
 800516e:	290e      	cmp	r1, #14
 8005170:	d8c2      	bhi.n	80050f8 <_scanf_float+0x60>
 8005172:	a001      	add	r0, pc, #4	; (adr r0, 8005178 <_scanf_float+0xe0>)
 8005174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005178:	08005227 	.word	0x08005227
 800517c:	080050f9 	.word	0x080050f9
 8005180:	08005227 	.word	0x08005227
 8005184:	080052bb 	.word	0x080052bb
 8005188:	080050f9 	.word	0x080050f9
 800518c:	080051d5 	.word	0x080051d5
 8005190:	08005211 	.word	0x08005211
 8005194:	08005211 	.word	0x08005211
 8005198:	08005211 	.word	0x08005211
 800519c:	08005211 	.word	0x08005211
 80051a0:	08005211 	.word	0x08005211
 80051a4:	08005211 	.word	0x08005211
 80051a8:	08005211 	.word	0x08005211
 80051ac:	08005211 	.word	0x08005211
 80051b0:	08005211 	.word	0x08005211
 80051b4:	2b6e      	cmp	r3, #110	; 0x6e
 80051b6:	d809      	bhi.n	80051cc <_scanf_float+0x134>
 80051b8:	2b60      	cmp	r3, #96	; 0x60
 80051ba:	d8b2      	bhi.n	8005122 <_scanf_float+0x8a>
 80051bc:	2b54      	cmp	r3, #84	; 0x54
 80051be:	d077      	beq.n	80052b0 <_scanf_float+0x218>
 80051c0:	2b59      	cmp	r3, #89	; 0x59
 80051c2:	d199      	bne.n	80050f8 <_scanf_float+0x60>
 80051c4:	2d07      	cmp	r5, #7
 80051c6:	d197      	bne.n	80050f8 <_scanf_float+0x60>
 80051c8:	2508      	movs	r5, #8
 80051ca:	e029      	b.n	8005220 <_scanf_float+0x188>
 80051cc:	2b74      	cmp	r3, #116	; 0x74
 80051ce:	d06f      	beq.n	80052b0 <_scanf_float+0x218>
 80051d0:	2b79      	cmp	r3, #121	; 0x79
 80051d2:	e7f6      	b.n	80051c2 <_scanf_float+0x12a>
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	05c8      	lsls	r0, r1, #23
 80051d8:	d51a      	bpl.n	8005210 <_scanf_float+0x178>
 80051da:	9b02      	ldr	r3, [sp, #8]
 80051dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051e0:	6021      	str	r1, [r4, #0]
 80051e2:	f109 0901 	add.w	r9, r9, #1
 80051e6:	b11b      	cbz	r3, 80051f0 <_scanf_float+0x158>
 80051e8:	3b01      	subs	r3, #1
 80051ea:	3201      	adds	r2, #1
 80051ec:	9302      	str	r3, [sp, #8]
 80051ee:	60a2      	str	r2, [r4, #8]
 80051f0:	68a3      	ldr	r3, [r4, #8]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	60a3      	str	r3, [r4, #8]
 80051f6:	6923      	ldr	r3, [r4, #16]
 80051f8:	3301      	adds	r3, #1
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	f340 8084 	ble.w	8005310 <_scanf_float+0x278>
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	603b      	str	r3, [r7, #0]
 800520e:	e766      	b.n	80050de <_scanf_float+0x46>
 8005210:	eb1a 0f05 	cmn.w	sl, r5
 8005214:	f47f af70 	bne.w	80050f8 <_scanf_float+0x60>
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	f806 3b01 	strb.w	r3, [r6], #1
 8005224:	e7e4      	b.n	80051f0 <_scanf_float+0x158>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	0610      	lsls	r0, r2, #24
 800522a:	f57f af65 	bpl.w	80050f8 <_scanf_float+0x60>
 800522e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005232:	e7f4      	b.n	800521e <_scanf_float+0x186>
 8005234:	f1ba 0f00 	cmp.w	sl, #0
 8005238:	d10e      	bne.n	8005258 <_scanf_float+0x1c0>
 800523a:	f1b9 0f00 	cmp.w	r9, #0
 800523e:	d10e      	bne.n	800525e <_scanf_float+0x1c6>
 8005240:	6822      	ldr	r2, [r4, #0]
 8005242:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005246:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800524a:	d108      	bne.n	800525e <_scanf_float+0x1c6>
 800524c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005250:	6022      	str	r2, [r4, #0]
 8005252:	f04f 0a01 	mov.w	sl, #1
 8005256:	e7e3      	b.n	8005220 <_scanf_float+0x188>
 8005258:	f1ba 0f02 	cmp.w	sl, #2
 800525c:	d055      	beq.n	800530a <_scanf_float+0x272>
 800525e:	2d01      	cmp	r5, #1
 8005260:	d002      	beq.n	8005268 <_scanf_float+0x1d0>
 8005262:	2d04      	cmp	r5, #4
 8005264:	f47f af48 	bne.w	80050f8 <_scanf_float+0x60>
 8005268:	3501      	adds	r5, #1
 800526a:	b2ed      	uxtb	r5, r5
 800526c:	e7d8      	b.n	8005220 <_scanf_float+0x188>
 800526e:	f1ba 0f01 	cmp.w	sl, #1
 8005272:	f47f af41 	bne.w	80050f8 <_scanf_float+0x60>
 8005276:	f04f 0a02 	mov.w	sl, #2
 800527a:	e7d1      	b.n	8005220 <_scanf_float+0x188>
 800527c:	b97d      	cbnz	r5, 800529e <_scanf_float+0x206>
 800527e:	f1b9 0f00 	cmp.w	r9, #0
 8005282:	f47f af3c 	bne.w	80050fe <_scanf_float+0x66>
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800528c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005290:	f47f af39 	bne.w	8005106 <_scanf_float+0x6e>
 8005294:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	2501      	movs	r5, #1
 800529c:	e7c0      	b.n	8005220 <_scanf_float+0x188>
 800529e:	2d03      	cmp	r5, #3
 80052a0:	d0e2      	beq.n	8005268 <_scanf_float+0x1d0>
 80052a2:	2d05      	cmp	r5, #5
 80052a4:	e7de      	b.n	8005264 <_scanf_float+0x1cc>
 80052a6:	2d02      	cmp	r5, #2
 80052a8:	f47f af26 	bne.w	80050f8 <_scanf_float+0x60>
 80052ac:	2503      	movs	r5, #3
 80052ae:	e7b7      	b.n	8005220 <_scanf_float+0x188>
 80052b0:	2d06      	cmp	r5, #6
 80052b2:	f47f af21 	bne.w	80050f8 <_scanf_float+0x60>
 80052b6:	2507      	movs	r5, #7
 80052b8:	e7b2      	b.n	8005220 <_scanf_float+0x188>
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	0591      	lsls	r1, r2, #22
 80052be:	f57f af1b 	bpl.w	80050f8 <_scanf_float+0x60>
 80052c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052c6:	6022      	str	r2, [r4, #0]
 80052c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80052cc:	e7a8      	b.n	8005220 <_scanf_float+0x188>
 80052ce:	6822      	ldr	r2, [r4, #0]
 80052d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052d8:	d006      	beq.n	80052e8 <_scanf_float+0x250>
 80052da:	0550      	lsls	r0, r2, #21
 80052dc:	f57f af0c 	bpl.w	80050f8 <_scanf_float+0x60>
 80052e0:	f1b9 0f00 	cmp.w	r9, #0
 80052e4:	f43f af0f 	beq.w	8005106 <_scanf_float+0x6e>
 80052e8:	0591      	lsls	r1, r2, #22
 80052ea:	bf58      	it	pl
 80052ec:	9901      	ldrpl	r1, [sp, #4]
 80052ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052f2:	bf58      	it	pl
 80052f4:	eba9 0101 	subpl.w	r1, r9, r1
 80052f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80052fc:	bf58      	it	pl
 80052fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	f04f 0900 	mov.w	r9, #0
 8005308:	e78a      	b.n	8005220 <_scanf_float+0x188>
 800530a:	f04f 0a03 	mov.w	sl, #3
 800530e:	e787      	b.n	8005220 <_scanf_float+0x188>
 8005310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005314:	4639      	mov	r1, r7
 8005316:	4640      	mov	r0, r8
 8005318:	4798      	blx	r3
 800531a:	2800      	cmp	r0, #0
 800531c:	f43f aedf 	beq.w	80050de <_scanf_float+0x46>
 8005320:	e6ea      	b.n	80050f8 <_scanf_float+0x60>
 8005322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800532a:	463a      	mov	r2, r7
 800532c:	4640      	mov	r0, r8
 800532e:	4798      	blx	r3
 8005330:	6923      	ldr	r3, [r4, #16]
 8005332:	3b01      	subs	r3, #1
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	e6ec      	b.n	8005112 <_scanf_float+0x7a>
 8005338:	1e6b      	subs	r3, r5, #1
 800533a:	2b06      	cmp	r3, #6
 800533c:	d825      	bhi.n	800538a <_scanf_float+0x2f2>
 800533e:	2d02      	cmp	r5, #2
 8005340:	d836      	bhi.n	80053b0 <_scanf_float+0x318>
 8005342:	455e      	cmp	r6, fp
 8005344:	f67f aee8 	bls.w	8005118 <_scanf_float+0x80>
 8005348:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800534c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005350:	463a      	mov	r2, r7
 8005352:	4640      	mov	r0, r8
 8005354:	4798      	blx	r3
 8005356:	6923      	ldr	r3, [r4, #16]
 8005358:	3b01      	subs	r3, #1
 800535a:	6123      	str	r3, [r4, #16]
 800535c:	e7f1      	b.n	8005342 <_scanf_float+0x2aa>
 800535e:	9802      	ldr	r0, [sp, #8]
 8005360:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005364:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005368:	9002      	str	r0, [sp, #8]
 800536a:	463a      	mov	r2, r7
 800536c:	4640      	mov	r0, r8
 800536e:	4798      	blx	r3
 8005370:	6923      	ldr	r3, [r4, #16]
 8005372:	3b01      	subs	r3, #1
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800537a:	fa5f fa8a 	uxtb.w	sl, sl
 800537e:	f1ba 0f02 	cmp.w	sl, #2
 8005382:	d1ec      	bne.n	800535e <_scanf_float+0x2c6>
 8005384:	3d03      	subs	r5, #3
 8005386:	b2ed      	uxtb	r5, r5
 8005388:	1b76      	subs	r6, r6, r5
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	05da      	lsls	r2, r3, #23
 800538e:	d52f      	bpl.n	80053f0 <_scanf_float+0x358>
 8005390:	055b      	lsls	r3, r3, #21
 8005392:	d510      	bpl.n	80053b6 <_scanf_float+0x31e>
 8005394:	455e      	cmp	r6, fp
 8005396:	f67f aebf 	bls.w	8005118 <_scanf_float+0x80>
 800539a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800539e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053a2:	463a      	mov	r2, r7
 80053a4:	4640      	mov	r0, r8
 80053a6:	4798      	blx	r3
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6123      	str	r3, [r4, #16]
 80053ae:	e7f1      	b.n	8005394 <_scanf_float+0x2fc>
 80053b0:	46aa      	mov	sl, r5
 80053b2:	9602      	str	r6, [sp, #8]
 80053b4:	e7df      	b.n	8005376 <_scanf_float+0x2de>
 80053b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053ba:	6923      	ldr	r3, [r4, #16]
 80053bc:	2965      	cmp	r1, #101	; 0x65
 80053be:	f103 33ff 	add.w	r3, r3, #4294967295
 80053c2:	f106 35ff 	add.w	r5, r6, #4294967295
 80053c6:	6123      	str	r3, [r4, #16]
 80053c8:	d00c      	beq.n	80053e4 <_scanf_float+0x34c>
 80053ca:	2945      	cmp	r1, #69	; 0x45
 80053cc:	d00a      	beq.n	80053e4 <_scanf_float+0x34c>
 80053ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053d2:	463a      	mov	r2, r7
 80053d4:	4640      	mov	r0, r8
 80053d6:	4798      	blx	r3
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053de:	3b01      	subs	r3, #1
 80053e0:	1eb5      	subs	r5, r6, #2
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053e8:	463a      	mov	r2, r7
 80053ea:	4640      	mov	r0, r8
 80053ec:	4798      	blx	r3
 80053ee:	462e      	mov	r6, r5
 80053f0:	6825      	ldr	r5, [r4, #0]
 80053f2:	f015 0510 	ands.w	r5, r5, #16
 80053f6:	d158      	bne.n	80054aa <_scanf_float+0x412>
 80053f8:	7035      	strb	r5, [r6, #0]
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d11c      	bne.n	8005440 <_scanf_float+0x3a8>
 8005406:	9b01      	ldr	r3, [sp, #4]
 8005408:	454b      	cmp	r3, r9
 800540a:	eba3 0209 	sub.w	r2, r3, r9
 800540e:	d124      	bne.n	800545a <_scanf_float+0x3c2>
 8005410:	2200      	movs	r2, #0
 8005412:	4659      	mov	r1, fp
 8005414:	4640      	mov	r0, r8
 8005416:	f002 fc2f 	bl	8007c78 <_strtod_r>
 800541a:	9b03      	ldr	r3, [sp, #12]
 800541c:	6821      	ldr	r1, [r4, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f011 0f02 	tst.w	r1, #2
 8005424:	ec57 6b10 	vmov	r6, r7, d0
 8005428:	f103 0204 	add.w	r2, r3, #4
 800542c:	d020      	beq.n	8005470 <_scanf_float+0x3d8>
 800542e:	9903      	ldr	r1, [sp, #12]
 8005430:	600a      	str	r2, [r1, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	e9c3 6700 	strd	r6, r7, [r3]
 8005438:	68e3      	ldr	r3, [r4, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60e3      	str	r3, [r4, #12]
 800543e:	e66c      	b.n	800511a <_scanf_float+0x82>
 8005440:	9b04      	ldr	r3, [sp, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d0e4      	beq.n	8005410 <_scanf_float+0x378>
 8005446:	9905      	ldr	r1, [sp, #20]
 8005448:	230a      	movs	r3, #10
 800544a:	462a      	mov	r2, r5
 800544c:	3101      	adds	r1, #1
 800544e:	4640      	mov	r0, r8
 8005450:	f002 fc9a 	bl	8007d88 <_strtol_r>
 8005454:	9b04      	ldr	r3, [sp, #16]
 8005456:	9e05      	ldr	r6, [sp, #20]
 8005458:	1ac2      	subs	r2, r0, r3
 800545a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800545e:	429e      	cmp	r6, r3
 8005460:	bf28      	it	cs
 8005462:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005466:	4912      	ldr	r1, [pc, #72]	; (80054b0 <_scanf_float+0x418>)
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f8e7 	bl	800563c <siprintf>
 800546e:	e7cf      	b.n	8005410 <_scanf_float+0x378>
 8005470:	f011 0f04 	tst.w	r1, #4
 8005474:	9903      	ldr	r1, [sp, #12]
 8005476:	600a      	str	r2, [r1, #0]
 8005478:	d1db      	bne.n	8005432 <_scanf_float+0x39a>
 800547a:	f8d3 8000 	ldr.w	r8, [r3]
 800547e:	ee10 2a10 	vmov	r2, s0
 8005482:	ee10 0a10 	vmov	r0, s0
 8005486:	463b      	mov	r3, r7
 8005488:	4639      	mov	r1, r7
 800548a:	f7fb fb5f 	bl	8000b4c <__aeabi_dcmpun>
 800548e:	b128      	cbz	r0, 800549c <_scanf_float+0x404>
 8005490:	4808      	ldr	r0, [pc, #32]	; (80054b4 <_scanf_float+0x41c>)
 8005492:	f000 f9b7 	bl	8005804 <nanf>
 8005496:	ed88 0a00 	vstr	s0, [r8]
 800549a:	e7cd      	b.n	8005438 <_scanf_float+0x3a0>
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fbb2 	bl	8000c08 <__aeabi_d2f>
 80054a4:	f8c8 0000 	str.w	r0, [r8]
 80054a8:	e7c6      	b.n	8005438 <_scanf_float+0x3a0>
 80054aa:	2500      	movs	r5, #0
 80054ac:	e635      	b.n	800511a <_scanf_float+0x82>
 80054ae:	bf00      	nop
 80054b0:	08009010 	.word	0x08009010
 80054b4:	080093a5 	.word	0x080093a5

080054b8 <std>:
 80054b8:	2300      	movs	r3, #0
 80054ba:	b510      	push	{r4, lr}
 80054bc:	4604      	mov	r4, r0
 80054be:	e9c0 3300 	strd	r3, r3, [r0]
 80054c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054c6:	6083      	str	r3, [r0, #8]
 80054c8:	8181      	strh	r1, [r0, #12]
 80054ca:	6643      	str	r3, [r0, #100]	; 0x64
 80054cc:	81c2      	strh	r2, [r0, #14]
 80054ce:	6183      	str	r3, [r0, #24]
 80054d0:	4619      	mov	r1, r3
 80054d2:	2208      	movs	r2, #8
 80054d4:	305c      	adds	r0, #92	; 0x5c
 80054d6:	f000 f914 	bl	8005702 <memset>
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <std+0x58>)
 80054dc:	6263      	str	r3, [r4, #36]	; 0x24
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <std+0x5c>)
 80054e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <std+0x60>)
 80054e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <std+0x64>)
 80054e8:	6323      	str	r3, [r4, #48]	; 0x30
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <std+0x68>)
 80054ec:	6224      	str	r4, [r4, #32]
 80054ee:	429c      	cmp	r4, r3
 80054f0:	d006      	beq.n	8005500 <std+0x48>
 80054f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80054f6:	4294      	cmp	r4, r2
 80054f8:	d002      	beq.n	8005500 <std+0x48>
 80054fa:	33d0      	adds	r3, #208	; 0xd0
 80054fc:	429c      	cmp	r4, r3
 80054fe:	d105      	bne.n	800550c <std+0x54>
 8005500:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005508:	f000 b978 	b.w	80057fc <__retarget_lock_init_recursive>
 800550c:	bd10      	pop	{r4, pc}
 800550e:	bf00      	nop
 8005510:	0800567d 	.word	0x0800567d
 8005514:	0800569f 	.word	0x0800569f
 8005518:	080056d7 	.word	0x080056d7
 800551c:	080056fb 	.word	0x080056fb
 8005520:	200002c8 	.word	0x200002c8

08005524 <stdio_exit_handler>:
 8005524:	4a02      	ldr	r2, [pc, #8]	; (8005530 <stdio_exit_handler+0xc>)
 8005526:	4903      	ldr	r1, [pc, #12]	; (8005534 <stdio_exit_handler+0x10>)
 8005528:	4803      	ldr	r0, [pc, #12]	; (8005538 <stdio_exit_handler+0x14>)
 800552a:	f000 b869 	b.w	8005600 <_fwalk_sglue>
 800552e:	bf00      	nop
 8005530:	2000000c 	.word	0x2000000c
 8005534:	08008149 	.word	0x08008149
 8005538:	20000018 	.word	0x20000018

0800553c <cleanup_stdio>:
 800553c:	6841      	ldr	r1, [r0, #4]
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <cleanup_stdio+0x34>)
 8005540:	4299      	cmp	r1, r3
 8005542:	b510      	push	{r4, lr}
 8005544:	4604      	mov	r4, r0
 8005546:	d001      	beq.n	800554c <cleanup_stdio+0x10>
 8005548:	f002 fdfe 	bl	8008148 <_fflush_r>
 800554c:	68a1      	ldr	r1, [r4, #8]
 800554e:	4b09      	ldr	r3, [pc, #36]	; (8005574 <cleanup_stdio+0x38>)
 8005550:	4299      	cmp	r1, r3
 8005552:	d002      	beq.n	800555a <cleanup_stdio+0x1e>
 8005554:	4620      	mov	r0, r4
 8005556:	f002 fdf7 	bl	8008148 <_fflush_r>
 800555a:	68e1      	ldr	r1, [r4, #12]
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <cleanup_stdio+0x3c>)
 800555e:	4299      	cmp	r1, r3
 8005560:	d004      	beq.n	800556c <cleanup_stdio+0x30>
 8005562:	4620      	mov	r0, r4
 8005564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005568:	f002 bdee 	b.w	8008148 <_fflush_r>
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	200002c8 	.word	0x200002c8
 8005574:	20000330 	.word	0x20000330
 8005578:	20000398 	.word	0x20000398

0800557c <global_stdio_init.part.0>:
 800557c:	b510      	push	{r4, lr}
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <global_stdio_init.part.0+0x30>)
 8005580:	4c0b      	ldr	r4, [pc, #44]	; (80055b0 <global_stdio_init.part.0+0x34>)
 8005582:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <global_stdio_init.part.0+0x38>)
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	4620      	mov	r0, r4
 8005588:	2200      	movs	r2, #0
 800558a:	2104      	movs	r1, #4
 800558c:	f7ff ff94 	bl	80054b8 <std>
 8005590:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005594:	2201      	movs	r2, #1
 8005596:	2109      	movs	r1, #9
 8005598:	f7ff ff8e 	bl	80054b8 <std>
 800559c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80055a0:	2202      	movs	r2, #2
 80055a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a6:	2112      	movs	r1, #18
 80055a8:	f7ff bf86 	b.w	80054b8 <std>
 80055ac:	20000400 	.word	0x20000400
 80055b0:	200002c8 	.word	0x200002c8
 80055b4:	08005525 	.word	0x08005525

080055b8 <__sfp_lock_acquire>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__sfp_lock_acquire+0x8>)
 80055ba:	f000 b920 	b.w	80057fe <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000409 	.word	0x20000409

080055c4 <__sfp_lock_release>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__sfp_lock_release+0x8>)
 80055c6:	f000 b91b 	b.w	8005800 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000409 	.word	0x20000409

080055d0 <__sinit>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	4604      	mov	r4, r0
 80055d4:	f7ff fff0 	bl	80055b8 <__sfp_lock_acquire>
 80055d8:	6a23      	ldr	r3, [r4, #32]
 80055da:	b11b      	cbz	r3, 80055e4 <__sinit+0x14>
 80055dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055e0:	f7ff bff0 	b.w	80055c4 <__sfp_lock_release>
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <__sinit+0x28>)
 80055e6:	6223      	str	r3, [r4, #32]
 80055e8:	4b04      	ldr	r3, [pc, #16]	; (80055fc <__sinit+0x2c>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f5      	bne.n	80055dc <__sinit+0xc>
 80055f0:	f7ff ffc4 	bl	800557c <global_stdio_init.part.0>
 80055f4:	e7f2      	b.n	80055dc <__sinit+0xc>
 80055f6:	bf00      	nop
 80055f8:	0800553d 	.word	0x0800553d
 80055fc:	20000400 	.word	0x20000400

08005600 <_fwalk_sglue>:
 8005600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005604:	4607      	mov	r7, r0
 8005606:	4688      	mov	r8, r1
 8005608:	4614      	mov	r4, r2
 800560a:	2600      	movs	r6, #0
 800560c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005610:	f1b9 0901 	subs.w	r9, r9, #1
 8005614:	d505      	bpl.n	8005622 <_fwalk_sglue+0x22>
 8005616:	6824      	ldr	r4, [r4, #0]
 8005618:	2c00      	cmp	r4, #0
 800561a:	d1f7      	bne.n	800560c <_fwalk_sglue+0xc>
 800561c:	4630      	mov	r0, r6
 800561e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005622:	89ab      	ldrh	r3, [r5, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d907      	bls.n	8005638 <_fwalk_sglue+0x38>
 8005628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800562c:	3301      	adds	r3, #1
 800562e:	d003      	beq.n	8005638 <_fwalk_sglue+0x38>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	47c0      	blx	r8
 8005636:	4306      	orrs	r6, r0
 8005638:	3568      	adds	r5, #104	; 0x68
 800563a:	e7e9      	b.n	8005610 <_fwalk_sglue+0x10>

0800563c <siprintf>:
 800563c:	b40e      	push	{r1, r2, r3}
 800563e:	b500      	push	{lr}
 8005640:	b09c      	sub	sp, #112	; 0x70
 8005642:	ab1d      	add	r3, sp, #116	; 0x74
 8005644:	9002      	str	r0, [sp, #8]
 8005646:	9006      	str	r0, [sp, #24]
 8005648:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800564c:	4809      	ldr	r0, [pc, #36]	; (8005674 <siprintf+0x38>)
 800564e:	9107      	str	r1, [sp, #28]
 8005650:	9104      	str	r1, [sp, #16]
 8005652:	4909      	ldr	r1, [pc, #36]	; (8005678 <siprintf+0x3c>)
 8005654:	f853 2b04 	ldr.w	r2, [r3], #4
 8005658:	9105      	str	r1, [sp, #20]
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	a902      	add	r1, sp, #8
 8005660:	f002 fbee 	bl	8007e40 <_svfiprintf_r>
 8005664:	9b02      	ldr	r3, [sp, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]
 800566a:	b01c      	add	sp, #112	; 0x70
 800566c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005670:	b003      	add	sp, #12
 8005672:	4770      	bx	lr
 8005674:	20000064 	.word	0x20000064
 8005678:	ffff0208 	.word	0xffff0208

0800567c <__sread>:
 800567c:	b510      	push	{r4, lr}
 800567e:	460c      	mov	r4, r1
 8005680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005684:	f000 f86c 	bl	8005760 <_read_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	bfab      	itete	ge
 800568c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800568e:	89a3      	ldrhlt	r3, [r4, #12]
 8005690:	181b      	addge	r3, r3, r0
 8005692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005696:	bfac      	ite	ge
 8005698:	6563      	strge	r3, [r4, #84]	; 0x54
 800569a:	81a3      	strhlt	r3, [r4, #12]
 800569c:	bd10      	pop	{r4, pc}

0800569e <__swrite>:
 800569e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	461f      	mov	r7, r3
 80056a4:	898b      	ldrh	r3, [r1, #12]
 80056a6:	05db      	lsls	r3, r3, #23
 80056a8:	4605      	mov	r5, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4616      	mov	r6, r2
 80056ae:	d505      	bpl.n	80056bc <__swrite+0x1e>
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	2302      	movs	r3, #2
 80056b6:	2200      	movs	r2, #0
 80056b8:	f000 f840 	bl	800573c <_lseek_r>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	4628      	mov	r0, r5
 80056ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	f000 b857 	b.w	8005784 <_write_r>

080056d6 <__sseek>:
 80056d6:	b510      	push	{r4, lr}
 80056d8:	460c      	mov	r4, r1
 80056da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056de:	f000 f82d 	bl	800573c <_lseek_r>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	bf15      	itete	ne
 80056e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80056ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80056ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80056f2:	81a3      	strheq	r3, [r4, #12]
 80056f4:	bf18      	it	ne
 80056f6:	81a3      	strhne	r3, [r4, #12]
 80056f8:	bd10      	pop	{r4, pc}

080056fa <__sclose>:
 80056fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056fe:	f000 b80d 	b.w	800571c <_close_r>

08005702 <memset>:
 8005702:	4402      	add	r2, r0
 8005704:	4603      	mov	r3, r0
 8005706:	4293      	cmp	r3, r2
 8005708:	d100      	bne.n	800570c <memset+0xa>
 800570a:	4770      	bx	lr
 800570c:	f803 1b01 	strb.w	r1, [r3], #1
 8005710:	e7f9      	b.n	8005706 <memset+0x4>
	...

08005714 <_localeconv_r>:
 8005714:	4800      	ldr	r0, [pc, #0]	; (8005718 <_localeconv_r+0x4>)
 8005716:	4770      	bx	lr
 8005718:	20000158 	.word	0x20000158

0800571c <_close_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4d06      	ldr	r5, [pc, #24]	; (8005738 <_close_r+0x1c>)
 8005720:	2300      	movs	r3, #0
 8005722:	4604      	mov	r4, r0
 8005724:	4608      	mov	r0, r1
 8005726:	602b      	str	r3, [r5, #0]
 8005728:	f7fc f92f 	bl	800198a <_close>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_close_r+0x1a>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_close_r+0x1a>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	20000404 	.word	0x20000404

0800573c <_lseek_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d07      	ldr	r5, [pc, #28]	; (800575c <_lseek_r+0x20>)
 8005740:	4604      	mov	r4, r0
 8005742:	4608      	mov	r0, r1
 8005744:	4611      	mov	r1, r2
 8005746:	2200      	movs	r2, #0
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	f7fc f944 	bl	80019d8 <_lseek>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_lseek_r+0x1e>
 8005754:	682b      	ldr	r3, [r5, #0]
 8005756:	b103      	cbz	r3, 800575a <_lseek_r+0x1e>
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	20000404 	.word	0x20000404

08005760 <_read_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	; (8005780 <_read_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fc f8d2 	bl	8001918 <_read>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_read_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_read_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20000404 	.word	0x20000404

08005784 <_write_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d07      	ldr	r5, [pc, #28]	; (80057a4 <_write_r+0x20>)
 8005788:	4604      	mov	r4, r0
 800578a:	4608      	mov	r0, r1
 800578c:	4611      	mov	r1, r2
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f7fc f8dd 	bl	8001952 <_write>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_write_r+0x1e>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_write_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	20000404 	.word	0x20000404

080057a8 <__errno>:
 80057a8:	4b01      	ldr	r3, [pc, #4]	; (80057b0 <__errno+0x8>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000064 	.word	0x20000064

080057b4 <__libc_init_array>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	4d0d      	ldr	r5, [pc, #52]	; (80057ec <__libc_init_array+0x38>)
 80057b8:	4c0d      	ldr	r4, [pc, #52]	; (80057f0 <__libc_init_array+0x3c>)
 80057ba:	1b64      	subs	r4, r4, r5
 80057bc:	10a4      	asrs	r4, r4, #2
 80057be:	2600      	movs	r6, #0
 80057c0:	42a6      	cmp	r6, r4
 80057c2:	d109      	bne.n	80057d8 <__libc_init_array+0x24>
 80057c4:	4d0b      	ldr	r5, [pc, #44]	; (80057f4 <__libc_init_array+0x40>)
 80057c6:	4c0c      	ldr	r4, [pc, #48]	; (80057f8 <__libc_init_array+0x44>)
 80057c8:	f003 fbd6 	bl	8008f78 <_init>
 80057cc:	1b64      	subs	r4, r4, r5
 80057ce:	10a4      	asrs	r4, r4, #2
 80057d0:	2600      	movs	r6, #0
 80057d2:	42a6      	cmp	r6, r4
 80057d4:	d105      	bne.n	80057e2 <__libc_init_array+0x2e>
 80057d6:	bd70      	pop	{r4, r5, r6, pc}
 80057d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057dc:	4798      	blx	r3
 80057de:	3601      	adds	r6, #1
 80057e0:	e7ee      	b.n	80057c0 <__libc_init_array+0xc>
 80057e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e6:	4798      	blx	r3
 80057e8:	3601      	adds	r6, #1
 80057ea:	e7f2      	b.n	80057d2 <__libc_init_array+0x1e>
 80057ec:	08009410 	.word	0x08009410
 80057f0:	08009410 	.word	0x08009410
 80057f4:	08009410 	.word	0x08009410
 80057f8:	08009414 	.word	0x08009414

080057fc <__retarget_lock_init_recursive>:
 80057fc:	4770      	bx	lr

080057fe <__retarget_lock_acquire_recursive>:
 80057fe:	4770      	bx	lr

08005800 <__retarget_lock_release_recursive>:
 8005800:	4770      	bx	lr
	...

08005804 <nanf>:
 8005804:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800580c <nanf+0x8>
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	7fc00000 	.word	0x7fc00000

08005810 <quorem>:
 8005810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	6903      	ldr	r3, [r0, #16]
 8005816:	690c      	ldr	r4, [r1, #16]
 8005818:	42a3      	cmp	r3, r4
 800581a:	4607      	mov	r7, r0
 800581c:	db7e      	blt.n	800591c <quorem+0x10c>
 800581e:	3c01      	subs	r4, #1
 8005820:	f101 0814 	add.w	r8, r1, #20
 8005824:	f100 0514 	add.w	r5, r0, #20
 8005828:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005832:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005836:	3301      	adds	r3, #1
 8005838:	429a      	cmp	r2, r3
 800583a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800583e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005842:	fbb2 f6f3 	udiv	r6, r2, r3
 8005846:	d331      	bcc.n	80058ac <quorem+0x9c>
 8005848:	f04f 0e00 	mov.w	lr, #0
 800584c:	4640      	mov	r0, r8
 800584e:	46ac      	mov	ip, r5
 8005850:	46f2      	mov	sl, lr
 8005852:	f850 2b04 	ldr.w	r2, [r0], #4
 8005856:	b293      	uxth	r3, r2
 8005858:	fb06 e303 	mla	r3, r6, r3, lr
 800585c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005860:	0c1a      	lsrs	r2, r3, #16
 8005862:	b29b      	uxth	r3, r3
 8005864:	ebaa 0303 	sub.w	r3, sl, r3
 8005868:	f8dc a000 	ldr.w	sl, [ip]
 800586c:	fa13 f38a 	uxtah	r3, r3, sl
 8005870:	fb06 220e 	mla	r2, r6, lr, r2
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	9b00      	ldr	r3, [sp, #0]
 8005878:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800587c:	b292      	uxth	r2, r2
 800587e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005886:	f8bd 3000 	ldrh.w	r3, [sp]
 800588a:	4581      	cmp	r9, r0
 800588c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005890:	f84c 3b04 	str.w	r3, [ip], #4
 8005894:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005898:	d2db      	bcs.n	8005852 <quorem+0x42>
 800589a:	f855 300b 	ldr.w	r3, [r5, fp]
 800589e:	b92b      	cbnz	r3, 80058ac <quorem+0x9c>
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	3b04      	subs	r3, #4
 80058a4:	429d      	cmp	r5, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	d32c      	bcc.n	8005904 <quorem+0xf4>
 80058aa:	613c      	str	r4, [r7, #16]
 80058ac:	4638      	mov	r0, r7
 80058ae:	f001 f9ef 	bl	8006c90 <__mcmp>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	db22      	blt.n	80058fc <quorem+0xec>
 80058b6:	3601      	adds	r6, #1
 80058b8:	4629      	mov	r1, r5
 80058ba:	2000      	movs	r0, #0
 80058bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80058c0:	f8d1 c000 	ldr.w	ip, [r1]
 80058c4:	b293      	uxth	r3, r2
 80058c6:	1ac3      	subs	r3, r0, r3
 80058c8:	0c12      	lsrs	r2, r2, #16
 80058ca:	fa13 f38c 	uxtah	r3, r3, ip
 80058ce:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80058d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058dc:	45c1      	cmp	r9, r8
 80058de:	f841 3b04 	str.w	r3, [r1], #4
 80058e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058e6:	d2e9      	bcs.n	80058bc <quorem+0xac>
 80058e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058f0:	b922      	cbnz	r2, 80058fc <quorem+0xec>
 80058f2:	3b04      	subs	r3, #4
 80058f4:	429d      	cmp	r5, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	d30a      	bcc.n	8005910 <quorem+0x100>
 80058fa:	613c      	str	r4, [r7, #16]
 80058fc:	4630      	mov	r0, r6
 80058fe:	b003      	add	sp, #12
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	3b04      	subs	r3, #4
 8005908:	2a00      	cmp	r2, #0
 800590a:	d1ce      	bne.n	80058aa <quorem+0x9a>
 800590c:	3c01      	subs	r4, #1
 800590e:	e7c9      	b.n	80058a4 <quorem+0x94>
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	3b04      	subs	r3, #4
 8005914:	2a00      	cmp	r2, #0
 8005916:	d1f0      	bne.n	80058fa <quorem+0xea>
 8005918:	3c01      	subs	r4, #1
 800591a:	e7eb      	b.n	80058f4 <quorem+0xe4>
 800591c:	2000      	movs	r0, #0
 800591e:	e7ee      	b.n	80058fe <quorem+0xee>

08005920 <_dtoa_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	ed2d 8b04 	vpush	{d8-d9}
 8005928:	69c5      	ldr	r5, [r0, #28]
 800592a:	b093      	sub	sp, #76	; 0x4c
 800592c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005930:	ec57 6b10 	vmov	r6, r7, d0
 8005934:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005938:	9107      	str	r1, [sp, #28]
 800593a:	4604      	mov	r4, r0
 800593c:	920a      	str	r2, [sp, #40]	; 0x28
 800593e:	930d      	str	r3, [sp, #52]	; 0x34
 8005940:	b975      	cbnz	r5, 8005960 <_dtoa_r+0x40>
 8005942:	2010      	movs	r0, #16
 8005944:	f000 fe2a 	bl	800659c <malloc>
 8005948:	4602      	mov	r2, r0
 800594a:	61e0      	str	r0, [r4, #28]
 800594c:	b920      	cbnz	r0, 8005958 <_dtoa_r+0x38>
 800594e:	4bae      	ldr	r3, [pc, #696]	; (8005c08 <_dtoa_r+0x2e8>)
 8005950:	21ef      	movs	r1, #239	; 0xef
 8005952:	48ae      	ldr	r0, [pc, #696]	; (8005c0c <_dtoa_r+0x2ec>)
 8005954:	f002 fc74 	bl	8008240 <__assert_func>
 8005958:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800595c:	6005      	str	r5, [r0, #0]
 800595e:	60c5      	str	r5, [r0, #12]
 8005960:	69e3      	ldr	r3, [r4, #28]
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	b151      	cbz	r1, 800597c <_dtoa_r+0x5c>
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	604a      	str	r2, [r1, #4]
 800596a:	2301      	movs	r3, #1
 800596c:	4093      	lsls	r3, r2
 800596e:	608b      	str	r3, [r1, #8]
 8005970:	4620      	mov	r0, r4
 8005972:	f000 ff07 	bl	8006784 <_Bfree>
 8005976:	69e3      	ldr	r3, [r4, #28]
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	1e3b      	subs	r3, r7, #0
 800597e:	bfbb      	ittet	lt
 8005980:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005984:	9303      	strlt	r3, [sp, #12]
 8005986:	2300      	movge	r3, #0
 8005988:	2201      	movlt	r2, #1
 800598a:	bfac      	ite	ge
 800598c:	f8c8 3000 	strge.w	r3, [r8]
 8005990:	f8c8 2000 	strlt.w	r2, [r8]
 8005994:	4b9e      	ldr	r3, [pc, #632]	; (8005c10 <_dtoa_r+0x2f0>)
 8005996:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800599a:	ea33 0308 	bics.w	r3, r3, r8
 800599e:	d11b      	bne.n	80059d8 <_dtoa_r+0xb8>
 80059a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059ac:	4333      	orrs	r3, r6
 80059ae:	f000 8593 	beq.w	80064d8 <_dtoa_r+0xbb8>
 80059b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059b4:	b963      	cbnz	r3, 80059d0 <_dtoa_r+0xb0>
 80059b6:	4b97      	ldr	r3, [pc, #604]	; (8005c14 <_dtoa_r+0x2f4>)
 80059b8:	e027      	b.n	8005a0a <_dtoa_r+0xea>
 80059ba:	4b97      	ldr	r3, [pc, #604]	; (8005c18 <_dtoa_r+0x2f8>)
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	9800      	ldr	r0, [sp, #0]
 80059c6:	b013      	add	sp, #76	; 0x4c
 80059c8:	ecbd 8b04 	vpop	{d8-d9}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	4b90      	ldr	r3, [pc, #576]	; (8005c14 <_dtoa_r+0x2f4>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	3303      	adds	r3, #3
 80059d6:	e7f3      	b.n	80059c0 <_dtoa_r+0xa0>
 80059d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	ec51 0b17 	vmov	r0, r1, d7
 80059e2:	eeb0 8a47 	vmov.f32	s16, s14
 80059e6:	eef0 8a67 	vmov.f32	s17, s15
 80059ea:	2300      	movs	r3, #0
 80059ec:	f7fb f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 80059f0:	4681      	mov	r9, r0
 80059f2:	b160      	cbz	r0, 8005a0e <_dtoa_r+0xee>
 80059f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059f6:	2301      	movs	r3, #1
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 8568 	beq.w	80064d2 <_dtoa_r+0xbb2>
 8005a02:	4b86      	ldr	r3, [pc, #536]	; (8005c1c <_dtoa_r+0x2fc>)
 8005a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	e7da      	b.n	80059c4 <_dtoa_r+0xa4>
 8005a0e:	aa10      	add	r2, sp, #64	; 0x40
 8005a10:	a911      	add	r1, sp, #68	; 0x44
 8005a12:	4620      	mov	r0, r4
 8005a14:	eeb0 0a48 	vmov.f32	s0, s16
 8005a18:	eef0 0a68 	vmov.f32	s1, s17
 8005a1c:	f001 fa4e 	bl	8006ebc <__d2b>
 8005a20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a24:	4682      	mov	sl, r0
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	d07f      	beq.n	8005b2a <_dtoa_r+0x20a>
 8005a2a:	ee18 3a90 	vmov	r3, s17
 8005a2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a36:	ec51 0b18 	vmov	r0, r1, d8
 8005a3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005a46:	4619      	mov	r1, r3
 8005a48:	2200      	movs	r2, #0
 8005a4a:	4b75      	ldr	r3, [pc, #468]	; (8005c20 <_dtoa_r+0x300>)
 8005a4c:	f7fa fc2c 	bl	80002a8 <__aeabi_dsub>
 8005a50:	a367      	add	r3, pc, #412	; (adr r3, 8005bf0 <_dtoa_r+0x2d0>)
 8005a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a56:	f7fa fddf 	bl	8000618 <__aeabi_dmul>
 8005a5a:	a367      	add	r3, pc, #412	; (adr r3, 8005bf8 <_dtoa_r+0x2d8>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fc24 	bl	80002ac <__adddf3>
 8005a64:	4606      	mov	r6, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	460f      	mov	r7, r1
 8005a6a:	f7fa fd6b 	bl	8000544 <__aeabi_i2d>
 8005a6e:	a364      	add	r3, pc, #400	; (adr r3, 8005c00 <_dtoa_r+0x2e0>)
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	f7fa fdd0 	bl	8000618 <__aeabi_dmul>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa fc14 	bl	80002ac <__adddf3>
 8005a84:	4606      	mov	r6, r0
 8005a86:	460f      	mov	r7, r1
 8005a88:	f7fb f876 	bl	8000b78 <__aeabi_d2iz>
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4683      	mov	fp, r0
 8005a90:	2300      	movs	r3, #0
 8005a92:	4630      	mov	r0, r6
 8005a94:	4639      	mov	r1, r7
 8005a96:	f7fb f831 	bl	8000afc <__aeabi_dcmplt>
 8005a9a:	b148      	cbz	r0, 8005ab0 <_dtoa_r+0x190>
 8005a9c:	4658      	mov	r0, fp
 8005a9e:	f7fa fd51 	bl	8000544 <__aeabi_i2d>
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	f7fb f81f 	bl	8000ae8 <__aeabi_dcmpeq>
 8005aaa:	b908      	cbnz	r0, 8005ab0 <_dtoa_r+0x190>
 8005aac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ab0:	f1bb 0f16 	cmp.w	fp, #22
 8005ab4:	d857      	bhi.n	8005b66 <_dtoa_r+0x246>
 8005ab6:	4b5b      	ldr	r3, [pc, #364]	; (8005c24 <_dtoa_r+0x304>)
 8005ab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac0:	ec51 0b18 	vmov	r0, r1, d8
 8005ac4:	f7fb f81a 	bl	8000afc <__aeabi_dcmplt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d04e      	beq.n	8005b6a <_dtoa_r+0x24a>
 8005acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ad6:	1b5b      	subs	r3, r3, r5
 8005ad8:	1e5a      	subs	r2, r3, #1
 8005ada:	bf45      	ittet	mi
 8005adc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ae0:	9305      	strmi	r3, [sp, #20]
 8005ae2:	2300      	movpl	r3, #0
 8005ae4:	2300      	movmi	r3, #0
 8005ae6:	9206      	str	r2, [sp, #24]
 8005ae8:	bf54      	ite	pl
 8005aea:	9305      	strpl	r3, [sp, #20]
 8005aec:	9306      	strmi	r3, [sp, #24]
 8005aee:	f1bb 0f00 	cmp.w	fp, #0
 8005af2:	db3c      	blt.n	8005b6e <_dtoa_r+0x24e>
 8005af4:	9b06      	ldr	r3, [sp, #24]
 8005af6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005afa:	445b      	add	r3, fp
 8005afc:	9306      	str	r3, [sp, #24]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9308      	str	r3, [sp, #32]
 8005b02:	9b07      	ldr	r3, [sp, #28]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d868      	bhi.n	8005bda <_dtoa_r+0x2ba>
 8005b08:	2b05      	cmp	r3, #5
 8005b0a:	bfc4      	itt	gt
 8005b0c:	3b04      	subgt	r3, #4
 8005b0e:	9307      	strgt	r3, [sp, #28]
 8005b10:	9b07      	ldr	r3, [sp, #28]
 8005b12:	f1a3 0302 	sub.w	r3, r3, #2
 8005b16:	bfcc      	ite	gt
 8005b18:	2500      	movgt	r5, #0
 8005b1a:	2501      	movle	r5, #1
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	f200 8085 	bhi.w	8005c2c <_dtoa_r+0x30c>
 8005b22:	e8df f003 	tbb	[pc, r3]
 8005b26:	3b2e      	.short	0x3b2e
 8005b28:	5839      	.short	0x5839
 8005b2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b2e:	441d      	add	r5, r3
 8005b30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	bfc1      	itttt	gt
 8005b38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005b44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005b48:	bfd6      	itet	le
 8005b4a:	f1c3 0320 	rsble	r3, r3, #32
 8005b4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b52:	fa06 f003 	lslle.w	r0, r6, r3
 8005b56:	f7fa fce5 	bl	8000524 <__aeabi_ui2d>
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005b60:	3d01      	subs	r5, #1
 8005b62:	920e      	str	r2, [sp, #56]	; 0x38
 8005b64:	e76f      	b.n	8005a46 <_dtoa_r+0x126>
 8005b66:	2301      	movs	r3, #1
 8005b68:	e7b3      	b.n	8005ad2 <_dtoa_r+0x1b2>
 8005b6a:	900c      	str	r0, [sp, #48]	; 0x30
 8005b6c:	e7b2      	b.n	8005ad4 <_dtoa_r+0x1b4>
 8005b6e:	9b05      	ldr	r3, [sp, #20]
 8005b70:	eba3 030b 	sub.w	r3, r3, fp
 8005b74:	9305      	str	r3, [sp, #20]
 8005b76:	f1cb 0300 	rsb	r3, fp, #0
 8005b7a:	9308      	str	r3, [sp, #32]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b80:	e7bf      	b.n	8005b02 <_dtoa_r+0x1e2>
 8005b82:	2300      	movs	r3, #0
 8005b84:	9309      	str	r3, [sp, #36]	; 0x24
 8005b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	dc52      	bgt.n	8005c32 <_dtoa_r+0x312>
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	461a      	mov	r2, r3
 8005b94:	920a      	str	r2, [sp, #40]	; 0x28
 8005b96:	e00b      	b.n	8005bb0 <_dtoa_r+0x290>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f3      	b.n	8005b84 <_dtoa_r+0x264>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba2:	445b      	add	r3, fp
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	bfb8      	it	lt
 8005bae:	2301      	movlt	r3, #1
 8005bb0:	69e0      	ldr	r0, [r4, #28]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	f102 0614 	add.w	r6, r2, #20
 8005bba:	429e      	cmp	r6, r3
 8005bbc:	d93d      	bls.n	8005c3a <_dtoa_r+0x31a>
 8005bbe:	6041      	str	r1, [r0, #4]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fd9f 	bl	8006704 <_Balloc>
 8005bc6:	9000      	str	r0, [sp, #0]
 8005bc8:	2800      	cmp	r0, #0
 8005bca:	d139      	bne.n	8005c40 <_dtoa_r+0x320>
 8005bcc:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <_dtoa_r+0x308>)
 8005bce:	4602      	mov	r2, r0
 8005bd0:	f240 11af 	movw	r1, #431	; 0x1af
 8005bd4:	e6bd      	b.n	8005952 <_dtoa_r+0x32>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e7e1      	b.n	8005b9e <_dtoa_r+0x27e>
 8005bda:	2501      	movs	r5, #1
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	9509      	str	r5, [sp, #36]	; 0x24
 8005be2:	f04f 33ff 	mov.w	r3, #4294967295
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2312      	movs	r3, #18
 8005bee:	e7d1      	b.n	8005b94 <_dtoa_r+0x274>
 8005bf0:	636f4361 	.word	0x636f4361
 8005bf4:	3fd287a7 	.word	0x3fd287a7
 8005bf8:	8b60c8b3 	.word	0x8b60c8b3
 8005bfc:	3fc68a28 	.word	0x3fc68a28
 8005c00:	509f79fb 	.word	0x509f79fb
 8005c04:	3fd34413 	.word	0x3fd34413
 8005c08:	08009022 	.word	0x08009022
 8005c0c:	08009039 	.word	0x08009039
 8005c10:	7ff00000 	.word	0x7ff00000
 8005c14:	0800901e 	.word	0x0800901e
 8005c18:	08009015 	.word	0x08009015
 8005c1c:	08008fed 	.word	0x08008fed
 8005c20:	3ff80000 	.word	0x3ff80000
 8005c24:	08009128 	.word	0x08009128
 8005c28:	08009091 	.word	0x08009091
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c30:	e7d7      	b.n	8005be2 <_dtoa_r+0x2c2>
 8005c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c34:	9301      	str	r3, [sp, #4]
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	e7ba      	b.n	8005bb0 <_dtoa_r+0x290>
 8005c3a:	3101      	adds	r1, #1
 8005c3c:	0052      	lsls	r2, r2, #1
 8005c3e:	e7ba      	b.n	8005bb6 <_dtoa_r+0x296>
 8005c40:	69e3      	ldr	r3, [r4, #28]
 8005c42:	9a00      	ldr	r2, [sp, #0]
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	2b0e      	cmp	r3, #14
 8005c4a:	f200 80a8 	bhi.w	8005d9e <_dtoa_r+0x47e>
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	f000 80a5 	beq.w	8005d9e <_dtoa_r+0x47e>
 8005c54:	f1bb 0f00 	cmp.w	fp, #0
 8005c58:	dd38      	ble.n	8005ccc <_dtoa_r+0x3ac>
 8005c5a:	4bc0      	ldr	r3, [pc, #768]	; (8005f5c <_dtoa_r+0x63c>)
 8005c5c:	f00b 020f 	and.w	r2, fp, #15
 8005c60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005c70:	d019      	beq.n	8005ca6 <_dtoa_r+0x386>
 8005c72:	4bbb      	ldr	r3, [pc, #748]	; (8005f60 <_dtoa_r+0x640>)
 8005c74:	ec51 0b18 	vmov	r0, r1, d8
 8005c78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c7c:	f7fa fdf6 	bl	800086c <__aeabi_ddiv>
 8005c80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c84:	f008 080f 	and.w	r8, r8, #15
 8005c88:	2503      	movs	r5, #3
 8005c8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005f60 <_dtoa_r+0x640>
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	d10a      	bne.n	8005caa <_dtoa_r+0x38a>
 8005c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c98:	4632      	mov	r2, r6
 8005c9a:	463b      	mov	r3, r7
 8005c9c:	f7fa fde6 	bl	800086c <__aeabi_ddiv>
 8005ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca4:	e02b      	b.n	8005cfe <_dtoa_r+0x3de>
 8005ca6:	2502      	movs	r5, #2
 8005ca8:	e7ef      	b.n	8005c8a <_dtoa_r+0x36a>
 8005caa:	f018 0f01 	tst.w	r8, #1
 8005cae:	d008      	beq.n	8005cc2 <_dtoa_r+0x3a2>
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cb8:	f7fa fcae 	bl	8000618 <__aeabi_dmul>
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	460f      	mov	r7, r1
 8005cc2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005cc6:	f109 0908 	add.w	r9, r9, #8
 8005cca:	e7e0      	b.n	8005c8e <_dtoa_r+0x36e>
 8005ccc:	f000 809f 	beq.w	8005e0e <_dtoa_r+0x4ee>
 8005cd0:	f1cb 0600 	rsb	r6, fp, #0
 8005cd4:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <_dtoa_r+0x63c>)
 8005cd6:	4fa2      	ldr	r7, [pc, #648]	; (8005f60 <_dtoa_r+0x640>)
 8005cd8:	f006 020f 	and.w	r2, r6, #15
 8005cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	ec51 0b18 	vmov	r0, r1, d8
 8005ce8:	f7fa fc96 	bl	8000618 <__aeabi_dmul>
 8005cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf0:	1136      	asrs	r6, r6, #4
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	2502      	movs	r5, #2
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	d17e      	bne.n	8005df8 <_dtoa_r+0x4d8>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1d0      	bne.n	8005ca0 <_dtoa_r+0x380>
 8005cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8084 	beq.w	8005e12 <_dtoa_r+0x4f2>
 8005d0a:	4b96      	ldr	r3, [pc, #600]	; (8005f64 <_dtoa_r+0x644>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fef3 	bl	8000afc <__aeabi_dcmplt>
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d07b      	beq.n	8005e12 <_dtoa_r+0x4f2>
 8005d1a:	9b04      	ldr	r3, [sp, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d078      	beq.n	8005e12 <_dtoa_r+0x4f2>
 8005d20:	9b01      	ldr	r3, [sp, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd39      	ble.n	8005d9a <_dtoa_r+0x47a>
 8005d26:	4b90      	ldr	r3, [pc, #576]	; (8005f68 <_dtoa_r+0x648>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	f7fa fc73 	bl	8000618 <__aeabi_dmul>
 8005d32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d36:	9e01      	ldr	r6, [sp, #4]
 8005d38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005d3c:	3501      	adds	r5, #1
 8005d3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7fa fbfe 	bl	8000544 <__aeabi_i2d>
 8005d48:	4642      	mov	r2, r8
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	f7fa fc64 	bl	8000618 <__aeabi_dmul>
 8005d50:	4b86      	ldr	r3, [pc, #536]	; (8005f6c <_dtoa_r+0x64c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	f7fa faaa 	bl	80002ac <__adddf3>
 8005d58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d60:	9303      	str	r3, [sp, #12]
 8005d62:	2e00      	cmp	r6, #0
 8005d64:	d158      	bne.n	8005e18 <_dtoa_r+0x4f8>
 8005d66:	4b82      	ldr	r3, [pc, #520]	; (8005f70 <_dtoa_r+0x650>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	4649      	mov	r1, r9
 8005d6e:	f7fa fa9b 	bl	80002a8 <__aeabi_dsub>
 8005d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	f7fa fedd 	bl	8000b38 <__aeabi_dcmpgt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 8296 	bne.w	80062b0 <_dtoa_r+0x990>
 8005d84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d88:	4640      	mov	r0, r8
 8005d8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d8e:	4649      	mov	r1, r9
 8005d90:	f7fa feb4 	bl	8000afc <__aeabi_dcmplt>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	f040 8289 	bne.w	80062ac <_dtoa_r+0x98c>
 8005d9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f2c0 814e 	blt.w	8006042 <_dtoa_r+0x722>
 8005da6:	f1bb 0f0e 	cmp.w	fp, #14
 8005daa:	f300 814a 	bgt.w	8006042 <_dtoa_r+0x722>
 8005dae:	4b6b      	ldr	r3, [pc, #428]	; (8005f5c <_dtoa_r+0x63c>)
 8005db0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005db4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f280 80dc 	bge.w	8005f78 <_dtoa_r+0x658>
 8005dc0:	9b04      	ldr	r3, [sp, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f300 80d8 	bgt.w	8005f78 <_dtoa_r+0x658>
 8005dc8:	f040 826f 	bne.w	80062aa <_dtoa_r+0x98a>
 8005dcc:	4b68      	ldr	r3, [pc, #416]	; (8005f70 <_dtoa_r+0x650>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	f7fa fc20 	bl	8000618 <__aeabi_dmul>
 8005dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ddc:	f7fa fea2 	bl	8000b24 <__aeabi_dcmpge>
 8005de0:	9e04      	ldr	r6, [sp, #16]
 8005de2:	4637      	mov	r7, r6
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 8245 	bne.w	8006274 <_dtoa_r+0x954>
 8005dea:	9d00      	ldr	r5, [sp, #0]
 8005dec:	2331      	movs	r3, #49	; 0x31
 8005dee:	f805 3b01 	strb.w	r3, [r5], #1
 8005df2:	f10b 0b01 	add.w	fp, fp, #1
 8005df6:	e241      	b.n	800627c <_dtoa_r+0x95c>
 8005df8:	07f2      	lsls	r2, r6, #31
 8005dfa:	d505      	bpl.n	8005e08 <_dtoa_r+0x4e8>
 8005dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e00:	f7fa fc0a 	bl	8000618 <__aeabi_dmul>
 8005e04:	3501      	adds	r5, #1
 8005e06:	2301      	movs	r3, #1
 8005e08:	1076      	asrs	r6, r6, #1
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	e773      	b.n	8005cf6 <_dtoa_r+0x3d6>
 8005e0e:	2502      	movs	r5, #2
 8005e10:	e775      	b.n	8005cfe <_dtoa_r+0x3de>
 8005e12:	9e04      	ldr	r6, [sp, #16]
 8005e14:	465f      	mov	r7, fp
 8005e16:	e792      	b.n	8005d3e <_dtoa_r+0x41e>
 8005e18:	9900      	ldr	r1, [sp, #0]
 8005e1a:	4b50      	ldr	r3, [pc, #320]	; (8005f5c <_dtoa_r+0x63c>)
 8005e1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e20:	4431      	add	r1, r6
 8005e22:	9102      	str	r1, [sp, #8]
 8005e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e26:	eeb0 9a47 	vmov.f32	s18, s14
 8005e2a:	eef0 9a67 	vmov.f32	s19, s15
 8005e2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e36:	2900      	cmp	r1, #0
 8005e38:	d044      	beq.n	8005ec4 <_dtoa_r+0x5a4>
 8005e3a:	494e      	ldr	r1, [pc, #312]	; (8005f74 <_dtoa_r+0x654>)
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7fa fd15 	bl	800086c <__aeabi_ddiv>
 8005e42:	ec53 2b19 	vmov	r2, r3, d9
 8005e46:	f7fa fa2f 	bl	80002a8 <__aeabi_dsub>
 8005e4a:	9d00      	ldr	r5, [sp, #0]
 8005e4c:	ec41 0b19 	vmov	d9, r0, r1
 8005e50:	4649      	mov	r1, r9
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7fa fe90 	bl	8000b78 <__aeabi_d2iz>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	f7fa fb73 	bl	8000544 <__aeabi_i2d>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fa1f 	bl	80002a8 <__aeabi_dsub>
 8005e6a:	3630      	adds	r6, #48	; 0x30
 8005e6c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e70:	ec53 2b19 	vmov	r2, r3, d9
 8005e74:	4680      	mov	r8, r0
 8005e76:	4689      	mov	r9, r1
 8005e78:	f7fa fe40 	bl	8000afc <__aeabi_dcmplt>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d164      	bne.n	8005f4a <_dtoa_r+0x62a>
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	4937      	ldr	r1, [pc, #220]	; (8005f64 <_dtoa_r+0x644>)
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7fa fa0e 	bl	80002a8 <__aeabi_dsub>
 8005e8c:	ec53 2b19 	vmov	r2, r3, d9
 8005e90:	f7fa fe34 	bl	8000afc <__aeabi_dcmplt>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f040 80b6 	bne.w	8006006 <_dtoa_r+0x6e6>
 8005e9a:	9b02      	ldr	r3, [sp, #8]
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	f43f af7c 	beq.w	8005d9a <_dtoa_r+0x47a>
 8005ea2:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <_dtoa_r+0x648>)
 8005ea4:	ec51 0b19 	vmov	r0, r1, d9
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f7fa fbb5 	bl	8000618 <__aeabi_dmul>
 8005eae:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <_dtoa_r+0x648>)
 8005eb0:	ec41 0b19 	vmov	d9, r0, r1
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	4649      	mov	r1, r9
 8005eba:	f7fa fbad 	bl	8000618 <__aeabi_dmul>
 8005ebe:	4680      	mov	r8, r0
 8005ec0:	4689      	mov	r9, r1
 8005ec2:	e7c5      	b.n	8005e50 <_dtoa_r+0x530>
 8005ec4:	ec51 0b17 	vmov	r0, r1, d7
 8005ec8:	f7fa fba6 	bl	8000618 <__aeabi_dmul>
 8005ecc:	9b02      	ldr	r3, [sp, #8]
 8005ece:	9d00      	ldr	r5, [sp, #0]
 8005ed0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed2:	ec41 0b19 	vmov	d9, r0, r1
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	4640      	mov	r0, r8
 8005eda:	f7fa fe4d 	bl	8000b78 <__aeabi_d2iz>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	f7fa fb30 	bl	8000544 <__aeabi_i2d>
 8005ee4:	3630      	adds	r6, #48	; 0x30
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4640      	mov	r0, r8
 8005eec:	4649      	mov	r1, r9
 8005eee:	f7fa f9db 	bl	80002a8 <__aeabi_dsub>
 8005ef2:	f805 6b01 	strb.w	r6, [r5], #1
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	429d      	cmp	r5, r3
 8005efa:	4680      	mov	r8, r0
 8005efc:	4689      	mov	r9, r1
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	d124      	bne.n	8005f4e <_dtoa_r+0x62e>
 8005f04:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <_dtoa_r+0x654>)
 8005f06:	ec51 0b19 	vmov	r0, r1, d9
 8005f0a:	f7fa f9cf 	bl	80002ac <__adddf3>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4640      	mov	r0, r8
 8005f14:	4649      	mov	r1, r9
 8005f16:	f7fa fe0f 	bl	8000b38 <__aeabi_dcmpgt>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d173      	bne.n	8006006 <_dtoa_r+0x6e6>
 8005f1e:	ec53 2b19 	vmov	r2, r3, d9
 8005f22:	4914      	ldr	r1, [pc, #80]	; (8005f74 <_dtoa_r+0x654>)
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7fa f9bf 	bl	80002a8 <__aeabi_dsub>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4640      	mov	r0, r8
 8005f30:	4649      	mov	r1, r9
 8005f32:	f7fa fde3 	bl	8000afc <__aeabi_dcmplt>
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f af2f 	beq.w	8005d9a <_dtoa_r+0x47a>
 8005f3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f3e:	1e6b      	subs	r3, r5, #1
 8005f40:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f46:	2b30      	cmp	r3, #48	; 0x30
 8005f48:	d0f8      	beq.n	8005f3c <_dtoa_r+0x61c>
 8005f4a:	46bb      	mov	fp, r7
 8005f4c:	e04a      	b.n	8005fe4 <_dtoa_r+0x6c4>
 8005f4e:	4b06      	ldr	r3, [pc, #24]	; (8005f68 <_dtoa_r+0x648>)
 8005f50:	f7fa fb62 	bl	8000618 <__aeabi_dmul>
 8005f54:	4680      	mov	r8, r0
 8005f56:	4689      	mov	r9, r1
 8005f58:	e7bd      	b.n	8005ed6 <_dtoa_r+0x5b6>
 8005f5a:	bf00      	nop
 8005f5c:	08009128 	.word	0x08009128
 8005f60:	08009100 	.word	0x08009100
 8005f64:	3ff00000 	.word	0x3ff00000
 8005f68:	40240000 	.word	0x40240000
 8005f6c:	401c0000 	.word	0x401c0000
 8005f70:	40140000 	.word	0x40140000
 8005f74:	3fe00000 	.word	0x3fe00000
 8005f78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f7c:	9d00      	ldr	r5, [sp, #0]
 8005f7e:	4642      	mov	r2, r8
 8005f80:	464b      	mov	r3, r9
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa fc71 	bl	800086c <__aeabi_ddiv>
 8005f8a:	f7fa fdf5 	bl	8000b78 <__aeabi_d2iz>
 8005f8e:	9001      	str	r0, [sp, #4]
 8005f90:	f7fa fad8 	bl	8000544 <__aeabi_i2d>
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f7fa fb3e 	bl	8000618 <__aeabi_dmul>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	4639      	mov	r1, r7
 8005fa4:	f7fa f980 	bl	80002a8 <__aeabi_dsub>
 8005fa8:	9e01      	ldr	r6, [sp, #4]
 8005faa:	9f04      	ldr	r7, [sp, #16]
 8005fac:	3630      	adds	r6, #48	; 0x30
 8005fae:	f805 6b01 	strb.w	r6, [r5], #1
 8005fb2:	9e00      	ldr	r6, [sp, #0]
 8005fb4:	1bae      	subs	r6, r5, r6
 8005fb6:	42b7      	cmp	r7, r6
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	d134      	bne.n	8006028 <_dtoa_r+0x708>
 8005fbe:	f7fa f975 	bl	80002ac <__adddf3>
 8005fc2:	4642      	mov	r2, r8
 8005fc4:	464b      	mov	r3, r9
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460f      	mov	r7, r1
 8005fca:	f7fa fdb5 	bl	8000b38 <__aeabi_dcmpgt>
 8005fce:	b9c8      	cbnz	r0, 8006004 <_dtoa_r+0x6e4>
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	f7fa fd86 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fdc:	b110      	cbz	r0, 8005fe4 <_dtoa_r+0x6c4>
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	07db      	lsls	r3, r3, #31
 8005fe2:	d40f      	bmi.n	8006004 <_dtoa_r+0x6e4>
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 fbcc 	bl	8006784 <_Bfree>
 8005fec:	2300      	movs	r3, #0
 8005fee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ff0:	702b      	strb	r3, [r5, #0]
 8005ff2:	f10b 0301 	add.w	r3, fp, #1
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f43f ace2 	beq.w	80059c4 <_dtoa_r+0xa4>
 8006000:	601d      	str	r5, [r3, #0]
 8006002:	e4df      	b.n	80059c4 <_dtoa_r+0xa4>
 8006004:	465f      	mov	r7, fp
 8006006:	462b      	mov	r3, r5
 8006008:	461d      	mov	r5, r3
 800600a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800600e:	2a39      	cmp	r2, #57	; 0x39
 8006010:	d106      	bne.n	8006020 <_dtoa_r+0x700>
 8006012:	9a00      	ldr	r2, [sp, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d1f7      	bne.n	8006008 <_dtoa_r+0x6e8>
 8006018:	9900      	ldr	r1, [sp, #0]
 800601a:	2230      	movs	r2, #48	; 0x30
 800601c:	3701      	adds	r7, #1
 800601e:	700a      	strb	r2, [r1, #0]
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	3201      	adds	r2, #1
 8006024:	701a      	strb	r2, [r3, #0]
 8006026:	e790      	b.n	8005f4a <_dtoa_r+0x62a>
 8006028:	4ba3      	ldr	r3, [pc, #652]	; (80062b8 <_dtoa_r+0x998>)
 800602a:	2200      	movs	r2, #0
 800602c:	f7fa faf4 	bl	8000618 <__aeabi_dmul>
 8006030:	2200      	movs	r2, #0
 8006032:	2300      	movs	r3, #0
 8006034:	4606      	mov	r6, r0
 8006036:	460f      	mov	r7, r1
 8006038:	f7fa fd56 	bl	8000ae8 <__aeabi_dcmpeq>
 800603c:	2800      	cmp	r0, #0
 800603e:	d09e      	beq.n	8005f7e <_dtoa_r+0x65e>
 8006040:	e7d0      	b.n	8005fe4 <_dtoa_r+0x6c4>
 8006042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006044:	2a00      	cmp	r2, #0
 8006046:	f000 80ca 	beq.w	80061de <_dtoa_r+0x8be>
 800604a:	9a07      	ldr	r2, [sp, #28]
 800604c:	2a01      	cmp	r2, #1
 800604e:	f300 80ad 	bgt.w	80061ac <_dtoa_r+0x88c>
 8006052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006054:	2a00      	cmp	r2, #0
 8006056:	f000 80a5 	beq.w	80061a4 <_dtoa_r+0x884>
 800605a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800605e:	9e08      	ldr	r6, [sp, #32]
 8006060:	9d05      	ldr	r5, [sp, #20]
 8006062:	9a05      	ldr	r2, [sp, #20]
 8006064:	441a      	add	r2, r3
 8006066:	9205      	str	r2, [sp, #20]
 8006068:	9a06      	ldr	r2, [sp, #24]
 800606a:	2101      	movs	r1, #1
 800606c:	441a      	add	r2, r3
 800606e:	4620      	mov	r0, r4
 8006070:	9206      	str	r2, [sp, #24]
 8006072:	f000 fc87 	bl	8006984 <__i2b>
 8006076:	4607      	mov	r7, r0
 8006078:	b165      	cbz	r5, 8006094 <_dtoa_r+0x774>
 800607a:	9b06      	ldr	r3, [sp, #24]
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd09      	ble.n	8006094 <_dtoa_r+0x774>
 8006080:	42ab      	cmp	r3, r5
 8006082:	9a05      	ldr	r2, [sp, #20]
 8006084:	bfa8      	it	ge
 8006086:	462b      	movge	r3, r5
 8006088:	1ad2      	subs	r2, r2, r3
 800608a:	9205      	str	r2, [sp, #20]
 800608c:	9a06      	ldr	r2, [sp, #24]
 800608e:	1aed      	subs	r5, r5, r3
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	9306      	str	r3, [sp, #24]
 8006094:	9b08      	ldr	r3, [sp, #32]
 8006096:	b1f3      	cbz	r3, 80060d6 <_dtoa_r+0x7b6>
 8006098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80a3 	beq.w	80061e6 <_dtoa_r+0x8c6>
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	dd10      	ble.n	80060c6 <_dtoa_r+0x7a6>
 80060a4:	4639      	mov	r1, r7
 80060a6:	4632      	mov	r2, r6
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fd2b 	bl	8006b04 <__pow5mult>
 80060ae:	4652      	mov	r2, sl
 80060b0:	4601      	mov	r1, r0
 80060b2:	4607      	mov	r7, r0
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 fc7b 	bl	80069b0 <__multiply>
 80060ba:	4651      	mov	r1, sl
 80060bc:	4680      	mov	r8, r0
 80060be:	4620      	mov	r0, r4
 80060c0:	f000 fb60 	bl	8006784 <_Bfree>
 80060c4:	46c2      	mov	sl, r8
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	1b9a      	subs	r2, r3, r6
 80060ca:	d004      	beq.n	80060d6 <_dtoa_r+0x7b6>
 80060cc:	4651      	mov	r1, sl
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 fd18 	bl	8006b04 <__pow5mult>
 80060d4:	4682      	mov	sl, r0
 80060d6:	2101      	movs	r1, #1
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fc53 	bl	8006984 <__i2b>
 80060de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	4606      	mov	r6, r0
 80060e4:	f340 8081 	ble.w	80061ea <_dtoa_r+0x8ca>
 80060e8:	461a      	mov	r2, r3
 80060ea:	4601      	mov	r1, r0
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 fd09 	bl	8006b04 <__pow5mult>
 80060f2:	9b07      	ldr	r3, [sp, #28]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	4606      	mov	r6, r0
 80060f8:	dd7a      	ble.n	80061f0 <_dtoa_r+0x8d0>
 80060fa:	f04f 0800 	mov.w	r8, #0
 80060fe:	6933      	ldr	r3, [r6, #16]
 8006100:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006104:	6918      	ldr	r0, [r3, #16]
 8006106:	f000 fbef 	bl	80068e8 <__hi0bits>
 800610a:	f1c0 0020 	rsb	r0, r0, #32
 800610e:	9b06      	ldr	r3, [sp, #24]
 8006110:	4418      	add	r0, r3
 8006112:	f010 001f 	ands.w	r0, r0, #31
 8006116:	f000 8094 	beq.w	8006242 <_dtoa_r+0x922>
 800611a:	f1c0 0320 	rsb	r3, r0, #32
 800611e:	2b04      	cmp	r3, #4
 8006120:	f340 8085 	ble.w	800622e <_dtoa_r+0x90e>
 8006124:	9b05      	ldr	r3, [sp, #20]
 8006126:	f1c0 001c 	rsb	r0, r0, #28
 800612a:	4403      	add	r3, r0
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	4403      	add	r3, r0
 8006132:	4405      	add	r5, r0
 8006134:	9306      	str	r3, [sp, #24]
 8006136:	9b05      	ldr	r3, [sp, #20]
 8006138:	2b00      	cmp	r3, #0
 800613a:	dd05      	ble.n	8006148 <_dtoa_r+0x828>
 800613c:	4651      	mov	r1, sl
 800613e:	461a      	mov	r2, r3
 8006140:	4620      	mov	r0, r4
 8006142:	f000 fd39 	bl	8006bb8 <__lshift>
 8006146:	4682      	mov	sl, r0
 8006148:	9b06      	ldr	r3, [sp, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	dd05      	ble.n	800615a <_dtoa_r+0x83a>
 800614e:	4631      	mov	r1, r6
 8006150:	461a      	mov	r2, r3
 8006152:	4620      	mov	r0, r4
 8006154:	f000 fd30 	bl	8006bb8 <__lshift>
 8006158:	4606      	mov	r6, r0
 800615a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800615c:	2b00      	cmp	r3, #0
 800615e:	d072      	beq.n	8006246 <_dtoa_r+0x926>
 8006160:	4631      	mov	r1, r6
 8006162:	4650      	mov	r0, sl
 8006164:	f000 fd94 	bl	8006c90 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	da6c      	bge.n	8006246 <_dtoa_r+0x926>
 800616c:	2300      	movs	r3, #0
 800616e:	4651      	mov	r1, sl
 8006170:	220a      	movs	r2, #10
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fb28 	bl	80067c8 <__multadd>
 8006178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800617e:	4682      	mov	sl, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 81b0 	beq.w	80064e6 <_dtoa_r+0xbc6>
 8006186:	2300      	movs	r3, #0
 8006188:	4639      	mov	r1, r7
 800618a:	220a      	movs	r2, #10
 800618c:	4620      	mov	r0, r4
 800618e:	f000 fb1b 	bl	80067c8 <__multadd>
 8006192:	9b01      	ldr	r3, [sp, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	4607      	mov	r7, r0
 8006198:	f300 8096 	bgt.w	80062c8 <_dtoa_r+0x9a8>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	dc59      	bgt.n	8006256 <_dtoa_r+0x936>
 80061a2:	e091      	b.n	80062c8 <_dtoa_r+0x9a8>
 80061a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061aa:	e758      	b.n	800605e <_dtoa_r+0x73e>
 80061ac:	9b04      	ldr	r3, [sp, #16]
 80061ae:	1e5e      	subs	r6, r3, #1
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	42b3      	cmp	r3, r6
 80061b4:	bfbf      	itttt	lt
 80061b6:	9b08      	ldrlt	r3, [sp, #32]
 80061b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80061ba:	9608      	strlt	r6, [sp, #32]
 80061bc:	1af3      	sublt	r3, r6, r3
 80061be:	bfb4      	ite	lt
 80061c0:	18d2      	addlt	r2, r2, r3
 80061c2:	1b9e      	subge	r6, r3, r6
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	bfbc      	itt	lt
 80061c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80061ca:	2600      	movlt	r6, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bfb7      	itett	lt
 80061d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80061d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80061d8:	1a9d      	sublt	r5, r3, r2
 80061da:	2300      	movlt	r3, #0
 80061dc:	e741      	b.n	8006062 <_dtoa_r+0x742>
 80061de:	9e08      	ldr	r6, [sp, #32]
 80061e0:	9d05      	ldr	r5, [sp, #20]
 80061e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061e4:	e748      	b.n	8006078 <_dtoa_r+0x758>
 80061e6:	9a08      	ldr	r2, [sp, #32]
 80061e8:	e770      	b.n	80060cc <_dtoa_r+0x7ac>
 80061ea:	9b07      	ldr	r3, [sp, #28]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	dc19      	bgt.n	8006224 <_dtoa_r+0x904>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	b9bb      	cbnz	r3, 8006224 <_dtoa_r+0x904>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061fa:	b99b      	cbnz	r3, 8006224 <_dtoa_r+0x904>
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006202:	0d1b      	lsrs	r3, r3, #20
 8006204:	051b      	lsls	r3, r3, #20
 8006206:	b183      	cbz	r3, 800622a <_dtoa_r+0x90a>
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	3301      	adds	r3, #1
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	9b06      	ldr	r3, [sp, #24]
 8006210:	3301      	adds	r3, #1
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	f04f 0801 	mov.w	r8, #1
 8006218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	f47f af6f 	bne.w	80060fe <_dtoa_r+0x7de>
 8006220:	2001      	movs	r0, #1
 8006222:	e774      	b.n	800610e <_dtoa_r+0x7ee>
 8006224:	f04f 0800 	mov.w	r8, #0
 8006228:	e7f6      	b.n	8006218 <_dtoa_r+0x8f8>
 800622a:	4698      	mov	r8, r3
 800622c:	e7f4      	b.n	8006218 <_dtoa_r+0x8f8>
 800622e:	d082      	beq.n	8006136 <_dtoa_r+0x816>
 8006230:	9a05      	ldr	r2, [sp, #20]
 8006232:	331c      	adds	r3, #28
 8006234:	441a      	add	r2, r3
 8006236:	9205      	str	r2, [sp, #20]
 8006238:	9a06      	ldr	r2, [sp, #24]
 800623a:	441a      	add	r2, r3
 800623c:	441d      	add	r5, r3
 800623e:	9206      	str	r2, [sp, #24]
 8006240:	e779      	b.n	8006136 <_dtoa_r+0x816>
 8006242:	4603      	mov	r3, r0
 8006244:	e7f4      	b.n	8006230 <_dtoa_r+0x910>
 8006246:	9b04      	ldr	r3, [sp, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	dc37      	bgt.n	80062bc <_dtoa_r+0x99c>
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	2b02      	cmp	r3, #2
 8006250:	dd34      	ble.n	80062bc <_dtoa_r+0x99c>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	9301      	str	r3, [sp, #4]
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	b963      	cbnz	r3, 8006274 <_dtoa_r+0x954>
 800625a:	4631      	mov	r1, r6
 800625c:	2205      	movs	r2, #5
 800625e:	4620      	mov	r0, r4
 8006260:	f000 fab2 	bl	80067c8 <__multadd>
 8006264:	4601      	mov	r1, r0
 8006266:	4606      	mov	r6, r0
 8006268:	4650      	mov	r0, sl
 800626a:	f000 fd11 	bl	8006c90 <__mcmp>
 800626e:	2800      	cmp	r0, #0
 8006270:	f73f adbb 	bgt.w	8005dea <_dtoa_r+0x4ca>
 8006274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006276:	9d00      	ldr	r5, [sp, #0]
 8006278:	ea6f 0b03 	mvn.w	fp, r3
 800627c:	f04f 0800 	mov.w	r8, #0
 8006280:	4631      	mov	r1, r6
 8006282:	4620      	mov	r0, r4
 8006284:	f000 fa7e 	bl	8006784 <_Bfree>
 8006288:	2f00      	cmp	r7, #0
 800628a:	f43f aeab 	beq.w	8005fe4 <_dtoa_r+0x6c4>
 800628e:	f1b8 0f00 	cmp.w	r8, #0
 8006292:	d005      	beq.n	80062a0 <_dtoa_r+0x980>
 8006294:	45b8      	cmp	r8, r7
 8006296:	d003      	beq.n	80062a0 <_dtoa_r+0x980>
 8006298:	4641      	mov	r1, r8
 800629a:	4620      	mov	r0, r4
 800629c:	f000 fa72 	bl	8006784 <_Bfree>
 80062a0:	4639      	mov	r1, r7
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fa6e 	bl	8006784 <_Bfree>
 80062a8:	e69c      	b.n	8005fe4 <_dtoa_r+0x6c4>
 80062aa:	2600      	movs	r6, #0
 80062ac:	4637      	mov	r7, r6
 80062ae:	e7e1      	b.n	8006274 <_dtoa_r+0x954>
 80062b0:	46bb      	mov	fp, r7
 80062b2:	4637      	mov	r7, r6
 80062b4:	e599      	b.n	8005dea <_dtoa_r+0x4ca>
 80062b6:	bf00      	nop
 80062b8:	40240000 	.word	0x40240000
 80062bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80c8 	beq.w	8006454 <_dtoa_r+0xb34>
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	dd05      	ble.n	80062d8 <_dtoa_r+0x9b8>
 80062cc:	4639      	mov	r1, r7
 80062ce:	462a      	mov	r2, r5
 80062d0:	4620      	mov	r0, r4
 80062d2:	f000 fc71 	bl	8006bb8 <__lshift>
 80062d6:	4607      	mov	r7, r0
 80062d8:	f1b8 0f00 	cmp.w	r8, #0
 80062dc:	d05b      	beq.n	8006396 <_dtoa_r+0xa76>
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fa0f 	bl	8006704 <_Balloc>
 80062e6:	4605      	mov	r5, r0
 80062e8:	b928      	cbnz	r0, 80062f6 <_dtoa_r+0x9d6>
 80062ea:	4b83      	ldr	r3, [pc, #524]	; (80064f8 <_dtoa_r+0xbd8>)
 80062ec:	4602      	mov	r2, r0
 80062ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80062f2:	f7ff bb2e 	b.w	8005952 <_dtoa_r+0x32>
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	3202      	adds	r2, #2
 80062fa:	0092      	lsls	r2, r2, #2
 80062fc:	f107 010c 	add.w	r1, r7, #12
 8006300:	300c      	adds	r0, #12
 8006302:	f001 ff85 	bl	8008210 <memcpy>
 8006306:	2201      	movs	r2, #1
 8006308:	4629      	mov	r1, r5
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fc54 	bl	8006bb8 <__lshift>
 8006310:	9b00      	ldr	r3, [sp, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	e9dd 2300 	ldrd	r2, r3, [sp]
 800631a:	4413      	add	r3, r2
 800631c:	9308      	str	r3, [sp, #32]
 800631e:	9b02      	ldr	r3, [sp, #8]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	46b8      	mov	r8, r7
 8006326:	9306      	str	r3, [sp, #24]
 8006328:	4607      	mov	r7, r0
 800632a:	9b04      	ldr	r3, [sp, #16]
 800632c:	4631      	mov	r1, r6
 800632e:	3b01      	subs	r3, #1
 8006330:	4650      	mov	r0, sl
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	f7ff fa6c 	bl	8005810 <quorem>
 8006338:	4641      	mov	r1, r8
 800633a:	9002      	str	r0, [sp, #8]
 800633c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006340:	4650      	mov	r0, sl
 8006342:	f000 fca5 	bl	8006c90 <__mcmp>
 8006346:	463a      	mov	r2, r7
 8006348:	9005      	str	r0, [sp, #20]
 800634a:	4631      	mov	r1, r6
 800634c:	4620      	mov	r0, r4
 800634e:	f000 fcbb 	bl	8006cc8 <__mdiff>
 8006352:	68c2      	ldr	r2, [r0, #12]
 8006354:	4605      	mov	r5, r0
 8006356:	bb02      	cbnz	r2, 800639a <_dtoa_r+0xa7a>
 8006358:	4601      	mov	r1, r0
 800635a:	4650      	mov	r0, sl
 800635c:	f000 fc98 	bl	8006c90 <__mcmp>
 8006360:	4602      	mov	r2, r0
 8006362:	4629      	mov	r1, r5
 8006364:	4620      	mov	r0, r4
 8006366:	9209      	str	r2, [sp, #36]	; 0x24
 8006368:	f000 fa0c 	bl	8006784 <_Bfree>
 800636c:	9b07      	ldr	r3, [sp, #28]
 800636e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006370:	9d04      	ldr	r5, [sp, #16]
 8006372:	ea43 0102 	orr.w	r1, r3, r2
 8006376:	9b06      	ldr	r3, [sp, #24]
 8006378:	4319      	orrs	r1, r3
 800637a:	d110      	bne.n	800639e <_dtoa_r+0xa7e>
 800637c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006380:	d029      	beq.n	80063d6 <_dtoa_r+0xab6>
 8006382:	9b05      	ldr	r3, [sp, #20]
 8006384:	2b00      	cmp	r3, #0
 8006386:	dd02      	ble.n	800638e <_dtoa_r+0xa6e>
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800638e:	9b01      	ldr	r3, [sp, #4]
 8006390:	f883 9000 	strb.w	r9, [r3]
 8006394:	e774      	b.n	8006280 <_dtoa_r+0x960>
 8006396:	4638      	mov	r0, r7
 8006398:	e7ba      	b.n	8006310 <_dtoa_r+0x9f0>
 800639a:	2201      	movs	r2, #1
 800639c:	e7e1      	b.n	8006362 <_dtoa_r+0xa42>
 800639e:	9b05      	ldr	r3, [sp, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db04      	blt.n	80063ae <_dtoa_r+0xa8e>
 80063a4:	9907      	ldr	r1, [sp, #28]
 80063a6:	430b      	orrs	r3, r1
 80063a8:	9906      	ldr	r1, [sp, #24]
 80063aa:	430b      	orrs	r3, r1
 80063ac:	d120      	bne.n	80063f0 <_dtoa_r+0xad0>
 80063ae:	2a00      	cmp	r2, #0
 80063b0:	dded      	ble.n	800638e <_dtoa_r+0xa6e>
 80063b2:	4651      	mov	r1, sl
 80063b4:	2201      	movs	r2, #1
 80063b6:	4620      	mov	r0, r4
 80063b8:	f000 fbfe 	bl	8006bb8 <__lshift>
 80063bc:	4631      	mov	r1, r6
 80063be:	4682      	mov	sl, r0
 80063c0:	f000 fc66 	bl	8006c90 <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	dc03      	bgt.n	80063d0 <_dtoa_r+0xab0>
 80063c8:	d1e1      	bne.n	800638e <_dtoa_r+0xa6e>
 80063ca:	f019 0f01 	tst.w	r9, #1
 80063ce:	d0de      	beq.n	800638e <_dtoa_r+0xa6e>
 80063d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063d4:	d1d8      	bne.n	8006388 <_dtoa_r+0xa68>
 80063d6:	9a01      	ldr	r2, [sp, #4]
 80063d8:	2339      	movs	r3, #57	; 0x39
 80063da:	7013      	strb	r3, [r2, #0]
 80063dc:	462b      	mov	r3, r5
 80063de:	461d      	mov	r5, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063e6:	2a39      	cmp	r2, #57	; 0x39
 80063e8:	d06c      	beq.n	80064c4 <_dtoa_r+0xba4>
 80063ea:	3201      	adds	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e747      	b.n	8006280 <_dtoa_r+0x960>
 80063f0:	2a00      	cmp	r2, #0
 80063f2:	dd07      	ble.n	8006404 <_dtoa_r+0xae4>
 80063f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063f8:	d0ed      	beq.n	80063d6 <_dtoa_r+0xab6>
 80063fa:	9a01      	ldr	r2, [sp, #4]
 80063fc:	f109 0301 	add.w	r3, r9, #1
 8006400:	7013      	strb	r3, [r2, #0]
 8006402:	e73d      	b.n	8006280 <_dtoa_r+0x960>
 8006404:	9b04      	ldr	r3, [sp, #16]
 8006406:	9a08      	ldr	r2, [sp, #32]
 8006408:	f803 9c01 	strb.w	r9, [r3, #-1]
 800640c:	4293      	cmp	r3, r2
 800640e:	d043      	beq.n	8006498 <_dtoa_r+0xb78>
 8006410:	4651      	mov	r1, sl
 8006412:	2300      	movs	r3, #0
 8006414:	220a      	movs	r2, #10
 8006416:	4620      	mov	r0, r4
 8006418:	f000 f9d6 	bl	80067c8 <__multadd>
 800641c:	45b8      	cmp	r8, r7
 800641e:	4682      	mov	sl, r0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f04f 020a 	mov.w	r2, #10
 8006428:	4641      	mov	r1, r8
 800642a:	4620      	mov	r0, r4
 800642c:	d107      	bne.n	800643e <_dtoa_r+0xb1e>
 800642e:	f000 f9cb 	bl	80067c8 <__multadd>
 8006432:	4680      	mov	r8, r0
 8006434:	4607      	mov	r7, r0
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	3301      	adds	r3, #1
 800643a:	9304      	str	r3, [sp, #16]
 800643c:	e775      	b.n	800632a <_dtoa_r+0xa0a>
 800643e:	f000 f9c3 	bl	80067c8 <__multadd>
 8006442:	4639      	mov	r1, r7
 8006444:	4680      	mov	r8, r0
 8006446:	2300      	movs	r3, #0
 8006448:	220a      	movs	r2, #10
 800644a:	4620      	mov	r0, r4
 800644c:	f000 f9bc 	bl	80067c8 <__multadd>
 8006450:	4607      	mov	r7, r0
 8006452:	e7f0      	b.n	8006436 <_dtoa_r+0xb16>
 8006454:	9b04      	ldr	r3, [sp, #16]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	9d00      	ldr	r5, [sp, #0]
 800645a:	4631      	mov	r1, r6
 800645c:	4650      	mov	r0, sl
 800645e:	f7ff f9d7 	bl	8005810 <quorem>
 8006462:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006466:	9b00      	ldr	r3, [sp, #0]
 8006468:	f805 9b01 	strb.w	r9, [r5], #1
 800646c:	1aea      	subs	r2, r5, r3
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	4293      	cmp	r3, r2
 8006472:	dd07      	ble.n	8006484 <_dtoa_r+0xb64>
 8006474:	4651      	mov	r1, sl
 8006476:	2300      	movs	r3, #0
 8006478:	220a      	movs	r2, #10
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f9a4 	bl	80067c8 <__multadd>
 8006480:	4682      	mov	sl, r0
 8006482:	e7ea      	b.n	800645a <_dtoa_r+0xb3a>
 8006484:	9b01      	ldr	r3, [sp, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfc8      	it	gt
 800648a:	461d      	movgt	r5, r3
 800648c:	9b00      	ldr	r3, [sp, #0]
 800648e:	bfd8      	it	le
 8006490:	2501      	movle	r5, #1
 8006492:	441d      	add	r5, r3
 8006494:	f04f 0800 	mov.w	r8, #0
 8006498:	4651      	mov	r1, sl
 800649a:	2201      	movs	r2, #1
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fb8b 	bl	8006bb8 <__lshift>
 80064a2:	4631      	mov	r1, r6
 80064a4:	4682      	mov	sl, r0
 80064a6:	f000 fbf3 	bl	8006c90 <__mcmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	dc96      	bgt.n	80063dc <_dtoa_r+0xabc>
 80064ae:	d102      	bne.n	80064b6 <_dtoa_r+0xb96>
 80064b0:	f019 0f01 	tst.w	r9, #1
 80064b4:	d192      	bne.n	80063dc <_dtoa_r+0xabc>
 80064b6:	462b      	mov	r3, r5
 80064b8:	461d      	mov	r5, r3
 80064ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064be:	2a30      	cmp	r2, #48	; 0x30
 80064c0:	d0fa      	beq.n	80064b8 <_dtoa_r+0xb98>
 80064c2:	e6dd      	b.n	8006280 <_dtoa_r+0x960>
 80064c4:	9a00      	ldr	r2, [sp, #0]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d189      	bne.n	80063de <_dtoa_r+0xabe>
 80064ca:	f10b 0b01 	add.w	fp, fp, #1
 80064ce:	2331      	movs	r3, #49	; 0x31
 80064d0:	e796      	b.n	8006400 <_dtoa_r+0xae0>
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <_dtoa_r+0xbdc>)
 80064d4:	f7ff ba99 	b.w	8005a0a <_dtoa_r+0xea>
 80064d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f47f aa6d 	bne.w	80059ba <_dtoa_r+0x9a>
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <_dtoa_r+0xbe0>)
 80064e2:	f7ff ba92 	b.w	8005a0a <_dtoa_r+0xea>
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dcb5      	bgt.n	8006458 <_dtoa_r+0xb38>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	f73f aeb1 	bgt.w	8006256 <_dtoa_r+0x936>
 80064f4:	e7b0      	b.n	8006458 <_dtoa_r+0xb38>
 80064f6:	bf00      	nop
 80064f8:	08009091 	.word	0x08009091
 80064fc:	08008fec 	.word	0x08008fec
 8006500:	08009015 	.word	0x08009015

08006504 <_free_r>:
 8006504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006506:	2900      	cmp	r1, #0
 8006508:	d044      	beq.n	8006594 <_free_r+0x90>
 800650a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650e:	9001      	str	r0, [sp, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f1a1 0404 	sub.w	r4, r1, #4
 8006516:	bfb8      	it	lt
 8006518:	18e4      	addlt	r4, r4, r3
 800651a:	f000 f8e7 	bl	80066ec <__malloc_lock>
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <_free_r+0x94>)
 8006520:	9801      	ldr	r0, [sp, #4]
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	b933      	cbnz	r3, 8006534 <_free_r+0x30>
 8006526:	6063      	str	r3, [r4, #4]
 8006528:	6014      	str	r4, [r2, #0]
 800652a:	b003      	add	sp, #12
 800652c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006530:	f000 b8e2 	b.w	80066f8 <__malloc_unlock>
 8006534:	42a3      	cmp	r3, r4
 8006536:	d908      	bls.n	800654a <_free_r+0x46>
 8006538:	6825      	ldr	r5, [r4, #0]
 800653a:	1961      	adds	r1, r4, r5
 800653c:	428b      	cmp	r3, r1
 800653e:	bf01      	itttt	eq
 8006540:	6819      	ldreq	r1, [r3, #0]
 8006542:	685b      	ldreq	r3, [r3, #4]
 8006544:	1949      	addeq	r1, r1, r5
 8006546:	6021      	streq	r1, [r4, #0]
 8006548:	e7ed      	b.n	8006526 <_free_r+0x22>
 800654a:	461a      	mov	r2, r3
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	b10b      	cbz	r3, 8006554 <_free_r+0x50>
 8006550:	42a3      	cmp	r3, r4
 8006552:	d9fa      	bls.n	800654a <_free_r+0x46>
 8006554:	6811      	ldr	r1, [r2, #0]
 8006556:	1855      	adds	r5, r2, r1
 8006558:	42a5      	cmp	r5, r4
 800655a:	d10b      	bne.n	8006574 <_free_r+0x70>
 800655c:	6824      	ldr	r4, [r4, #0]
 800655e:	4421      	add	r1, r4
 8006560:	1854      	adds	r4, r2, r1
 8006562:	42a3      	cmp	r3, r4
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	d1e0      	bne.n	800652a <_free_r+0x26>
 8006568:	681c      	ldr	r4, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	6053      	str	r3, [r2, #4]
 800656e:	440c      	add	r4, r1
 8006570:	6014      	str	r4, [r2, #0]
 8006572:	e7da      	b.n	800652a <_free_r+0x26>
 8006574:	d902      	bls.n	800657c <_free_r+0x78>
 8006576:	230c      	movs	r3, #12
 8006578:	6003      	str	r3, [r0, #0]
 800657a:	e7d6      	b.n	800652a <_free_r+0x26>
 800657c:	6825      	ldr	r5, [r4, #0]
 800657e:	1961      	adds	r1, r4, r5
 8006580:	428b      	cmp	r3, r1
 8006582:	bf04      	itt	eq
 8006584:	6819      	ldreq	r1, [r3, #0]
 8006586:	685b      	ldreq	r3, [r3, #4]
 8006588:	6063      	str	r3, [r4, #4]
 800658a:	bf04      	itt	eq
 800658c:	1949      	addeq	r1, r1, r5
 800658e:	6021      	streq	r1, [r4, #0]
 8006590:	6054      	str	r4, [r2, #4]
 8006592:	e7ca      	b.n	800652a <_free_r+0x26>
 8006594:	b003      	add	sp, #12
 8006596:	bd30      	pop	{r4, r5, pc}
 8006598:	2000040c 	.word	0x2000040c

0800659c <malloc>:
 800659c:	4b02      	ldr	r3, [pc, #8]	; (80065a8 <malloc+0xc>)
 800659e:	4601      	mov	r1, r0
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f000 b823 	b.w	80065ec <_malloc_r>
 80065a6:	bf00      	nop
 80065a8:	20000064 	.word	0x20000064

080065ac <sbrk_aligned>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4e0e      	ldr	r6, [pc, #56]	; (80065e8 <sbrk_aligned+0x3c>)
 80065b0:	460c      	mov	r4, r1
 80065b2:	6831      	ldr	r1, [r6, #0]
 80065b4:	4605      	mov	r5, r0
 80065b6:	b911      	cbnz	r1, 80065be <sbrk_aligned+0x12>
 80065b8:	f001 fe1a 	bl	80081f0 <_sbrk_r>
 80065bc:	6030      	str	r0, [r6, #0]
 80065be:	4621      	mov	r1, r4
 80065c0:	4628      	mov	r0, r5
 80065c2:	f001 fe15 	bl	80081f0 <_sbrk_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	d00a      	beq.n	80065e0 <sbrk_aligned+0x34>
 80065ca:	1cc4      	adds	r4, r0, #3
 80065cc:	f024 0403 	bic.w	r4, r4, #3
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d007      	beq.n	80065e4 <sbrk_aligned+0x38>
 80065d4:	1a21      	subs	r1, r4, r0
 80065d6:	4628      	mov	r0, r5
 80065d8:	f001 fe0a 	bl	80081f0 <_sbrk_r>
 80065dc:	3001      	adds	r0, #1
 80065de:	d101      	bne.n	80065e4 <sbrk_aligned+0x38>
 80065e0:	f04f 34ff 	mov.w	r4, #4294967295
 80065e4:	4620      	mov	r0, r4
 80065e6:	bd70      	pop	{r4, r5, r6, pc}
 80065e8:	20000410 	.word	0x20000410

080065ec <_malloc_r>:
 80065ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f0:	1ccd      	adds	r5, r1, #3
 80065f2:	f025 0503 	bic.w	r5, r5, #3
 80065f6:	3508      	adds	r5, #8
 80065f8:	2d0c      	cmp	r5, #12
 80065fa:	bf38      	it	cc
 80065fc:	250c      	movcc	r5, #12
 80065fe:	2d00      	cmp	r5, #0
 8006600:	4607      	mov	r7, r0
 8006602:	db01      	blt.n	8006608 <_malloc_r+0x1c>
 8006604:	42a9      	cmp	r1, r5
 8006606:	d905      	bls.n	8006614 <_malloc_r+0x28>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	2600      	movs	r6, #0
 800660e:	4630      	mov	r0, r6
 8006610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80066e8 <_malloc_r+0xfc>
 8006618:	f000 f868 	bl	80066ec <__malloc_lock>
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	461c      	mov	r4, r3
 8006622:	bb5c      	cbnz	r4, 800667c <_malloc_r+0x90>
 8006624:	4629      	mov	r1, r5
 8006626:	4638      	mov	r0, r7
 8006628:	f7ff ffc0 	bl	80065ac <sbrk_aligned>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	4604      	mov	r4, r0
 8006630:	d155      	bne.n	80066de <_malloc_r+0xf2>
 8006632:	f8d8 4000 	ldr.w	r4, [r8]
 8006636:	4626      	mov	r6, r4
 8006638:	2e00      	cmp	r6, #0
 800663a:	d145      	bne.n	80066c8 <_malloc_r+0xdc>
 800663c:	2c00      	cmp	r4, #0
 800663e:	d048      	beq.n	80066d2 <_malloc_r+0xe6>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	4631      	mov	r1, r6
 8006644:	4638      	mov	r0, r7
 8006646:	eb04 0903 	add.w	r9, r4, r3
 800664a:	f001 fdd1 	bl	80081f0 <_sbrk_r>
 800664e:	4581      	cmp	r9, r0
 8006650:	d13f      	bne.n	80066d2 <_malloc_r+0xe6>
 8006652:	6821      	ldr	r1, [r4, #0]
 8006654:	1a6d      	subs	r5, r5, r1
 8006656:	4629      	mov	r1, r5
 8006658:	4638      	mov	r0, r7
 800665a:	f7ff ffa7 	bl	80065ac <sbrk_aligned>
 800665e:	3001      	adds	r0, #1
 8006660:	d037      	beq.n	80066d2 <_malloc_r+0xe6>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	442b      	add	r3, r5
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	f8d8 3000 	ldr.w	r3, [r8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d038      	beq.n	80066e2 <_malloc_r+0xf6>
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	42a2      	cmp	r2, r4
 8006674:	d12b      	bne.n	80066ce <_malloc_r+0xe2>
 8006676:	2200      	movs	r2, #0
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	e00f      	b.n	800669c <_malloc_r+0xb0>
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	1b52      	subs	r2, r2, r5
 8006680:	d41f      	bmi.n	80066c2 <_malloc_r+0xd6>
 8006682:	2a0b      	cmp	r2, #11
 8006684:	d917      	bls.n	80066b6 <_malloc_r+0xca>
 8006686:	1961      	adds	r1, r4, r5
 8006688:	42a3      	cmp	r3, r4
 800668a:	6025      	str	r5, [r4, #0]
 800668c:	bf18      	it	ne
 800668e:	6059      	strne	r1, [r3, #4]
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	bf08      	it	eq
 8006694:	f8c8 1000 	streq.w	r1, [r8]
 8006698:	5162      	str	r2, [r4, r5]
 800669a:	604b      	str	r3, [r1, #4]
 800669c:	4638      	mov	r0, r7
 800669e:	f104 060b 	add.w	r6, r4, #11
 80066a2:	f000 f829 	bl	80066f8 <__malloc_unlock>
 80066a6:	f026 0607 	bic.w	r6, r6, #7
 80066aa:	1d23      	adds	r3, r4, #4
 80066ac:	1af2      	subs	r2, r6, r3
 80066ae:	d0ae      	beq.n	800660e <_malloc_r+0x22>
 80066b0:	1b9b      	subs	r3, r3, r6
 80066b2:	50a3      	str	r3, [r4, r2]
 80066b4:	e7ab      	b.n	800660e <_malloc_r+0x22>
 80066b6:	42a3      	cmp	r3, r4
 80066b8:	6862      	ldr	r2, [r4, #4]
 80066ba:	d1dd      	bne.n	8006678 <_malloc_r+0x8c>
 80066bc:	f8c8 2000 	str.w	r2, [r8]
 80066c0:	e7ec      	b.n	800669c <_malloc_r+0xb0>
 80066c2:	4623      	mov	r3, r4
 80066c4:	6864      	ldr	r4, [r4, #4]
 80066c6:	e7ac      	b.n	8006622 <_malloc_r+0x36>
 80066c8:	4634      	mov	r4, r6
 80066ca:	6876      	ldr	r6, [r6, #4]
 80066cc:	e7b4      	b.n	8006638 <_malloc_r+0x4c>
 80066ce:	4613      	mov	r3, r2
 80066d0:	e7cc      	b.n	800666c <_malloc_r+0x80>
 80066d2:	230c      	movs	r3, #12
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	4638      	mov	r0, r7
 80066d8:	f000 f80e 	bl	80066f8 <__malloc_unlock>
 80066dc:	e797      	b.n	800660e <_malloc_r+0x22>
 80066de:	6025      	str	r5, [r4, #0]
 80066e0:	e7dc      	b.n	800669c <_malloc_r+0xb0>
 80066e2:	605b      	str	r3, [r3, #4]
 80066e4:	deff      	udf	#255	; 0xff
 80066e6:	bf00      	nop
 80066e8:	2000040c 	.word	0x2000040c

080066ec <__malloc_lock>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__malloc_lock+0x8>)
 80066ee:	f7ff b886 	b.w	80057fe <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	20000408 	.word	0x20000408

080066f8 <__malloc_unlock>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__malloc_unlock+0x8>)
 80066fa:	f7ff b881 	b.w	8005800 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	20000408 	.word	0x20000408

08006704 <_Balloc>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	69c6      	ldr	r6, [r0, #28]
 8006708:	4604      	mov	r4, r0
 800670a:	460d      	mov	r5, r1
 800670c:	b976      	cbnz	r6, 800672c <_Balloc+0x28>
 800670e:	2010      	movs	r0, #16
 8006710:	f7ff ff44 	bl	800659c <malloc>
 8006714:	4602      	mov	r2, r0
 8006716:	61e0      	str	r0, [r4, #28]
 8006718:	b920      	cbnz	r0, 8006724 <_Balloc+0x20>
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <_Balloc+0x78>)
 800671c:	4818      	ldr	r0, [pc, #96]	; (8006780 <_Balloc+0x7c>)
 800671e:	216b      	movs	r1, #107	; 0x6b
 8006720:	f001 fd8e 	bl	8008240 <__assert_func>
 8006724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006728:	6006      	str	r6, [r0, #0]
 800672a:	60c6      	str	r6, [r0, #12]
 800672c:	69e6      	ldr	r6, [r4, #28]
 800672e:	68f3      	ldr	r3, [r6, #12]
 8006730:	b183      	cbz	r3, 8006754 <_Balloc+0x50>
 8006732:	69e3      	ldr	r3, [r4, #28]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800673a:	b9b8      	cbnz	r0, 800676c <_Balloc+0x68>
 800673c:	2101      	movs	r1, #1
 800673e:	fa01 f605 	lsl.w	r6, r1, r5
 8006742:	1d72      	adds	r2, r6, #5
 8006744:	0092      	lsls	r2, r2, #2
 8006746:	4620      	mov	r0, r4
 8006748:	f001 fd98 	bl	800827c <_calloc_r>
 800674c:	b160      	cbz	r0, 8006768 <_Balloc+0x64>
 800674e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006752:	e00e      	b.n	8006772 <_Balloc+0x6e>
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	2104      	movs	r1, #4
 8006758:	4620      	mov	r0, r4
 800675a:	f001 fd8f 	bl	800827c <_calloc_r>
 800675e:	69e3      	ldr	r3, [r4, #28]
 8006760:	60f0      	str	r0, [r6, #12]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e4      	bne.n	8006732 <_Balloc+0x2e>
 8006768:	2000      	movs	r0, #0
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	6802      	ldr	r2, [r0, #0]
 800676e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006772:	2300      	movs	r3, #0
 8006774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006778:	e7f7      	b.n	800676a <_Balloc+0x66>
 800677a:	bf00      	nop
 800677c:	08009022 	.word	0x08009022
 8006780:	080090a2 	.word	0x080090a2

08006784 <_Bfree>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	69c6      	ldr	r6, [r0, #28]
 8006788:	4605      	mov	r5, r0
 800678a:	460c      	mov	r4, r1
 800678c:	b976      	cbnz	r6, 80067ac <_Bfree+0x28>
 800678e:	2010      	movs	r0, #16
 8006790:	f7ff ff04 	bl	800659c <malloc>
 8006794:	4602      	mov	r2, r0
 8006796:	61e8      	str	r0, [r5, #28]
 8006798:	b920      	cbnz	r0, 80067a4 <_Bfree+0x20>
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <_Bfree+0x3c>)
 800679c:	4809      	ldr	r0, [pc, #36]	; (80067c4 <_Bfree+0x40>)
 800679e:	218f      	movs	r1, #143	; 0x8f
 80067a0:	f001 fd4e 	bl	8008240 <__assert_func>
 80067a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a8:	6006      	str	r6, [r0, #0]
 80067aa:	60c6      	str	r6, [r0, #12]
 80067ac:	b13c      	cbz	r4, 80067be <_Bfree+0x3a>
 80067ae:	69eb      	ldr	r3, [r5, #28]
 80067b0:	6862      	ldr	r2, [r4, #4]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067b8:	6021      	str	r1, [r4, #0]
 80067ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	08009022 	.word	0x08009022
 80067c4:	080090a2 	.word	0x080090a2

080067c8 <__multadd>:
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067cc:	690d      	ldr	r5, [r1, #16]
 80067ce:	4607      	mov	r7, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	461e      	mov	r6, r3
 80067d4:	f101 0c14 	add.w	ip, r1, #20
 80067d8:	2000      	movs	r0, #0
 80067da:	f8dc 3000 	ldr.w	r3, [ip]
 80067de:	b299      	uxth	r1, r3
 80067e0:	fb02 6101 	mla	r1, r2, r1, r6
 80067e4:	0c1e      	lsrs	r6, r3, #16
 80067e6:	0c0b      	lsrs	r3, r1, #16
 80067e8:	fb02 3306 	mla	r3, r2, r6, r3
 80067ec:	b289      	uxth	r1, r1
 80067ee:	3001      	adds	r0, #1
 80067f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067f4:	4285      	cmp	r5, r0
 80067f6:	f84c 1b04 	str.w	r1, [ip], #4
 80067fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067fe:	dcec      	bgt.n	80067da <__multadd+0x12>
 8006800:	b30e      	cbz	r6, 8006846 <__multadd+0x7e>
 8006802:	68a3      	ldr	r3, [r4, #8]
 8006804:	42ab      	cmp	r3, r5
 8006806:	dc19      	bgt.n	800683c <__multadd+0x74>
 8006808:	6861      	ldr	r1, [r4, #4]
 800680a:	4638      	mov	r0, r7
 800680c:	3101      	adds	r1, #1
 800680e:	f7ff ff79 	bl	8006704 <_Balloc>
 8006812:	4680      	mov	r8, r0
 8006814:	b928      	cbnz	r0, 8006822 <__multadd+0x5a>
 8006816:	4602      	mov	r2, r0
 8006818:	4b0c      	ldr	r3, [pc, #48]	; (800684c <__multadd+0x84>)
 800681a:	480d      	ldr	r0, [pc, #52]	; (8006850 <__multadd+0x88>)
 800681c:	21ba      	movs	r1, #186	; 0xba
 800681e:	f001 fd0f 	bl	8008240 <__assert_func>
 8006822:	6922      	ldr	r2, [r4, #16]
 8006824:	3202      	adds	r2, #2
 8006826:	f104 010c 	add.w	r1, r4, #12
 800682a:	0092      	lsls	r2, r2, #2
 800682c:	300c      	adds	r0, #12
 800682e:	f001 fcef 	bl	8008210 <memcpy>
 8006832:	4621      	mov	r1, r4
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff ffa5 	bl	8006784 <_Bfree>
 800683a:	4644      	mov	r4, r8
 800683c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006840:	3501      	adds	r5, #1
 8006842:	615e      	str	r6, [r3, #20]
 8006844:	6125      	str	r5, [r4, #16]
 8006846:	4620      	mov	r0, r4
 8006848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800684c:	08009091 	.word	0x08009091
 8006850:	080090a2 	.word	0x080090a2

08006854 <__s2b>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	460c      	mov	r4, r1
 800685a:	4615      	mov	r5, r2
 800685c:	461f      	mov	r7, r3
 800685e:	2209      	movs	r2, #9
 8006860:	3308      	adds	r3, #8
 8006862:	4606      	mov	r6, r0
 8006864:	fb93 f3f2 	sdiv	r3, r3, r2
 8006868:	2100      	movs	r1, #0
 800686a:	2201      	movs	r2, #1
 800686c:	429a      	cmp	r2, r3
 800686e:	db09      	blt.n	8006884 <__s2b+0x30>
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ff47 	bl	8006704 <_Balloc>
 8006876:	b940      	cbnz	r0, 800688a <__s2b+0x36>
 8006878:	4602      	mov	r2, r0
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <__s2b+0x8c>)
 800687c:	4819      	ldr	r0, [pc, #100]	; (80068e4 <__s2b+0x90>)
 800687e:	21d3      	movs	r1, #211	; 0xd3
 8006880:	f001 fcde 	bl	8008240 <__assert_func>
 8006884:	0052      	lsls	r2, r2, #1
 8006886:	3101      	adds	r1, #1
 8006888:	e7f0      	b.n	800686c <__s2b+0x18>
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	6143      	str	r3, [r0, #20]
 800688e:	2d09      	cmp	r5, #9
 8006890:	f04f 0301 	mov.w	r3, #1
 8006894:	6103      	str	r3, [r0, #16]
 8006896:	dd16      	ble.n	80068c6 <__s2b+0x72>
 8006898:	f104 0909 	add.w	r9, r4, #9
 800689c:	46c8      	mov	r8, r9
 800689e:	442c      	add	r4, r5
 80068a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068a4:	4601      	mov	r1, r0
 80068a6:	3b30      	subs	r3, #48	; 0x30
 80068a8:	220a      	movs	r2, #10
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff ff8c 	bl	80067c8 <__multadd>
 80068b0:	45a0      	cmp	r8, r4
 80068b2:	d1f5      	bne.n	80068a0 <__s2b+0x4c>
 80068b4:	f1a5 0408 	sub.w	r4, r5, #8
 80068b8:	444c      	add	r4, r9
 80068ba:	1b2d      	subs	r5, r5, r4
 80068bc:	1963      	adds	r3, r4, r5
 80068be:	42bb      	cmp	r3, r7
 80068c0:	db04      	blt.n	80068cc <__s2b+0x78>
 80068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c6:	340a      	adds	r4, #10
 80068c8:	2509      	movs	r5, #9
 80068ca:	e7f6      	b.n	80068ba <__s2b+0x66>
 80068cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068d0:	4601      	mov	r1, r0
 80068d2:	3b30      	subs	r3, #48	; 0x30
 80068d4:	220a      	movs	r2, #10
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff ff76 	bl	80067c8 <__multadd>
 80068dc:	e7ee      	b.n	80068bc <__s2b+0x68>
 80068de:	bf00      	nop
 80068e0:	08009091 	.word	0x08009091
 80068e4:	080090a2 	.word	0x080090a2

080068e8 <__hi0bits>:
 80068e8:	0c03      	lsrs	r3, r0, #16
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	b9d3      	cbnz	r3, 8006924 <__hi0bits+0x3c>
 80068ee:	0400      	lsls	r0, r0, #16
 80068f0:	2310      	movs	r3, #16
 80068f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068f6:	bf04      	itt	eq
 80068f8:	0200      	lsleq	r0, r0, #8
 80068fa:	3308      	addeq	r3, #8
 80068fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006900:	bf04      	itt	eq
 8006902:	0100      	lsleq	r0, r0, #4
 8006904:	3304      	addeq	r3, #4
 8006906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800690a:	bf04      	itt	eq
 800690c:	0080      	lsleq	r0, r0, #2
 800690e:	3302      	addeq	r3, #2
 8006910:	2800      	cmp	r0, #0
 8006912:	db05      	blt.n	8006920 <__hi0bits+0x38>
 8006914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006918:	f103 0301 	add.w	r3, r3, #1
 800691c:	bf08      	it	eq
 800691e:	2320      	moveq	r3, #32
 8006920:	4618      	mov	r0, r3
 8006922:	4770      	bx	lr
 8006924:	2300      	movs	r3, #0
 8006926:	e7e4      	b.n	80068f2 <__hi0bits+0xa>

08006928 <__lo0bits>:
 8006928:	6803      	ldr	r3, [r0, #0]
 800692a:	f013 0207 	ands.w	r2, r3, #7
 800692e:	d00c      	beq.n	800694a <__lo0bits+0x22>
 8006930:	07d9      	lsls	r1, r3, #31
 8006932:	d422      	bmi.n	800697a <__lo0bits+0x52>
 8006934:	079a      	lsls	r2, r3, #30
 8006936:	bf49      	itett	mi
 8006938:	085b      	lsrmi	r3, r3, #1
 800693a:	089b      	lsrpl	r3, r3, #2
 800693c:	6003      	strmi	r3, [r0, #0]
 800693e:	2201      	movmi	r2, #1
 8006940:	bf5c      	itt	pl
 8006942:	6003      	strpl	r3, [r0, #0]
 8006944:	2202      	movpl	r2, #2
 8006946:	4610      	mov	r0, r2
 8006948:	4770      	bx	lr
 800694a:	b299      	uxth	r1, r3
 800694c:	b909      	cbnz	r1, 8006952 <__lo0bits+0x2a>
 800694e:	0c1b      	lsrs	r3, r3, #16
 8006950:	2210      	movs	r2, #16
 8006952:	b2d9      	uxtb	r1, r3
 8006954:	b909      	cbnz	r1, 800695a <__lo0bits+0x32>
 8006956:	3208      	adds	r2, #8
 8006958:	0a1b      	lsrs	r3, r3, #8
 800695a:	0719      	lsls	r1, r3, #28
 800695c:	bf04      	itt	eq
 800695e:	091b      	lsreq	r3, r3, #4
 8006960:	3204      	addeq	r2, #4
 8006962:	0799      	lsls	r1, r3, #30
 8006964:	bf04      	itt	eq
 8006966:	089b      	lsreq	r3, r3, #2
 8006968:	3202      	addeq	r2, #2
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	d403      	bmi.n	8006976 <__lo0bits+0x4e>
 800696e:	085b      	lsrs	r3, r3, #1
 8006970:	f102 0201 	add.w	r2, r2, #1
 8006974:	d003      	beq.n	800697e <__lo0bits+0x56>
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	e7e5      	b.n	8006946 <__lo0bits+0x1e>
 800697a:	2200      	movs	r2, #0
 800697c:	e7e3      	b.n	8006946 <__lo0bits+0x1e>
 800697e:	2220      	movs	r2, #32
 8006980:	e7e1      	b.n	8006946 <__lo0bits+0x1e>
	...

08006984 <__i2b>:
 8006984:	b510      	push	{r4, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	2101      	movs	r1, #1
 800698a:	f7ff febb 	bl	8006704 <_Balloc>
 800698e:	4602      	mov	r2, r0
 8006990:	b928      	cbnz	r0, 800699e <__i2b+0x1a>
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <__i2b+0x24>)
 8006994:	4805      	ldr	r0, [pc, #20]	; (80069ac <__i2b+0x28>)
 8006996:	f240 1145 	movw	r1, #325	; 0x145
 800699a:	f001 fc51 	bl	8008240 <__assert_func>
 800699e:	2301      	movs	r3, #1
 80069a0:	6144      	str	r4, [r0, #20]
 80069a2:	6103      	str	r3, [r0, #16]
 80069a4:	bd10      	pop	{r4, pc}
 80069a6:	bf00      	nop
 80069a8:	08009091 	.word	0x08009091
 80069ac:	080090a2 	.word	0x080090a2

080069b0 <__multiply>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	4691      	mov	r9, r2
 80069b6:	690a      	ldr	r2, [r1, #16]
 80069b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069bc:	429a      	cmp	r2, r3
 80069be:	bfb8      	it	lt
 80069c0:	460b      	movlt	r3, r1
 80069c2:	460c      	mov	r4, r1
 80069c4:	bfbc      	itt	lt
 80069c6:	464c      	movlt	r4, r9
 80069c8:	4699      	movlt	r9, r3
 80069ca:	6927      	ldr	r7, [r4, #16]
 80069cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069d0:	68a3      	ldr	r3, [r4, #8]
 80069d2:	6861      	ldr	r1, [r4, #4]
 80069d4:	eb07 060a 	add.w	r6, r7, sl
 80069d8:	42b3      	cmp	r3, r6
 80069da:	b085      	sub	sp, #20
 80069dc:	bfb8      	it	lt
 80069de:	3101      	addlt	r1, #1
 80069e0:	f7ff fe90 	bl	8006704 <_Balloc>
 80069e4:	b930      	cbnz	r0, 80069f4 <__multiply+0x44>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b44      	ldr	r3, [pc, #272]	; (8006afc <__multiply+0x14c>)
 80069ea:	4845      	ldr	r0, [pc, #276]	; (8006b00 <__multiply+0x150>)
 80069ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80069f0:	f001 fc26 	bl	8008240 <__assert_func>
 80069f4:	f100 0514 	add.w	r5, r0, #20
 80069f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069fc:	462b      	mov	r3, r5
 80069fe:	2200      	movs	r2, #0
 8006a00:	4543      	cmp	r3, r8
 8006a02:	d321      	bcc.n	8006a48 <__multiply+0x98>
 8006a04:	f104 0314 	add.w	r3, r4, #20
 8006a08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a0c:	f109 0314 	add.w	r3, r9, #20
 8006a10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a14:	9202      	str	r2, [sp, #8]
 8006a16:	1b3a      	subs	r2, r7, r4
 8006a18:	3a15      	subs	r2, #21
 8006a1a:	f022 0203 	bic.w	r2, r2, #3
 8006a1e:	3204      	adds	r2, #4
 8006a20:	f104 0115 	add.w	r1, r4, #21
 8006a24:	428f      	cmp	r7, r1
 8006a26:	bf38      	it	cc
 8006a28:	2204      	movcc	r2, #4
 8006a2a:	9201      	str	r2, [sp, #4]
 8006a2c:	9a02      	ldr	r2, [sp, #8]
 8006a2e:	9303      	str	r3, [sp, #12]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d80c      	bhi.n	8006a4e <__multiply+0x9e>
 8006a34:	2e00      	cmp	r6, #0
 8006a36:	dd03      	ble.n	8006a40 <__multiply+0x90>
 8006a38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05b      	beq.n	8006af8 <__multiply+0x148>
 8006a40:	6106      	str	r6, [r0, #16]
 8006a42:	b005      	add	sp, #20
 8006a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a48:	f843 2b04 	str.w	r2, [r3], #4
 8006a4c:	e7d8      	b.n	8006a00 <__multiply+0x50>
 8006a4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a52:	f1ba 0f00 	cmp.w	sl, #0
 8006a56:	d024      	beq.n	8006aa2 <__multiply+0xf2>
 8006a58:	f104 0e14 	add.w	lr, r4, #20
 8006a5c:	46a9      	mov	r9, r5
 8006a5e:	f04f 0c00 	mov.w	ip, #0
 8006a62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a66:	f8d9 1000 	ldr.w	r1, [r9]
 8006a6a:	fa1f fb82 	uxth.w	fp, r2
 8006a6e:	b289      	uxth	r1, r1
 8006a70:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a78:	f8d9 2000 	ldr.w	r2, [r9]
 8006a7c:	4461      	add	r1, ip
 8006a7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a82:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a8a:	b289      	uxth	r1, r1
 8006a8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a90:	4577      	cmp	r7, lr
 8006a92:	f849 1b04 	str.w	r1, [r9], #4
 8006a96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a9a:	d8e2      	bhi.n	8006a62 <__multiply+0xb2>
 8006a9c:	9a01      	ldr	r2, [sp, #4]
 8006a9e:	f845 c002 	str.w	ip, [r5, r2]
 8006aa2:	9a03      	ldr	r2, [sp, #12]
 8006aa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	f1b9 0f00 	cmp.w	r9, #0
 8006aae:	d021      	beq.n	8006af4 <__multiply+0x144>
 8006ab0:	6829      	ldr	r1, [r5, #0]
 8006ab2:	f104 0c14 	add.w	ip, r4, #20
 8006ab6:	46ae      	mov	lr, r5
 8006ab8:	f04f 0a00 	mov.w	sl, #0
 8006abc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ac0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ac4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ac8:	4452      	add	r2, sl
 8006aca:	b289      	uxth	r1, r1
 8006acc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ad0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ad4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ad8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006adc:	f8be 1000 	ldrh.w	r1, [lr]
 8006ae0:	fb09 110a 	mla	r1, r9, sl, r1
 8006ae4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006ae8:	4567      	cmp	r7, ip
 8006aea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006aee:	d8e5      	bhi.n	8006abc <__multiply+0x10c>
 8006af0:	9a01      	ldr	r2, [sp, #4]
 8006af2:	50a9      	str	r1, [r5, r2]
 8006af4:	3504      	adds	r5, #4
 8006af6:	e799      	b.n	8006a2c <__multiply+0x7c>
 8006af8:	3e01      	subs	r6, #1
 8006afa:	e79b      	b.n	8006a34 <__multiply+0x84>
 8006afc:	08009091 	.word	0x08009091
 8006b00:	080090a2 	.word	0x080090a2

08006b04 <__pow5mult>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4615      	mov	r5, r2
 8006b0a:	f012 0203 	ands.w	r2, r2, #3
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460f      	mov	r7, r1
 8006b12:	d007      	beq.n	8006b24 <__pow5mult+0x20>
 8006b14:	4c25      	ldr	r4, [pc, #148]	; (8006bac <__pow5mult+0xa8>)
 8006b16:	3a01      	subs	r2, #1
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b1e:	f7ff fe53 	bl	80067c8 <__multadd>
 8006b22:	4607      	mov	r7, r0
 8006b24:	10ad      	asrs	r5, r5, #2
 8006b26:	d03d      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b28:	69f4      	ldr	r4, [r6, #28]
 8006b2a:	b97c      	cbnz	r4, 8006b4c <__pow5mult+0x48>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	f7ff fd35 	bl	800659c <malloc>
 8006b32:	4602      	mov	r2, r0
 8006b34:	61f0      	str	r0, [r6, #28]
 8006b36:	b928      	cbnz	r0, 8006b44 <__pow5mult+0x40>
 8006b38:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <__pow5mult+0xac>)
 8006b3a:	481e      	ldr	r0, [pc, #120]	; (8006bb4 <__pow5mult+0xb0>)
 8006b3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b40:	f001 fb7e 	bl	8008240 <__assert_func>
 8006b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b48:	6004      	str	r4, [r0, #0]
 8006b4a:	60c4      	str	r4, [r0, #12]
 8006b4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b54:	b94c      	cbnz	r4, 8006b6a <__pow5mult+0x66>
 8006b56:	f240 2171 	movw	r1, #625	; 0x271
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f7ff ff12 	bl	8006984 <__i2b>
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b66:	4604      	mov	r4, r0
 8006b68:	6003      	str	r3, [r0, #0]
 8006b6a:	f04f 0900 	mov.w	r9, #0
 8006b6e:	07eb      	lsls	r3, r5, #31
 8006b70:	d50a      	bpl.n	8006b88 <__pow5mult+0x84>
 8006b72:	4639      	mov	r1, r7
 8006b74:	4622      	mov	r2, r4
 8006b76:	4630      	mov	r0, r6
 8006b78:	f7ff ff1a 	bl	80069b0 <__multiply>
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4680      	mov	r8, r0
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff fdff 	bl	8006784 <_Bfree>
 8006b86:	4647      	mov	r7, r8
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	d00b      	beq.n	8006ba4 <__pow5mult+0xa0>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	b938      	cbnz	r0, 8006ba0 <__pow5mult+0x9c>
 8006b90:	4622      	mov	r2, r4
 8006b92:	4621      	mov	r1, r4
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff ff0b 	bl	80069b0 <__multiply>
 8006b9a:	6020      	str	r0, [r4, #0]
 8006b9c:	f8c0 9000 	str.w	r9, [r0]
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	e7e4      	b.n	8006b6e <__pow5mult+0x6a>
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006baa:	bf00      	nop
 8006bac:	080091f0 	.word	0x080091f0
 8006bb0:	08009022 	.word	0x08009022
 8006bb4:	080090a2 	.word	0x080090a2

08006bb8 <__lshift>:
 8006bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	6849      	ldr	r1, [r1, #4]
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	4607      	mov	r7, r0
 8006bca:	4691      	mov	r9, r2
 8006bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd0:	f108 0601 	add.w	r6, r8, #1
 8006bd4:	42b3      	cmp	r3, r6
 8006bd6:	db0b      	blt.n	8006bf0 <__lshift+0x38>
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f7ff fd93 	bl	8006704 <_Balloc>
 8006bde:	4605      	mov	r5, r0
 8006be0:	b948      	cbnz	r0, 8006bf6 <__lshift+0x3e>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b28      	ldr	r3, [pc, #160]	; (8006c88 <__lshift+0xd0>)
 8006be6:	4829      	ldr	r0, [pc, #164]	; (8006c8c <__lshift+0xd4>)
 8006be8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006bec:	f001 fb28 	bl	8008240 <__assert_func>
 8006bf0:	3101      	adds	r1, #1
 8006bf2:	005b      	lsls	r3, r3, #1
 8006bf4:	e7ee      	b.n	8006bd4 <__lshift+0x1c>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f100 0114 	add.w	r1, r0, #20
 8006bfc:	f100 0210 	add.w	r2, r0, #16
 8006c00:	4618      	mov	r0, r3
 8006c02:	4553      	cmp	r3, sl
 8006c04:	db33      	blt.n	8006c6e <__lshift+0xb6>
 8006c06:	6920      	ldr	r0, [r4, #16]
 8006c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c0c:	f104 0314 	add.w	r3, r4, #20
 8006c10:	f019 091f 	ands.w	r9, r9, #31
 8006c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c1c:	d02b      	beq.n	8006c76 <__lshift+0xbe>
 8006c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c22:	468a      	mov	sl, r1
 8006c24:	2200      	movs	r2, #0
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	fa00 f009 	lsl.w	r0, r0, r9
 8006c2c:	4310      	orrs	r0, r2
 8006c2e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c36:	459c      	cmp	ip, r3
 8006c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c3c:	d8f3      	bhi.n	8006c26 <__lshift+0x6e>
 8006c3e:	ebac 0304 	sub.w	r3, ip, r4
 8006c42:	3b15      	subs	r3, #21
 8006c44:	f023 0303 	bic.w	r3, r3, #3
 8006c48:	3304      	adds	r3, #4
 8006c4a:	f104 0015 	add.w	r0, r4, #21
 8006c4e:	4584      	cmp	ip, r0
 8006c50:	bf38      	it	cc
 8006c52:	2304      	movcc	r3, #4
 8006c54:	50ca      	str	r2, [r1, r3]
 8006c56:	b10a      	cbz	r2, 8006c5c <__lshift+0xa4>
 8006c58:	f108 0602 	add.w	r6, r8, #2
 8006c5c:	3e01      	subs	r6, #1
 8006c5e:	4638      	mov	r0, r7
 8006c60:	612e      	str	r6, [r5, #16]
 8006c62:	4621      	mov	r1, r4
 8006c64:	f7ff fd8e 	bl	8006784 <_Bfree>
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c72:	3301      	adds	r3, #1
 8006c74:	e7c5      	b.n	8006c02 <__lshift+0x4a>
 8006c76:	3904      	subs	r1, #4
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c80:	459c      	cmp	ip, r3
 8006c82:	d8f9      	bhi.n	8006c78 <__lshift+0xc0>
 8006c84:	e7ea      	b.n	8006c5c <__lshift+0xa4>
 8006c86:	bf00      	nop
 8006c88:	08009091 	.word	0x08009091
 8006c8c:	080090a2 	.word	0x080090a2

08006c90 <__mcmp>:
 8006c90:	b530      	push	{r4, r5, lr}
 8006c92:	6902      	ldr	r2, [r0, #16]
 8006c94:	690c      	ldr	r4, [r1, #16]
 8006c96:	1b12      	subs	r2, r2, r4
 8006c98:	d10e      	bne.n	8006cb8 <__mcmp+0x28>
 8006c9a:	f100 0314 	add.w	r3, r0, #20
 8006c9e:	3114      	adds	r1, #20
 8006ca0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ca4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ca8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006cac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006cb0:	42a5      	cmp	r5, r4
 8006cb2:	d003      	beq.n	8006cbc <__mcmp+0x2c>
 8006cb4:	d305      	bcc.n	8006cc2 <__mcmp+0x32>
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4610      	mov	r0, r2
 8006cba:	bd30      	pop	{r4, r5, pc}
 8006cbc:	4283      	cmp	r3, r0
 8006cbe:	d3f3      	bcc.n	8006ca8 <__mcmp+0x18>
 8006cc0:	e7fa      	b.n	8006cb8 <__mcmp+0x28>
 8006cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc6:	e7f7      	b.n	8006cb8 <__mcmp+0x28>

08006cc8 <__mdiff>:
 8006cc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	460c      	mov	r4, r1
 8006cce:	4606      	mov	r6, r0
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4690      	mov	r8, r2
 8006cd6:	f7ff ffdb 	bl	8006c90 <__mcmp>
 8006cda:	1e05      	subs	r5, r0, #0
 8006cdc:	d110      	bne.n	8006d00 <__mdiff+0x38>
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	f7ff fd0f 	bl	8006704 <_Balloc>
 8006ce6:	b930      	cbnz	r0, 8006cf6 <__mdiff+0x2e>
 8006ce8:	4b3a      	ldr	r3, [pc, #232]	; (8006dd4 <__mdiff+0x10c>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	f240 2137 	movw	r1, #567	; 0x237
 8006cf0:	4839      	ldr	r0, [pc, #228]	; (8006dd8 <__mdiff+0x110>)
 8006cf2:	f001 faa5 	bl	8008240 <__assert_func>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	bfa4      	itt	ge
 8006d02:	4643      	movge	r3, r8
 8006d04:	46a0      	movge	r8, r4
 8006d06:	4630      	mov	r0, r6
 8006d08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d0c:	bfa6      	itte	ge
 8006d0e:	461c      	movge	r4, r3
 8006d10:	2500      	movge	r5, #0
 8006d12:	2501      	movlt	r5, #1
 8006d14:	f7ff fcf6 	bl	8006704 <_Balloc>
 8006d18:	b920      	cbnz	r0, 8006d24 <__mdiff+0x5c>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__mdiff+0x10c>)
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	f240 2145 	movw	r1, #581	; 0x245
 8006d22:	e7e5      	b.n	8006cf0 <__mdiff+0x28>
 8006d24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d28:	6926      	ldr	r6, [r4, #16]
 8006d2a:	60c5      	str	r5, [r0, #12]
 8006d2c:	f104 0914 	add.w	r9, r4, #20
 8006d30:	f108 0514 	add.w	r5, r8, #20
 8006d34:	f100 0e14 	add.w	lr, r0, #20
 8006d38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d40:	f108 0210 	add.w	r2, r8, #16
 8006d44:	46f2      	mov	sl, lr
 8006d46:	2100      	movs	r1, #0
 8006d48:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d50:	fa11 f88b 	uxtah	r8, r1, fp
 8006d54:	b299      	uxth	r1, r3
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	eba8 0801 	sub.w	r8, r8, r1
 8006d5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d64:	fa1f f888 	uxth.w	r8, r8
 8006d68:	1419      	asrs	r1, r3, #16
 8006d6a:	454e      	cmp	r6, r9
 8006d6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d70:	f84a 3b04 	str.w	r3, [sl], #4
 8006d74:	d8e8      	bhi.n	8006d48 <__mdiff+0x80>
 8006d76:	1b33      	subs	r3, r6, r4
 8006d78:	3b15      	subs	r3, #21
 8006d7a:	f023 0303 	bic.w	r3, r3, #3
 8006d7e:	3304      	adds	r3, #4
 8006d80:	3415      	adds	r4, #21
 8006d82:	42a6      	cmp	r6, r4
 8006d84:	bf38      	it	cc
 8006d86:	2304      	movcc	r3, #4
 8006d88:	441d      	add	r5, r3
 8006d8a:	4473      	add	r3, lr
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	462e      	mov	r6, r5
 8006d90:	4566      	cmp	r6, ip
 8006d92:	d30e      	bcc.n	8006db2 <__mdiff+0xea>
 8006d94:	f10c 0203 	add.w	r2, ip, #3
 8006d98:	1b52      	subs	r2, r2, r5
 8006d9a:	f022 0203 	bic.w	r2, r2, #3
 8006d9e:	3d03      	subs	r5, #3
 8006da0:	45ac      	cmp	ip, r5
 8006da2:	bf38      	it	cc
 8006da4:	2200      	movcc	r2, #0
 8006da6:	4413      	add	r3, r2
 8006da8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006dac:	b17a      	cbz	r2, 8006dce <__mdiff+0x106>
 8006dae:	6107      	str	r7, [r0, #16]
 8006db0:	e7a4      	b.n	8006cfc <__mdiff+0x34>
 8006db2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006db6:	fa11 f288 	uxtah	r2, r1, r8
 8006dba:	1414      	asrs	r4, r2, #16
 8006dbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006dc0:	b292      	uxth	r2, r2
 8006dc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006dc6:	f84e 2b04 	str.w	r2, [lr], #4
 8006dca:	1421      	asrs	r1, r4, #16
 8006dcc:	e7e0      	b.n	8006d90 <__mdiff+0xc8>
 8006dce:	3f01      	subs	r7, #1
 8006dd0:	e7ea      	b.n	8006da8 <__mdiff+0xe0>
 8006dd2:	bf00      	nop
 8006dd4:	08009091 	.word	0x08009091
 8006dd8:	080090a2 	.word	0x080090a2

08006ddc <__ulp>:
 8006ddc:	b082      	sub	sp, #8
 8006dde:	ed8d 0b00 	vstr	d0, [sp]
 8006de2:	9a01      	ldr	r2, [sp, #4]
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <__ulp+0x48>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	dc08      	bgt.n	8006e02 <__ulp+0x26>
 8006df0:	425b      	negs	r3, r3
 8006df2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006df6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006dfa:	da04      	bge.n	8006e06 <__ulp+0x2a>
 8006dfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e00:	4113      	asrs	r3, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	e008      	b.n	8006e18 <__ulp+0x3c>
 8006e06:	f1a2 0314 	sub.w	r3, r2, #20
 8006e0a:	2b1e      	cmp	r3, #30
 8006e0c:	bfda      	itte	le
 8006e0e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e12:	40da      	lsrle	r2, r3
 8006e14:	2201      	movgt	r2, #1
 8006e16:	2300      	movs	r3, #0
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	ec41 0b10 	vmov	d0, r0, r1
 8006e20:	b002      	add	sp, #8
 8006e22:	4770      	bx	lr
 8006e24:	7ff00000 	.word	0x7ff00000

08006e28 <__b2d>:
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	6906      	ldr	r6, [r0, #16]
 8006e2e:	f100 0814 	add.w	r8, r0, #20
 8006e32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006e36:	1f37      	subs	r7, r6, #4
 8006e38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7ff fd53 	bl	80068e8 <__hi0bits>
 8006e42:	f1c0 0320 	rsb	r3, r0, #32
 8006e46:	280a      	cmp	r0, #10
 8006e48:	600b      	str	r3, [r1, #0]
 8006e4a:	491b      	ldr	r1, [pc, #108]	; (8006eb8 <__b2d+0x90>)
 8006e4c:	dc15      	bgt.n	8006e7a <__b2d+0x52>
 8006e4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006e52:	fa22 f30c 	lsr.w	r3, r2, ip
 8006e56:	45b8      	cmp	r8, r7
 8006e58:	ea43 0501 	orr.w	r5, r3, r1
 8006e5c:	bf34      	ite	cc
 8006e5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e62:	2300      	movcs	r3, #0
 8006e64:	3015      	adds	r0, #21
 8006e66:	fa02 f000 	lsl.w	r0, r2, r0
 8006e6a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e6e:	4303      	orrs	r3, r0
 8006e70:	461c      	mov	r4, r3
 8006e72:	ec45 4b10 	vmov	d0, r4, r5
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e7a:	45b8      	cmp	r8, r7
 8006e7c:	bf3a      	itte	cc
 8006e7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e82:	f1a6 0708 	subcc.w	r7, r6, #8
 8006e86:	2300      	movcs	r3, #0
 8006e88:	380b      	subs	r0, #11
 8006e8a:	d012      	beq.n	8006eb2 <__b2d+0x8a>
 8006e8c:	f1c0 0120 	rsb	r1, r0, #32
 8006e90:	fa23 f401 	lsr.w	r4, r3, r1
 8006e94:	4082      	lsls	r2, r0
 8006e96:	4322      	orrs	r2, r4
 8006e98:	4547      	cmp	r7, r8
 8006e9a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006e9e:	bf8c      	ite	hi
 8006ea0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006ea4:	2200      	movls	r2, #0
 8006ea6:	4083      	lsls	r3, r0
 8006ea8:	40ca      	lsrs	r2, r1
 8006eaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	e7de      	b.n	8006e70 <__b2d+0x48>
 8006eb2:	ea42 0501 	orr.w	r5, r2, r1
 8006eb6:	e7db      	b.n	8006e70 <__b2d+0x48>
 8006eb8:	3ff00000 	.word	0x3ff00000

08006ebc <__d2b>:
 8006ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	460f      	mov	r7, r1
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	ec59 8b10 	vmov	r8, r9, d0
 8006ec8:	4616      	mov	r6, r2
 8006eca:	f7ff fc1b 	bl	8006704 <_Balloc>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	b930      	cbnz	r0, 8006ee0 <__d2b+0x24>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b24      	ldr	r3, [pc, #144]	; (8006f68 <__d2b+0xac>)
 8006ed6:	4825      	ldr	r0, [pc, #148]	; (8006f6c <__d2b+0xb0>)
 8006ed8:	f240 310f 	movw	r1, #783	; 0x30f
 8006edc:	f001 f9b0 	bl	8008240 <__assert_func>
 8006ee0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ee4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ee8:	bb2d      	cbnz	r5, 8006f36 <__d2b+0x7a>
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	f1b8 0300 	subs.w	r3, r8, #0
 8006ef0:	d026      	beq.n	8006f40 <__d2b+0x84>
 8006ef2:	4668      	mov	r0, sp
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	f7ff fd17 	bl	8006928 <__lo0bits>
 8006efa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006efe:	b1e8      	cbz	r0, 8006f3c <__d2b+0x80>
 8006f00:	f1c0 0320 	rsb	r3, r0, #32
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	40c2      	lsrs	r2, r0
 8006f0c:	6163      	str	r3, [r4, #20]
 8006f0e:	9201      	str	r2, [sp, #4]
 8006f10:	9b01      	ldr	r3, [sp, #4]
 8006f12:	61a3      	str	r3, [r4, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf14      	ite	ne
 8006f18:	2202      	movne	r2, #2
 8006f1a:	2201      	moveq	r2, #1
 8006f1c:	6122      	str	r2, [r4, #16]
 8006f1e:	b1bd      	cbz	r5, 8006f50 <__d2b+0x94>
 8006f20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f24:	4405      	add	r5, r0
 8006f26:	603d      	str	r5, [r7, #0]
 8006f28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f2c:	6030      	str	r0, [r6, #0]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	b003      	add	sp, #12
 8006f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f3a:	e7d6      	b.n	8006eea <__d2b+0x2e>
 8006f3c:	6161      	str	r1, [r4, #20]
 8006f3e:	e7e7      	b.n	8006f10 <__d2b+0x54>
 8006f40:	a801      	add	r0, sp, #4
 8006f42:	f7ff fcf1 	bl	8006928 <__lo0bits>
 8006f46:	9b01      	ldr	r3, [sp, #4]
 8006f48:	6163      	str	r3, [r4, #20]
 8006f4a:	3020      	adds	r0, #32
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	e7e5      	b.n	8006f1c <__d2b+0x60>
 8006f50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f58:	6038      	str	r0, [r7, #0]
 8006f5a:	6918      	ldr	r0, [r3, #16]
 8006f5c:	f7ff fcc4 	bl	80068e8 <__hi0bits>
 8006f60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f64:	e7e2      	b.n	8006f2c <__d2b+0x70>
 8006f66:	bf00      	nop
 8006f68:	08009091 	.word	0x08009091
 8006f6c:	080090a2 	.word	0x080090a2

08006f70 <__ratio>:
 8006f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	4688      	mov	r8, r1
 8006f76:	4669      	mov	r1, sp
 8006f78:	4681      	mov	r9, r0
 8006f7a:	f7ff ff55 	bl	8006e28 <__b2d>
 8006f7e:	a901      	add	r1, sp, #4
 8006f80:	4640      	mov	r0, r8
 8006f82:	ec55 4b10 	vmov	r4, r5, d0
 8006f86:	f7ff ff4f 	bl	8006e28 <__b2d>
 8006f8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f92:	eba3 0c02 	sub.w	ip, r3, r2
 8006f96:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006fa0:	ec51 0b10 	vmov	r0, r1, d0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfd6      	itet	le
 8006fa8:	460a      	movle	r2, r1
 8006faa:	462a      	movgt	r2, r5
 8006fac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	462f      	mov	r7, r5
 8006fb4:	bfd4      	ite	le
 8006fb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006fba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	ee10 2a10 	vmov	r2, s0
 8006fc4:	465b      	mov	r3, fp
 8006fc6:	4639      	mov	r1, r7
 8006fc8:	f7f9 fc50 	bl	800086c <__aeabi_ddiv>
 8006fcc:	ec41 0b10 	vmov	d0, r0, r1
 8006fd0:	b003      	add	sp, #12
 8006fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fd6 <__copybits>:
 8006fd6:	3901      	subs	r1, #1
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	1149      	asrs	r1, r1, #5
 8006fdc:	6914      	ldr	r4, [r2, #16]
 8006fde:	3101      	adds	r1, #1
 8006fe0:	f102 0314 	add.w	r3, r2, #20
 8006fe4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fe8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fec:	1f05      	subs	r5, r0, #4
 8006fee:	42a3      	cmp	r3, r4
 8006ff0:	d30c      	bcc.n	800700c <__copybits+0x36>
 8006ff2:	1aa3      	subs	r3, r4, r2
 8006ff4:	3b11      	subs	r3, #17
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	3211      	adds	r2, #17
 8006ffc:	42a2      	cmp	r2, r4
 8006ffe:	bf88      	it	hi
 8007000:	2300      	movhi	r3, #0
 8007002:	4418      	add	r0, r3
 8007004:	2300      	movs	r3, #0
 8007006:	4288      	cmp	r0, r1
 8007008:	d305      	bcc.n	8007016 <__copybits+0x40>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007010:	f845 6f04 	str.w	r6, [r5, #4]!
 8007014:	e7eb      	b.n	8006fee <__copybits+0x18>
 8007016:	f840 3b04 	str.w	r3, [r0], #4
 800701a:	e7f4      	b.n	8007006 <__copybits+0x30>

0800701c <__any_on>:
 800701c:	f100 0214 	add.w	r2, r0, #20
 8007020:	6900      	ldr	r0, [r0, #16]
 8007022:	114b      	asrs	r3, r1, #5
 8007024:	4298      	cmp	r0, r3
 8007026:	b510      	push	{r4, lr}
 8007028:	db11      	blt.n	800704e <__any_on+0x32>
 800702a:	dd0a      	ble.n	8007042 <__any_on+0x26>
 800702c:	f011 011f 	ands.w	r1, r1, #31
 8007030:	d007      	beq.n	8007042 <__any_on+0x26>
 8007032:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007036:	fa24 f001 	lsr.w	r0, r4, r1
 800703a:	fa00 f101 	lsl.w	r1, r0, r1
 800703e:	428c      	cmp	r4, r1
 8007040:	d10b      	bne.n	800705a <__any_on+0x3e>
 8007042:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007046:	4293      	cmp	r3, r2
 8007048:	d803      	bhi.n	8007052 <__any_on+0x36>
 800704a:	2000      	movs	r0, #0
 800704c:	bd10      	pop	{r4, pc}
 800704e:	4603      	mov	r3, r0
 8007050:	e7f7      	b.n	8007042 <__any_on+0x26>
 8007052:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007056:	2900      	cmp	r1, #0
 8007058:	d0f5      	beq.n	8007046 <__any_on+0x2a>
 800705a:	2001      	movs	r0, #1
 800705c:	e7f6      	b.n	800704c <__any_on+0x30>

0800705e <sulp>:
 800705e:	b570      	push	{r4, r5, r6, lr}
 8007060:	4604      	mov	r4, r0
 8007062:	460d      	mov	r5, r1
 8007064:	ec45 4b10 	vmov	d0, r4, r5
 8007068:	4616      	mov	r6, r2
 800706a:	f7ff feb7 	bl	8006ddc <__ulp>
 800706e:	ec51 0b10 	vmov	r0, r1, d0
 8007072:	b17e      	cbz	r6, 8007094 <sulp+0x36>
 8007074:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007078:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd09      	ble.n	8007094 <sulp+0x36>
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007086:	2400      	movs	r4, #0
 8007088:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 fac2 	bl	8000618 <__aeabi_dmul>
 8007094:	bd70      	pop	{r4, r5, r6, pc}
	...

08007098 <_strtod_l>:
 8007098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800709c:	ed2d 8b02 	vpush	{d8}
 80070a0:	b09b      	sub	sp, #108	; 0x6c
 80070a2:	4604      	mov	r4, r0
 80070a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80070a6:	2200      	movs	r2, #0
 80070a8:	9216      	str	r2, [sp, #88]	; 0x58
 80070aa:	460d      	mov	r5, r1
 80070ac:	f04f 0800 	mov.w	r8, #0
 80070b0:	f04f 0900 	mov.w	r9, #0
 80070b4:	460a      	mov	r2, r1
 80070b6:	9215      	str	r2, [sp, #84]	; 0x54
 80070b8:	7811      	ldrb	r1, [r2, #0]
 80070ba:	292b      	cmp	r1, #43	; 0x2b
 80070bc:	d04c      	beq.n	8007158 <_strtod_l+0xc0>
 80070be:	d83a      	bhi.n	8007136 <_strtod_l+0x9e>
 80070c0:	290d      	cmp	r1, #13
 80070c2:	d834      	bhi.n	800712e <_strtod_l+0x96>
 80070c4:	2908      	cmp	r1, #8
 80070c6:	d834      	bhi.n	8007132 <_strtod_l+0x9a>
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d03d      	beq.n	8007148 <_strtod_l+0xb0>
 80070cc:	2200      	movs	r2, #0
 80070ce:	920a      	str	r2, [sp, #40]	; 0x28
 80070d0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80070d2:	7832      	ldrb	r2, [r6, #0]
 80070d4:	2a30      	cmp	r2, #48	; 0x30
 80070d6:	f040 80b4 	bne.w	8007242 <_strtod_l+0x1aa>
 80070da:	7872      	ldrb	r2, [r6, #1]
 80070dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80070e0:	2a58      	cmp	r2, #88	; 0x58
 80070e2:	d170      	bne.n	80071c6 <_strtod_l+0x12e>
 80070e4:	9302      	str	r3, [sp, #8]
 80070e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	ab16      	add	r3, sp, #88	; 0x58
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4a8e      	ldr	r2, [pc, #568]	; (8007328 <_strtod_l+0x290>)
 80070f0:	ab17      	add	r3, sp, #92	; 0x5c
 80070f2:	a915      	add	r1, sp, #84	; 0x54
 80070f4:	4620      	mov	r0, r4
 80070f6:	f001 f93f 	bl	8008378 <__gethex>
 80070fa:	f010 070f 	ands.w	r7, r0, #15
 80070fe:	4605      	mov	r5, r0
 8007100:	d005      	beq.n	800710e <_strtod_l+0x76>
 8007102:	2f06      	cmp	r7, #6
 8007104:	d12a      	bne.n	800715c <_strtod_l+0xc4>
 8007106:	3601      	adds	r6, #1
 8007108:	2300      	movs	r3, #0
 800710a:	9615      	str	r6, [sp, #84]	; 0x54
 800710c:	930a      	str	r3, [sp, #40]	; 0x28
 800710e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 857f 	bne.w	8007c14 <_strtod_l+0xb7c>
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	b1db      	cbz	r3, 8007152 <_strtod_l+0xba>
 800711a:	4642      	mov	r2, r8
 800711c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007120:	ec43 2b10 	vmov	d0, r2, r3
 8007124:	b01b      	add	sp, #108	; 0x6c
 8007126:	ecbd 8b02 	vpop	{d8}
 800712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712e:	2920      	cmp	r1, #32
 8007130:	d1cc      	bne.n	80070cc <_strtod_l+0x34>
 8007132:	3201      	adds	r2, #1
 8007134:	e7bf      	b.n	80070b6 <_strtod_l+0x1e>
 8007136:	292d      	cmp	r1, #45	; 0x2d
 8007138:	d1c8      	bne.n	80070cc <_strtod_l+0x34>
 800713a:	2101      	movs	r1, #1
 800713c:	910a      	str	r1, [sp, #40]	; 0x28
 800713e:	1c51      	adds	r1, r2, #1
 8007140:	9115      	str	r1, [sp, #84]	; 0x54
 8007142:	7852      	ldrb	r2, [r2, #1]
 8007144:	2a00      	cmp	r2, #0
 8007146:	d1c3      	bne.n	80070d0 <_strtod_l+0x38>
 8007148:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800714a:	9515      	str	r5, [sp, #84]	; 0x54
 800714c:	2b00      	cmp	r3, #0
 800714e:	f040 855f 	bne.w	8007c10 <_strtod_l+0xb78>
 8007152:	4642      	mov	r2, r8
 8007154:	464b      	mov	r3, r9
 8007156:	e7e3      	b.n	8007120 <_strtod_l+0x88>
 8007158:	2100      	movs	r1, #0
 800715a:	e7ef      	b.n	800713c <_strtod_l+0xa4>
 800715c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800715e:	b13a      	cbz	r2, 8007170 <_strtod_l+0xd8>
 8007160:	2135      	movs	r1, #53	; 0x35
 8007162:	a818      	add	r0, sp, #96	; 0x60
 8007164:	f7ff ff37 	bl	8006fd6 <__copybits>
 8007168:	9916      	ldr	r1, [sp, #88]	; 0x58
 800716a:	4620      	mov	r0, r4
 800716c:	f7ff fb0a 	bl	8006784 <_Bfree>
 8007170:	3f01      	subs	r7, #1
 8007172:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007174:	2f04      	cmp	r7, #4
 8007176:	d806      	bhi.n	8007186 <_strtod_l+0xee>
 8007178:	e8df f007 	tbb	[pc, r7]
 800717c:	201d0314 	.word	0x201d0314
 8007180:	14          	.byte	0x14
 8007181:	00          	.byte	0x00
 8007182:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007186:	05e9      	lsls	r1, r5, #23
 8007188:	bf48      	it	mi
 800718a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800718e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007192:	0d1b      	lsrs	r3, r3, #20
 8007194:	051b      	lsls	r3, r3, #20
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1b9      	bne.n	800710e <_strtod_l+0x76>
 800719a:	f7fe fb05 	bl	80057a8 <__errno>
 800719e:	2322      	movs	r3, #34	; 0x22
 80071a0:	6003      	str	r3, [r0, #0]
 80071a2:	e7b4      	b.n	800710e <_strtod_l+0x76>
 80071a4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80071a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071b4:	e7e7      	b.n	8007186 <_strtod_l+0xee>
 80071b6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007330 <_strtod_l+0x298>
 80071ba:	e7e4      	b.n	8007186 <_strtod_l+0xee>
 80071bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071c0:	f04f 38ff 	mov.w	r8, #4294967295
 80071c4:	e7df      	b.n	8007186 <_strtod_l+0xee>
 80071c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	9215      	str	r2, [sp, #84]	; 0x54
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b30      	cmp	r3, #48	; 0x30
 80071d0:	d0f9      	beq.n	80071c6 <_strtod_l+0x12e>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d09b      	beq.n	800710e <_strtod_l+0x76>
 80071d6:	2301      	movs	r3, #1
 80071d8:	f04f 0a00 	mov.w	sl, #0
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80071e2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80071e6:	46d3      	mov	fp, sl
 80071e8:	220a      	movs	r2, #10
 80071ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 80071ec:	7806      	ldrb	r6, [r0, #0]
 80071ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80071f2:	b2d9      	uxtb	r1, r3
 80071f4:	2909      	cmp	r1, #9
 80071f6:	d926      	bls.n	8007246 <_strtod_l+0x1ae>
 80071f8:	494c      	ldr	r1, [pc, #304]	; (800732c <_strtod_l+0x294>)
 80071fa:	2201      	movs	r2, #1
 80071fc:	f000 ffe6 	bl	80081cc <strncmp>
 8007200:	2800      	cmp	r0, #0
 8007202:	d030      	beq.n	8007266 <_strtod_l+0x1ce>
 8007204:	2000      	movs	r0, #0
 8007206:	4632      	mov	r2, r6
 8007208:	9005      	str	r0, [sp, #20]
 800720a:	465e      	mov	r6, fp
 800720c:	4603      	mov	r3, r0
 800720e:	2a65      	cmp	r2, #101	; 0x65
 8007210:	d001      	beq.n	8007216 <_strtod_l+0x17e>
 8007212:	2a45      	cmp	r2, #69	; 0x45
 8007214:	d113      	bne.n	800723e <_strtod_l+0x1a6>
 8007216:	b91e      	cbnz	r6, 8007220 <_strtod_l+0x188>
 8007218:	9a04      	ldr	r2, [sp, #16]
 800721a:	4302      	orrs	r2, r0
 800721c:	d094      	beq.n	8007148 <_strtod_l+0xb0>
 800721e:	2600      	movs	r6, #0
 8007220:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007222:	1c6a      	adds	r2, r5, #1
 8007224:	9215      	str	r2, [sp, #84]	; 0x54
 8007226:	786a      	ldrb	r2, [r5, #1]
 8007228:	2a2b      	cmp	r2, #43	; 0x2b
 800722a:	d074      	beq.n	8007316 <_strtod_l+0x27e>
 800722c:	2a2d      	cmp	r2, #45	; 0x2d
 800722e:	d078      	beq.n	8007322 <_strtod_l+0x28a>
 8007230:	f04f 0c00 	mov.w	ip, #0
 8007234:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007238:	2909      	cmp	r1, #9
 800723a:	d97f      	bls.n	800733c <_strtod_l+0x2a4>
 800723c:	9515      	str	r5, [sp, #84]	; 0x54
 800723e:	2700      	movs	r7, #0
 8007240:	e09e      	b.n	8007380 <_strtod_l+0x2e8>
 8007242:	2300      	movs	r3, #0
 8007244:	e7c8      	b.n	80071d8 <_strtod_l+0x140>
 8007246:	f1bb 0f08 	cmp.w	fp, #8
 800724a:	bfd8      	it	le
 800724c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800724e:	f100 0001 	add.w	r0, r0, #1
 8007252:	bfda      	itte	le
 8007254:	fb02 3301 	mlale	r3, r2, r1, r3
 8007258:	9309      	strle	r3, [sp, #36]	; 0x24
 800725a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800725e:	f10b 0b01 	add.w	fp, fp, #1
 8007262:	9015      	str	r0, [sp, #84]	; 0x54
 8007264:	e7c1      	b.n	80071ea <_strtod_l+0x152>
 8007266:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	9215      	str	r2, [sp, #84]	; 0x54
 800726c:	785a      	ldrb	r2, [r3, #1]
 800726e:	f1bb 0f00 	cmp.w	fp, #0
 8007272:	d037      	beq.n	80072e4 <_strtod_l+0x24c>
 8007274:	9005      	str	r0, [sp, #20]
 8007276:	465e      	mov	r6, fp
 8007278:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800727c:	2b09      	cmp	r3, #9
 800727e:	d912      	bls.n	80072a6 <_strtod_l+0x20e>
 8007280:	2301      	movs	r3, #1
 8007282:	e7c4      	b.n	800720e <_strtod_l+0x176>
 8007284:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	9215      	str	r2, [sp, #84]	; 0x54
 800728a:	785a      	ldrb	r2, [r3, #1]
 800728c:	3001      	adds	r0, #1
 800728e:	2a30      	cmp	r2, #48	; 0x30
 8007290:	d0f8      	beq.n	8007284 <_strtod_l+0x1ec>
 8007292:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007296:	2b08      	cmp	r3, #8
 8007298:	f200 84c1 	bhi.w	8007c1e <_strtod_l+0xb86>
 800729c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800729e:	9005      	str	r0, [sp, #20]
 80072a0:	2000      	movs	r0, #0
 80072a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a4:	4606      	mov	r6, r0
 80072a6:	3a30      	subs	r2, #48	; 0x30
 80072a8:	f100 0301 	add.w	r3, r0, #1
 80072ac:	d014      	beq.n	80072d8 <_strtod_l+0x240>
 80072ae:	9905      	ldr	r1, [sp, #20]
 80072b0:	4419      	add	r1, r3
 80072b2:	9105      	str	r1, [sp, #20]
 80072b4:	4633      	mov	r3, r6
 80072b6:	eb00 0c06 	add.w	ip, r0, r6
 80072ba:	210a      	movs	r1, #10
 80072bc:	4563      	cmp	r3, ip
 80072be:	d113      	bne.n	80072e8 <_strtod_l+0x250>
 80072c0:	1833      	adds	r3, r6, r0
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	f106 0601 	add.w	r6, r6, #1
 80072c8:	4406      	add	r6, r0
 80072ca:	dc1a      	bgt.n	8007302 <_strtod_l+0x26a>
 80072cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ce:	230a      	movs	r3, #10
 80072d0:	fb03 2301 	mla	r3, r3, r1, r2
 80072d4:	9309      	str	r3, [sp, #36]	; 0x24
 80072d6:	2300      	movs	r3, #0
 80072d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072da:	1c51      	adds	r1, r2, #1
 80072dc:	9115      	str	r1, [sp, #84]	; 0x54
 80072de:	7852      	ldrb	r2, [r2, #1]
 80072e0:	4618      	mov	r0, r3
 80072e2:	e7c9      	b.n	8007278 <_strtod_l+0x1e0>
 80072e4:	4658      	mov	r0, fp
 80072e6:	e7d2      	b.n	800728e <_strtod_l+0x1f6>
 80072e8:	2b08      	cmp	r3, #8
 80072ea:	f103 0301 	add.w	r3, r3, #1
 80072ee:	dc03      	bgt.n	80072f8 <_strtod_l+0x260>
 80072f0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80072f2:	434f      	muls	r7, r1
 80072f4:	9709      	str	r7, [sp, #36]	; 0x24
 80072f6:	e7e1      	b.n	80072bc <_strtod_l+0x224>
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	bfd8      	it	le
 80072fc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007300:	e7dc      	b.n	80072bc <_strtod_l+0x224>
 8007302:	2e10      	cmp	r6, #16
 8007304:	bfdc      	itt	le
 8007306:	230a      	movle	r3, #10
 8007308:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800730c:	e7e3      	b.n	80072d6 <_strtod_l+0x23e>
 800730e:	2300      	movs	r3, #0
 8007310:	9305      	str	r3, [sp, #20]
 8007312:	2301      	movs	r3, #1
 8007314:	e780      	b.n	8007218 <_strtod_l+0x180>
 8007316:	f04f 0c00 	mov.w	ip, #0
 800731a:	1caa      	adds	r2, r5, #2
 800731c:	9215      	str	r2, [sp, #84]	; 0x54
 800731e:	78aa      	ldrb	r2, [r5, #2]
 8007320:	e788      	b.n	8007234 <_strtod_l+0x19c>
 8007322:	f04f 0c01 	mov.w	ip, #1
 8007326:	e7f8      	b.n	800731a <_strtod_l+0x282>
 8007328:	08009200 	.word	0x08009200
 800732c:	080091fc 	.word	0x080091fc
 8007330:	7ff00000 	.word	0x7ff00000
 8007334:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007336:	1c51      	adds	r1, r2, #1
 8007338:	9115      	str	r1, [sp, #84]	; 0x54
 800733a:	7852      	ldrb	r2, [r2, #1]
 800733c:	2a30      	cmp	r2, #48	; 0x30
 800733e:	d0f9      	beq.n	8007334 <_strtod_l+0x29c>
 8007340:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007344:	2908      	cmp	r1, #8
 8007346:	f63f af7a 	bhi.w	800723e <_strtod_l+0x1a6>
 800734a:	3a30      	subs	r2, #48	; 0x30
 800734c:	9208      	str	r2, [sp, #32]
 800734e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007350:	920c      	str	r2, [sp, #48]	; 0x30
 8007352:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007354:	1c57      	adds	r7, r2, #1
 8007356:	9715      	str	r7, [sp, #84]	; 0x54
 8007358:	7852      	ldrb	r2, [r2, #1]
 800735a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800735e:	f1be 0f09 	cmp.w	lr, #9
 8007362:	d938      	bls.n	80073d6 <_strtod_l+0x33e>
 8007364:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007366:	1a7f      	subs	r7, r7, r1
 8007368:	2f08      	cmp	r7, #8
 800736a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800736e:	dc03      	bgt.n	8007378 <_strtod_l+0x2e0>
 8007370:	9908      	ldr	r1, [sp, #32]
 8007372:	428f      	cmp	r7, r1
 8007374:	bfa8      	it	ge
 8007376:	460f      	movge	r7, r1
 8007378:	f1bc 0f00 	cmp.w	ip, #0
 800737c:	d000      	beq.n	8007380 <_strtod_l+0x2e8>
 800737e:	427f      	negs	r7, r7
 8007380:	2e00      	cmp	r6, #0
 8007382:	d14f      	bne.n	8007424 <_strtod_l+0x38c>
 8007384:	9904      	ldr	r1, [sp, #16]
 8007386:	4301      	orrs	r1, r0
 8007388:	f47f aec1 	bne.w	800710e <_strtod_l+0x76>
 800738c:	2b00      	cmp	r3, #0
 800738e:	f47f aedb 	bne.w	8007148 <_strtod_l+0xb0>
 8007392:	2a69      	cmp	r2, #105	; 0x69
 8007394:	d029      	beq.n	80073ea <_strtod_l+0x352>
 8007396:	dc26      	bgt.n	80073e6 <_strtod_l+0x34e>
 8007398:	2a49      	cmp	r2, #73	; 0x49
 800739a:	d026      	beq.n	80073ea <_strtod_l+0x352>
 800739c:	2a4e      	cmp	r2, #78	; 0x4e
 800739e:	f47f aed3 	bne.w	8007148 <_strtod_l+0xb0>
 80073a2:	499b      	ldr	r1, [pc, #620]	; (8007610 <_strtod_l+0x578>)
 80073a4:	a815      	add	r0, sp, #84	; 0x54
 80073a6:	f001 fa27 	bl	80087f8 <__match>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	f43f aecc 	beq.w	8007148 <_strtod_l+0xb0>
 80073b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b28      	cmp	r3, #40	; 0x28
 80073b6:	d12f      	bne.n	8007418 <_strtod_l+0x380>
 80073b8:	4996      	ldr	r1, [pc, #600]	; (8007614 <_strtod_l+0x57c>)
 80073ba:	aa18      	add	r2, sp, #96	; 0x60
 80073bc:	a815      	add	r0, sp, #84	; 0x54
 80073be:	f001 fa2f 	bl	8008820 <__hexnan>
 80073c2:	2805      	cmp	r0, #5
 80073c4:	d128      	bne.n	8007418 <_strtod_l+0x380>
 80073c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80073d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80073d4:	e69b      	b.n	800710e <_strtod_l+0x76>
 80073d6:	9f08      	ldr	r7, [sp, #32]
 80073d8:	210a      	movs	r1, #10
 80073da:	fb01 2107 	mla	r1, r1, r7, r2
 80073de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80073e2:	9208      	str	r2, [sp, #32]
 80073e4:	e7b5      	b.n	8007352 <_strtod_l+0x2ba>
 80073e6:	2a6e      	cmp	r2, #110	; 0x6e
 80073e8:	e7d9      	b.n	800739e <_strtod_l+0x306>
 80073ea:	498b      	ldr	r1, [pc, #556]	; (8007618 <_strtod_l+0x580>)
 80073ec:	a815      	add	r0, sp, #84	; 0x54
 80073ee:	f001 fa03 	bl	80087f8 <__match>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f aea8 	beq.w	8007148 <_strtod_l+0xb0>
 80073f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073fa:	4988      	ldr	r1, [pc, #544]	; (800761c <_strtod_l+0x584>)
 80073fc:	3b01      	subs	r3, #1
 80073fe:	a815      	add	r0, sp, #84	; 0x54
 8007400:	9315      	str	r3, [sp, #84]	; 0x54
 8007402:	f001 f9f9 	bl	80087f8 <__match>
 8007406:	b910      	cbnz	r0, 800740e <_strtod_l+0x376>
 8007408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800740a:	3301      	adds	r3, #1
 800740c:	9315      	str	r3, [sp, #84]	; 0x54
 800740e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800762c <_strtod_l+0x594>
 8007412:	f04f 0800 	mov.w	r8, #0
 8007416:	e67a      	b.n	800710e <_strtod_l+0x76>
 8007418:	4881      	ldr	r0, [pc, #516]	; (8007620 <_strtod_l+0x588>)
 800741a:	f000 ff09 	bl	8008230 <nan>
 800741e:	ec59 8b10 	vmov	r8, r9, d0
 8007422:	e674      	b.n	800710e <_strtod_l+0x76>
 8007424:	9b05      	ldr	r3, [sp, #20]
 8007426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007428:	1afb      	subs	r3, r7, r3
 800742a:	f1bb 0f00 	cmp.w	fp, #0
 800742e:	bf08      	it	eq
 8007430:	46b3      	moveq	fp, r6
 8007432:	2e10      	cmp	r6, #16
 8007434:	9308      	str	r3, [sp, #32]
 8007436:	4635      	mov	r5, r6
 8007438:	bfa8      	it	ge
 800743a:	2510      	movge	r5, #16
 800743c:	f7f9 f872 	bl	8000524 <__aeabi_ui2d>
 8007440:	2e09      	cmp	r6, #9
 8007442:	4680      	mov	r8, r0
 8007444:	4689      	mov	r9, r1
 8007446:	dd13      	ble.n	8007470 <_strtod_l+0x3d8>
 8007448:	4b76      	ldr	r3, [pc, #472]	; (8007624 <_strtod_l+0x58c>)
 800744a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800744e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007452:	f7f9 f8e1 	bl	8000618 <__aeabi_dmul>
 8007456:	4680      	mov	r8, r0
 8007458:	4650      	mov	r0, sl
 800745a:	4689      	mov	r9, r1
 800745c:	f7f9 f862 	bl	8000524 <__aeabi_ui2d>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4640      	mov	r0, r8
 8007466:	4649      	mov	r1, r9
 8007468:	f7f8 ff20 	bl	80002ac <__adddf3>
 800746c:	4680      	mov	r8, r0
 800746e:	4689      	mov	r9, r1
 8007470:	2e0f      	cmp	r6, #15
 8007472:	dc38      	bgt.n	80074e6 <_strtod_l+0x44e>
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f43f ae49 	beq.w	800710e <_strtod_l+0x76>
 800747c:	dd24      	ble.n	80074c8 <_strtod_l+0x430>
 800747e:	2b16      	cmp	r3, #22
 8007480:	dc0b      	bgt.n	800749a <_strtod_l+0x402>
 8007482:	4968      	ldr	r1, [pc, #416]	; (8007624 <_strtod_l+0x58c>)
 8007484:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	f7f9 f8c2 	bl	8000618 <__aeabi_dmul>
 8007494:	4680      	mov	r8, r0
 8007496:	4689      	mov	r9, r1
 8007498:	e639      	b.n	800710e <_strtod_l+0x76>
 800749a:	9a08      	ldr	r2, [sp, #32]
 800749c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80074a0:	4293      	cmp	r3, r2
 80074a2:	db20      	blt.n	80074e6 <_strtod_l+0x44e>
 80074a4:	4c5f      	ldr	r4, [pc, #380]	; (8007624 <_strtod_l+0x58c>)
 80074a6:	f1c6 060f 	rsb	r6, r6, #15
 80074aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074ae:	4642      	mov	r2, r8
 80074b0:	464b      	mov	r3, r9
 80074b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b6:	f7f9 f8af 	bl	8000618 <__aeabi_dmul>
 80074ba:	9b08      	ldr	r3, [sp, #32]
 80074bc:	1b9e      	subs	r6, r3, r6
 80074be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074c6:	e7e3      	b.n	8007490 <_strtod_l+0x3f8>
 80074c8:	9b08      	ldr	r3, [sp, #32]
 80074ca:	3316      	adds	r3, #22
 80074cc:	db0b      	blt.n	80074e6 <_strtod_l+0x44e>
 80074ce:	9b05      	ldr	r3, [sp, #20]
 80074d0:	1bdf      	subs	r7, r3, r7
 80074d2:	4b54      	ldr	r3, [pc, #336]	; (8007624 <_strtod_l+0x58c>)
 80074d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	4640      	mov	r0, r8
 80074de:	4649      	mov	r1, r9
 80074e0:	f7f9 f9c4 	bl	800086c <__aeabi_ddiv>
 80074e4:	e7d6      	b.n	8007494 <_strtod_l+0x3fc>
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	1b75      	subs	r5, r6, r5
 80074ea:	441d      	add	r5, r3
 80074ec:	2d00      	cmp	r5, #0
 80074ee:	dd70      	ble.n	80075d2 <_strtod_l+0x53a>
 80074f0:	f015 030f 	ands.w	r3, r5, #15
 80074f4:	d00a      	beq.n	800750c <_strtod_l+0x474>
 80074f6:	494b      	ldr	r1, [pc, #300]	; (8007624 <_strtod_l+0x58c>)
 80074f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007504:	f7f9 f888 	bl	8000618 <__aeabi_dmul>
 8007508:	4680      	mov	r8, r0
 800750a:	4689      	mov	r9, r1
 800750c:	f035 050f 	bics.w	r5, r5, #15
 8007510:	d04d      	beq.n	80075ae <_strtod_l+0x516>
 8007512:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007516:	dd22      	ble.n	800755e <_strtod_l+0x4c6>
 8007518:	2500      	movs	r5, #0
 800751a:	46ab      	mov	fp, r5
 800751c:	9509      	str	r5, [sp, #36]	; 0x24
 800751e:	9505      	str	r5, [sp, #20]
 8007520:	2322      	movs	r3, #34	; 0x22
 8007522:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800762c <_strtod_l+0x594>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	f04f 0800 	mov.w	r8, #0
 800752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	f43f aded 	beq.w	800710e <_strtod_l+0x76>
 8007534:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007536:	4620      	mov	r0, r4
 8007538:	f7ff f924 	bl	8006784 <_Bfree>
 800753c:	9905      	ldr	r1, [sp, #20]
 800753e:	4620      	mov	r0, r4
 8007540:	f7ff f920 	bl	8006784 <_Bfree>
 8007544:	4659      	mov	r1, fp
 8007546:	4620      	mov	r0, r4
 8007548:	f7ff f91c 	bl	8006784 <_Bfree>
 800754c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800754e:	4620      	mov	r0, r4
 8007550:	f7ff f918 	bl	8006784 <_Bfree>
 8007554:	4629      	mov	r1, r5
 8007556:	4620      	mov	r0, r4
 8007558:	f7ff f914 	bl	8006784 <_Bfree>
 800755c:	e5d7      	b.n	800710e <_strtod_l+0x76>
 800755e:	4b32      	ldr	r3, [pc, #200]	; (8007628 <_strtod_l+0x590>)
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	2300      	movs	r3, #0
 8007564:	112d      	asrs	r5, r5, #4
 8007566:	4640      	mov	r0, r8
 8007568:	4649      	mov	r1, r9
 800756a:	469a      	mov	sl, r3
 800756c:	2d01      	cmp	r5, #1
 800756e:	dc21      	bgt.n	80075b4 <_strtod_l+0x51c>
 8007570:	b10b      	cbz	r3, 8007576 <_strtod_l+0x4de>
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	492c      	ldr	r1, [pc, #176]	; (8007628 <_strtod_l+0x590>)
 8007578:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800757c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007580:	4642      	mov	r2, r8
 8007582:	464b      	mov	r3, r9
 8007584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007588:	f7f9 f846 	bl	8000618 <__aeabi_dmul>
 800758c:	4b27      	ldr	r3, [pc, #156]	; (800762c <_strtod_l+0x594>)
 800758e:	460a      	mov	r2, r1
 8007590:	400b      	ands	r3, r1
 8007592:	4927      	ldr	r1, [pc, #156]	; (8007630 <_strtod_l+0x598>)
 8007594:	428b      	cmp	r3, r1
 8007596:	4680      	mov	r8, r0
 8007598:	d8be      	bhi.n	8007518 <_strtod_l+0x480>
 800759a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800759e:	428b      	cmp	r3, r1
 80075a0:	bf86      	itte	hi
 80075a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007634 <_strtod_l+0x59c>
 80075a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80075aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075ae:	2300      	movs	r3, #0
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	e07b      	b.n	80076ac <_strtod_l+0x614>
 80075b4:	07ea      	lsls	r2, r5, #31
 80075b6:	d505      	bpl.n	80075c4 <_strtod_l+0x52c>
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075be:	f7f9 f82b 	bl	8000618 <__aeabi_dmul>
 80075c2:	2301      	movs	r3, #1
 80075c4:	9a04      	ldr	r2, [sp, #16]
 80075c6:	3208      	adds	r2, #8
 80075c8:	f10a 0a01 	add.w	sl, sl, #1
 80075cc:	106d      	asrs	r5, r5, #1
 80075ce:	9204      	str	r2, [sp, #16]
 80075d0:	e7cc      	b.n	800756c <_strtod_l+0x4d4>
 80075d2:	d0ec      	beq.n	80075ae <_strtod_l+0x516>
 80075d4:	426d      	negs	r5, r5
 80075d6:	f015 020f 	ands.w	r2, r5, #15
 80075da:	d00a      	beq.n	80075f2 <_strtod_l+0x55a>
 80075dc:	4b11      	ldr	r3, [pc, #68]	; (8007624 <_strtod_l+0x58c>)
 80075de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e2:	4640      	mov	r0, r8
 80075e4:	4649      	mov	r1, r9
 80075e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ea:	f7f9 f93f 	bl	800086c <__aeabi_ddiv>
 80075ee:	4680      	mov	r8, r0
 80075f0:	4689      	mov	r9, r1
 80075f2:	112d      	asrs	r5, r5, #4
 80075f4:	d0db      	beq.n	80075ae <_strtod_l+0x516>
 80075f6:	2d1f      	cmp	r5, #31
 80075f8:	dd1e      	ble.n	8007638 <_strtod_l+0x5a0>
 80075fa:	2500      	movs	r5, #0
 80075fc:	46ab      	mov	fp, r5
 80075fe:	9509      	str	r5, [sp, #36]	; 0x24
 8007600:	9505      	str	r5, [sp, #20]
 8007602:	2322      	movs	r3, #34	; 0x22
 8007604:	f04f 0800 	mov.w	r8, #0
 8007608:	f04f 0900 	mov.w	r9, #0
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	e78d      	b.n	800752c <_strtod_l+0x494>
 8007610:	08008fe9 	.word	0x08008fe9
 8007614:	08009214 	.word	0x08009214
 8007618:	08008fe1 	.word	0x08008fe1
 800761c:	08009018 	.word	0x08009018
 8007620:	080093a5 	.word	0x080093a5
 8007624:	08009128 	.word	0x08009128
 8007628:	08009100 	.word	0x08009100
 800762c:	7ff00000 	.word	0x7ff00000
 8007630:	7ca00000 	.word	0x7ca00000
 8007634:	7fefffff 	.word	0x7fefffff
 8007638:	f015 0310 	ands.w	r3, r5, #16
 800763c:	bf18      	it	ne
 800763e:	236a      	movne	r3, #106	; 0x6a
 8007640:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80079e4 <_strtod_l+0x94c>
 8007644:	9304      	str	r3, [sp, #16]
 8007646:	4640      	mov	r0, r8
 8007648:	4649      	mov	r1, r9
 800764a:	2300      	movs	r3, #0
 800764c:	07ea      	lsls	r2, r5, #31
 800764e:	d504      	bpl.n	800765a <_strtod_l+0x5c2>
 8007650:	e9da 2300 	ldrd	r2, r3, [sl]
 8007654:	f7f8 ffe0 	bl	8000618 <__aeabi_dmul>
 8007658:	2301      	movs	r3, #1
 800765a:	106d      	asrs	r5, r5, #1
 800765c:	f10a 0a08 	add.w	sl, sl, #8
 8007660:	d1f4      	bne.n	800764c <_strtod_l+0x5b4>
 8007662:	b10b      	cbz	r3, 8007668 <_strtod_l+0x5d0>
 8007664:	4680      	mov	r8, r0
 8007666:	4689      	mov	r9, r1
 8007668:	9b04      	ldr	r3, [sp, #16]
 800766a:	b1bb      	cbz	r3, 800769c <_strtod_l+0x604>
 800766c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007670:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007674:	2b00      	cmp	r3, #0
 8007676:	4649      	mov	r1, r9
 8007678:	dd10      	ble.n	800769c <_strtod_l+0x604>
 800767a:	2b1f      	cmp	r3, #31
 800767c:	f340 811e 	ble.w	80078bc <_strtod_l+0x824>
 8007680:	2b34      	cmp	r3, #52	; 0x34
 8007682:	bfde      	ittt	le
 8007684:	f04f 33ff 	movle.w	r3, #4294967295
 8007688:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800768c:	4093      	lslle	r3, r2
 800768e:	f04f 0800 	mov.w	r8, #0
 8007692:	bfcc      	ite	gt
 8007694:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007698:	ea03 0901 	andle.w	r9, r3, r1
 800769c:	2200      	movs	r2, #0
 800769e:	2300      	movs	r3, #0
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f9 fa20 	bl	8000ae8 <__aeabi_dcmpeq>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d1a6      	bne.n	80075fa <_strtod_l+0x562>
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076b2:	4633      	mov	r3, r6
 80076b4:	465a      	mov	r2, fp
 80076b6:	4620      	mov	r0, r4
 80076b8:	f7ff f8cc 	bl	8006854 <__s2b>
 80076bc:	9009      	str	r0, [sp, #36]	; 0x24
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f af2a 	beq.w	8007518 <_strtod_l+0x480>
 80076c4:	9a08      	ldr	r2, [sp, #32]
 80076c6:	9b05      	ldr	r3, [sp, #20]
 80076c8:	2a00      	cmp	r2, #0
 80076ca:	eba3 0307 	sub.w	r3, r3, r7
 80076ce:	bfa8      	it	ge
 80076d0:	2300      	movge	r3, #0
 80076d2:	930c      	str	r3, [sp, #48]	; 0x30
 80076d4:	2500      	movs	r5, #0
 80076d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076da:	9312      	str	r3, [sp, #72]	; 0x48
 80076dc:	46ab      	mov	fp, r5
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	4620      	mov	r0, r4
 80076e2:	6859      	ldr	r1, [r3, #4]
 80076e4:	f7ff f80e 	bl	8006704 <_Balloc>
 80076e8:	9005      	str	r0, [sp, #20]
 80076ea:	2800      	cmp	r0, #0
 80076ec:	f43f af18 	beq.w	8007520 <_strtod_l+0x488>
 80076f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	3202      	adds	r2, #2
 80076f6:	f103 010c 	add.w	r1, r3, #12
 80076fa:	0092      	lsls	r2, r2, #2
 80076fc:	300c      	adds	r0, #12
 80076fe:	f000 fd87 	bl	8008210 <memcpy>
 8007702:	ec49 8b10 	vmov	d0, r8, r9
 8007706:	aa18      	add	r2, sp, #96	; 0x60
 8007708:	a917      	add	r1, sp, #92	; 0x5c
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff fbd6 	bl	8006ebc <__d2b>
 8007710:	ec49 8b18 	vmov	d8, r8, r9
 8007714:	9016      	str	r0, [sp, #88]	; 0x58
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f af02 	beq.w	8007520 <_strtod_l+0x488>
 800771c:	2101      	movs	r1, #1
 800771e:	4620      	mov	r0, r4
 8007720:	f7ff f930 	bl	8006984 <__i2b>
 8007724:	4683      	mov	fp, r0
 8007726:	2800      	cmp	r0, #0
 8007728:	f43f aefa 	beq.w	8007520 <_strtod_l+0x488>
 800772c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800772e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007730:	2e00      	cmp	r6, #0
 8007732:	bfab      	itete	ge
 8007734:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007736:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007738:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800773a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800773e:	bfac      	ite	ge
 8007740:	eb06 0a03 	addge.w	sl, r6, r3
 8007744:	1b9f      	sublt	r7, r3, r6
 8007746:	9b04      	ldr	r3, [sp, #16]
 8007748:	1af6      	subs	r6, r6, r3
 800774a:	4416      	add	r6, r2
 800774c:	4ba0      	ldr	r3, [pc, #640]	; (80079d0 <_strtod_l+0x938>)
 800774e:	3e01      	subs	r6, #1
 8007750:	429e      	cmp	r6, r3
 8007752:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007756:	f280 80c4 	bge.w	80078e2 <_strtod_l+0x84a>
 800775a:	1b9b      	subs	r3, r3, r6
 800775c:	2b1f      	cmp	r3, #31
 800775e:	eba2 0203 	sub.w	r2, r2, r3
 8007762:	f04f 0101 	mov.w	r1, #1
 8007766:	f300 80b0 	bgt.w	80078ca <_strtod_l+0x832>
 800776a:	fa01 f303 	lsl.w	r3, r1, r3
 800776e:	930e      	str	r3, [sp, #56]	; 0x38
 8007770:	2300      	movs	r3, #0
 8007772:	930d      	str	r3, [sp, #52]	; 0x34
 8007774:	eb0a 0602 	add.w	r6, sl, r2
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	45b2      	cmp	sl, r6
 800777c:	4417      	add	r7, r2
 800777e:	441f      	add	r7, r3
 8007780:	4653      	mov	r3, sl
 8007782:	bfa8      	it	ge
 8007784:	4633      	movge	r3, r6
 8007786:	42bb      	cmp	r3, r7
 8007788:	bfa8      	it	ge
 800778a:	463b      	movge	r3, r7
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfc2      	ittt	gt
 8007790:	1af6      	subgt	r6, r6, r3
 8007792:	1aff      	subgt	r7, r7, r3
 8007794:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007798:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd17      	ble.n	80077ce <_strtod_l+0x736>
 800779e:	4659      	mov	r1, fp
 80077a0:	461a      	mov	r2, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff f9ae 	bl	8006b04 <__pow5mult>
 80077a8:	4683      	mov	fp, r0
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f43f aeb8 	beq.w	8007520 <_strtod_l+0x488>
 80077b0:	4601      	mov	r1, r0
 80077b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7ff f8fb 	bl	80069b0 <__multiply>
 80077ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80077bc:	2800      	cmp	r0, #0
 80077be:	f43f aeaf 	beq.w	8007520 <_strtod_l+0x488>
 80077c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077c4:	4620      	mov	r0, r4
 80077c6:	f7fe ffdd 	bl	8006784 <_Bfree>
 80077ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077cc:	9316      	str	r3, [sp, #88]	; 0x58
 80077ce:	2e00      	cmp	r6, #0
 80077d0:	f300 808c 	bgt.w	80078ec <_strtod_l+0x854>
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	dd08      	ble.n	80077ec <_strtod_l+0x754>
 80077da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077dc:	9905      	ldr	r1, [sp, #20]
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff f990 	bl	8006b04 <__pow5mult>
 80077e4:	9005      	str	r0, [sp, #20]
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f43f ae9a 	beq.w	8007520 <_strtod_l+0x488>
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	dd08      	ble.n	8007802 <_strtod_l+0x76a>
 80077f0:	9905      	ldr	r1, [sp, #20]
 80077f2:	463a      	mov	r2, r7
 80077f4:	4620      	mov	r0, r4
 80077f6:	f7ff f9df 	bl	8006bb8 <__lshift>
 80077fa:	9005      	str	r0, [sp, #20]
 80077fc:	2800      	cmp	r0, #0
 80077fe:	f43f ae8f 	beq.w	8007520 <_strtod_l+0x488>
 8007802:	f1ba 0f00 	cmp.w	sl, #0
 8007806:	dd08      	ble.n	800781a <_strtod_l+0x782>
 8007808:	4659      	mov	r1, fp
 800780a:	4652      	mov	r2, sl
 800780c:	4620      	mov	r0, r4
 800780e:	f7ff f9d3 	bl	8006bb8 <__lshift>
 8007812:	4683      	mov	fp, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	f43f ae83 	beq.w	8007520 <_strtod_l+0x488>
 800781a:	9a05      	ldr	r2, [sp, #20]
 800781c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800781e:	4620      	mov	r0, r4
 8007820:	f7ff fa52 	bl	8006cc8 <__mdiff>
 8007824:	4605      	mov	r5, r0
 8007826:	2800      	cmp	r0, #0
 8007828:	f43f ae7a 	beq.w	8007520 <_strtod_l+0x488>
 800782c:	68c3      	ldr	r3, [r0, #12]
 800782e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007830:	2300      	movs	r3, #0
 8007832:	60c3      	str	r3, [r0, #12]
 8007834:	4659      	mov	r1, fp
 8007836:	f7ff fa2b 	bl	8006c90 <__mcmp>
 800783a:	2800      	cmp	r0, #0
 800783c:	da60      	bge.n	8007900 <_strtod_l+0x868>
 800783e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007840:	ea53 0308 	orrs.w	r3, r3, r8
 8007844:	f040 8084 	bne.w	8007950 <_strtod_l+0x8b8>
 8007848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800784c:	2b00      	cmp	r3, #0
 800784e:	d17f      	bne.n	8007950 <_strtod_l+0x8b8>
 8007850:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007854:	0d1b      	lsrs	r3, r3, #20
 8007856:	051b      	lsls	r3, r3, #20
 8007858:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800785c:	d978      	bls.n	8007950 <_strtod_l+0x8b8>
 800785e:	696b      	ldr	r3, [r5, #20]
 8007860:	b913      	cbnz	r3, 8007868 <_strtod_l+0x7d0>
 8007862:	692b      	ldr	r3, [r5, #16]
 8007864:	2b01      	cmp	r3, #1
 8007866:	dd73      	ble.n	8007950 <_strtod_l+0x8b8>
 8007868:	4629      	mov	r1, r5
 800786a:	2201      	movs	r2, #1
 800786c:	4620      	mov	r0, r4
 800786e:	f7ff f9a3 	bl	8006bb8 <__lshift>
 8007872:	4659      	mov	r1, fp
 8007874:	4605      	mov	r5, r0
 8007876:	f7ff fa0b 	bl	8006c90 <__mcmp>
 800787a:	2800      	cmp	r0, #0
 800787c:	dd68      	ble.n	8007950 <_strtod_l+0x8b8>
 800787e:	9904      	ldr	r1, [sp, #16]
 8007880:	4a54      	ldr	r2, [pc, #336]	; (80079d4 <_strtod_l+0x93c>)
 8007882:	464b      	mov	r3, r9
 8007884:	2900      	cmp	r1, #0
 8007886:	f000 8084 	beq.w	8007992 <_strtod_l+0x8fa>
 800788a:	ea02 0109 	and.w	r1, r2, r9
 800788e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007892:	dc7e      	bgt.n	8007992 <_strtod_l+0x8fa>
 8007894:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007898:	f77f aeb3 	ble.w	8007602 <_strtod_l+0x56a>
 800789c:	4b4e      	ldr	r3, [pc, #312]	; (80079d8 <_strtod_l+0x940>)
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	2200      	movs	r2, #0
 80078a4:	f7f8 feb8 	bl	8000618 <__aeabi_dmul>
 80078a8:	4b4a      	ldr	r3, [pc, #296]	; (80079d4 <_strtod_l+0x93c>)
 80078aa:	400b      	ands	r3, r1
 80078ac:	4680      	mov	r8, r0
 80078ae:	4689      	mov	r9, r1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f47f ae3f 	bne.w	8007534 <_strtod_l+0x49c>
 80078b6:	2322      	movs	r3, #34	; 0x22
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	e63b      	b.n	8007534 <_strtod_l+0x49c>
 80078bc:	f04f 32ff 	mov.w	r2, #4294967295
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	ea03 0808 	and.w	r8, r3, r8
 80078c8:	e6e8      	b.n	800769c <_strtod_l+0x604>
 80078ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80078ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80078d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80078d6:	36e2      	adds	r6, #226	; 0xe2
 80078d8:	fa01 f306 	lsl.w	r3, r1, r6
 80078dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80078e0:	e748      	b.n	8007774 <_strtod_l+0x6dc>
 80078e2:	2100      	movs	r1, #0
 80078e4:	2301      	movs	r3, #1
 80078e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80078ea:	e743      	b.n	8007774 <_strtod_l+0x6dc>
 80078ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80078ee:	4632      	mov	r2, r6
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff f961 	bl	8006bb8 <__lshift>
 80078f6:	9016      	str	r0, [sp, #88]	; 0x58
 80078f8:	2800      	cmp	r0, #0
 80078fa:	f47f af6b 	bne.w	80077d4 <_strtod_l+0x73c>
 80078fe:	e60f      	b.n	8007520 <_strtod_l+0x488>
 8007900:	46ca      	mov	sl, r9
 8007902:	d171      	bne.n	80079e8 <_strtod_l+0x950>
 8007904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007906:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800790a:	b352      	cbz	r2, 8007962 <_strtod_l+0x8ca>
 800790c:	4a33      	ldr	r2, [pc, #204]	; (80079dc <_strtod_l+0x944>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d12a      	bne.n	8007968 <_strtod_l+0x8d0>
 8007912:	9b04      	ldr	r3, [sp, #16]
 8007914:	4641      	mov	r1, r8
 8007916:	b1fb      	cbz	r3, 8007958 <_strtod_l+0x8c0>
 8007918:	4b2e      	ldr	r3, [pc, #184]	; (80079d4 <_strtod_l+0x93c>)
 800791a:	ea09 0303 	and.w	r3, r9, r3
 800791e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007922:	f04f 32ff 	mov.w	r2, #4294967295
 8007926:	d81a      	bhi.n	800795e <_strtod_l+0x8c6>
 8007928:	0d1b      	lsrs	r3, r3, #20
 800792a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	4299      	cmp	r1, r3
 8007934:	d118      	bne.n	8007968 <_strtod_l+0x8d0>
 8007936:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <_strtod_l+0x948>)
 8007938:	459a      	cmp	sl, r3
 800793a:	d102      	bne.n	8007942 <_strtod_l+0x8aa>
 800793c:	3101      	adds	r1, #1
 800793e:	f43f adef 	beq.w	8007520 <_strtod_l+0x488>
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <_strtod_l+0x93c>)
 8007944:	ea0a 0303 	and.w	r3, sl, r3
 8007948:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800794c:	f04f 0800 	mov.w	r8, #0
 8007950:	9b04      	ldr	r3, [sp, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1a2      	bne.n	800789c <_strtod_l+0x804>
 8007956:	e5ed      	b.n	8007534 <_strtod_l+0x49c>
 8007958:	f04f 33ff 	mov.w	r3, #4294967295
 800795c:	e7e9      	b.n	8007932 <_strtod_l+0x89a>
 800795e:	4613      	mov	r3, r2
 8007960:	e7e7      	b.n	8007932 <_strtod_l+0x89a>
 8007962:	ea53 0308 	orrs.w	r3, r3, r8
 8007966:	d08a      	beq.n	800787e <_strtod_l+0x7e6>
 8007968:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800796a:	b1e3      	cbz	r3, 80079a6 <_strtod_l+0x90e>
 800796c:	ea13 0f0a 	tst.w	r3, sl
 8007970:	d0ee      	beq.n	8007950 <_strtod_l+0x8b8>
 8007972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007974:	9a04      	ldr	r2, [sp, #16]
 8007976:	4640      	mov	r0, r8
 8007978:	4649      	mov	r1, r9
 800797a:	b1c3      	cbz	r3, 80079ae <_strtod_l+0x916>
 800797c:	f7ff fb6f 	bl	800705e <sulp>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	ec51 0b18 	vmov	r0, r1, d8
 8007988:	f7f8 fc90 	bl	80002ac <__adddf3>
 800798c:	4680      	mov	r8, r0
 800798e:	4689      	mov	r9, r1
 8007990:	e7de      	b.n	8007950 <_strtod_l+0x8b8>
 8007992:	4013      	ands	r3, r2
 8007994:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007998:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800799c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079a0:	f04f 38ff 	mov.w	r8, #4294967295
 80079a4:	e7d4      	b.n	8007950 <_strtod_l+0x8b8>
 80079a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a8:	ea13 0f08 	tst.w	r3, r8
 80079ac:	e7e0      	b.n	8007970 <_strtod_l+0x8d8>
 80079ae:	f7ff fb56 	bl	800705e <sulp>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	ec51 0b18 	vmov	r0, r1, d8
 80079ba:	f7f8 fc75 	bl	80002a8 <__aeabi_dsub>
 80079be:	2200      	movs	r2, #0
 80079c0:	2300      	movs	r3, #0
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	f7f9 f88f 	bl	8000ae8 <__aeabi_dcmpeq>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	d0c0      	beq.n	8007950 <_strtod_l+0x8b8>
 80079ce:	e618      	b.n	8007602 <_strtod_l+0x56a>
 80079d0:	fffffc02 	.word	0xfffffc02
 80079d4:	7ff00000 	.word	0x7ff00000
 80079d8:	39500000 	.word	0x39500000
 80079dc:	000fffff 	.word	0x000fffff
 80079e0:	7fefffff 	.word	0x7fefffff
 80079e4:	08009228 	.word	0x08009228
 80079e8:	4659      	mov	r1, fp
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff fac0 	bl	8006f70 <__ratio>
 80079f0:	ec57 6b10 	vmov	r6, r7, d0
 80079f4:	ee10 0a10 	vmov	r0, s0
 80079f8:	2200      	movs	r2, #0
 80079fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80079fe:	4639      	mov	r1, r7
 8007a00:	f7f9 f886 	bl	8000b10 <__aeabi_dcmple>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d071      	beq.n	8007aec <_strtod_l+0xa54>
 8007a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d17c      	bne.n	8007b08 <_strtod_l+0xa70>
 8007a0e:	f1b8 0f00 	cmp.w	r8, #0
 8007a12:	d15a      	bne.n	8007aca <_strtod_l+0xa32>
 8007a14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d15d      	bne.n	8007ad8 <_strtod_l+0xa40>
 8007a1c:	4b90      	ldr	r3, [pc, #576]	; (8007c60 <_strtod_l+0xbc8>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	4630      	mov	r0, r6
 8007a22:	4639      	mov	r1, r7
 8007a24:	f7f9 f86a 	bl	8000afc <__aeabi_dcmplt>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d15c      	bne.n	8007ae6 <_strtod_l+0xa4e>
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	4b8c      	ldr	r3, [pc, #560]	; (8007c64 <_strtod_l+0xbcc>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f8 fdf0 	bl	8000618 <__aeabi_dmul>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	460f      	mov	r7, r1
 8007a3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a40:	9606      	str	r6, [sp, #24]
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007a4c:	4b86      	ldr	r3, [pc, #536]	; (8007c68 <_strtod_l+0xbd0>)
 8007a4e:	ea0a 0303 	and.w	r3, sl, r3
 8007a52:	930d      	str	r3, [sp, #52]	; 0x34
 8007a54:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a56:	4b85      	ldr	r3, [pc, #532]	; (8007c6c <_strtod_l+0xbd4>)
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	f040 8090 	bne.w	8007b7e <_strtod_l+0xae6>
 8007a5e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a62:	ec49 8b10 	vmov	d0, r8, r9
 8007a66:	f7ff f9b9 	bl	8006ddc <__ulp>
 8007a6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a6e:	ec51 0b10 	vmov	r0, r1, d0
 8007a72:	f7f8 fdd1 	bl	8000618 <__aeabi_dmul>
 8007a76:	4642      	mov	r2, r8
 8007a78:	464b      	mov	r3, r9
 8007a7a:	f7f8 fc17 	bl	80002ac <__adddf3>
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4979      	ldr	r1, [pc, #484]	; (8007c68 <_strtod_l+0xbd0>)
 8007a82:	4a7b      	ldr	r2, [pc, #492]	; (8007c70 <_strtod_l+0xbd8>)
 8007a84:	4019      	ands	r1, r3
 8007a86:	4291      	cmp	r1, r2
 8007a88:	4680      	mov	r8, r0
 8007a8a:	d944      	bls.n	8007b16 <_strtod_l+0xa7e>
 8007a8c:	ee18 2a90 	vmov	r2, s17
 8007a90:	4b78      	ldr	r3, [pc, #480]	; (8007c74 <_strtod_l+0xbdc>)
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d104      	bne.n	8007aa0 <_strtod_l+0xa08>
 8007a96:	ee18 3a10 	vmov	r3, s16
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	f43f ad40 	beq.w	8007520 <_strtod_l+0x488>
 8007aa0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007c74 <_strtod_l+0xbdc>
 8007aa4:	f04f 38ff 	mov.w	r8, #4294967295
 8007aa8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7fe fe6a 	bl	8006784 <_Bfree>
 8007ab0:	9905      	ldr	r1, [sp, #20]
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f7fe fe66 	bl	8006784 <_Bfree>
 8007ab8:	4659      	mov	r1, fp
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7fe fe62 	bl	8006784 <_Bfree>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f7fe fe5e 	bl	8006784 <_Bfree>
 8007ac8:	e609      	b.n	80076de <_strtod_l+0x646>
 8007aca:	f1b8 0f01 	cmp.w	r8, #1
 8007ace:	d103      	bne.n	8007ad8 <_strtod_l+0xa40>
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	f43f ad95 	beq.w	8007602 <_strtod_l+0x56a>
 8007ad8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007c30 <_strtod_l+0xb98>
 8007adc:	4f60      	ldr	r7, [pc, #384]	; (8007c60 <_strtod_l+0xbc8>)
 8007ade:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	e7ae      	b.n	8007a44 <_strtod_l+0x9ac>
 8007ae6:	4f5f      	ldr	r7, [pc, #380]	; (8007c64 <_strtod_l+0xbcc>)
 8007ae8:	2600      	movs	r6, #0
 8007aea:	e7a7      	b.n	8007a3c <_strtod_l+0x9a4>
 8007aec:	4b5d      	ldr	r3, [pc, #372]	; (8007c64 <_strtod_l+0xbcc>)
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	2200      	movs	r2, #0
 8007af4:	f7f8 fd90 	bl	8000618 <__aeabi_dmul>
 8007af8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afa:	4606      	mov	r6, r0
 8007afc:	460f      	mov	r7, r1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d09c      	beq.n	8007a3c <_strtod_l+0x9a4>
 8007b02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b06:	e79d      	b.n	8007a44 <_strtod_l+0x9ac>
 8007b08:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007c38 <_strtod_l+0xba0>
 8007b0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b10:	ec57 6b17 	vmov	r6, r7, d7
 8007b14:	e796      	b.n	8007a44 <_strtod_l+0x9ac>
 8007b16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007b1a:	9b04      	ldr	r3, [sp, #16]
 8007b1c:	46ca      	mov	sl, r9
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1c2      	bne.n	8007aa8 <_strtod_l+0xa10>
 8007b22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b28:	0d1b      	lsrs	r3, r3, #20
 8007b2a:	051b      	lsls	r3, r3, #20
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d1bb      	bne.n	8007aa8 <_strtod_l+0xa10>
 8007b30:	4630      	mov	r0, r6
 8007b32:	4639      	mov	r1, r7
 8007b34:	f7f9 f8d0 	bl	8000cd8 <__aeabi_d2lz>
 8007b38:	f7f8 fd40 	bl	80005bc <__aeabi_l2d>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	460b      	mov	r3, r1
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 fbb0 	bl	80002a8 <__aeabi_dsub>
 8007b48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b4a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b4e:	ea43 0308 	orr.w	r3, r3, r8
 8007b52:	4313      	orrs	r3, r2
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	d054      	beq.n	8007c04 <_strtod_l+0xb6c>
 8007b5a:	a339      	add	r3, pc, #228	; (adr r3, 8007c40 <_strtod_l+0xba8>)
 8007b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b60:	f7f8 ffcc 	bl	8000afc <__aeabi_dcmplt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f47f ace5 	bne.w	8007534 <_strtod_l+0x49c>
 8007b6a:	a337      	add	r3, pc, #220	; (adr r3, 8007c48 <_strtod_l+0xbb0>)
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 ffe0 	bl	8000b38 <__aeabi_dcmpgt>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d095      	beq.n	8007aa8 <_strtod_l+0xa10>
 8007b7c:	e4da      	b.n	8007534 <_strtod_l+0x49c>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	b333      	cbz	r3, 8007bd0 <_strtod_l+0xb38>
 8007b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b84:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b88:	d822      	bhi.n	8007bd0 <_strtod_l+0xb38>
 8007b8a:	a331      	add	r3, pc, #196	; (adr r3, 8007c50 <_strtod_l+0xbb8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 ffbc 	bl	8000b10 <__aeabi_dcmple>
 8007b98:	b1a0      	cbz	r0, 8007bc4 <_strtod_l+0xb2c>
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7f9 f813 	bl	8000bc8 <__aeabi_d2uiz>
 8007ba2:	2801      	cmp	r0, #1
 8007ba4:	bf38      	it	cc
 8007ba6:	2001      	movcc	r0, #1
 8007ba8:	f7f8 fcbc 	bl	8000524 <__aeabi_ui2d>
 8007bac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	bb23      	cbnz	r3, 8007bfe <_strtod_l+0xb66>
 8007bb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bb8:	9010      	str	r0, [sp, #64]	; 0x40
 8007bba:	9311      	str	r3, [sp, #68]	; 0x44
 8007bbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bc8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bd0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8007bd8:	eef0 0a68 	vmov.f32	s1, s17
 8007bdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007be0:	f7ff f8fc 	bl	8006ddc <__ulp>
 8007be4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007be8:	ec53 2b10 	vmov	r2, r3, d0
 8007bec:	f7f8 fd14 	bl	8000618 <__aeabi_dmul>
 8007bf0:	ec53 2b18 	vmov	r2, r3, d8
 8007bf4:	f7f8 fb5a 	bl	80002ac <__adddf3>
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4689      	mov	r9, r1
 8007bfc:	e78d      	b.n	8007b1a <_strtod_l+0xa82>
 8007bfe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007c02:	e7db      	b.n	8007bbc <_strtod_l+0xb24>
 8007c04:	a314      	add	r3, pc, #80	; (adr r3, 8007c58 <_strtod_l+0xbc0>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 ff77 	bl	8000afc <__aeabi_dcmplt>
 8007c0e:	e7b3      	b.n	8007b78 <_strtod_l+0xae0>
 8007c10:	2300      	movs	r3, #0
 8007c12:	930a      	str	r3, [sp, #40]	; 0x28
 8007c14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	f7ff ba7c 	b.w	8007116 <_strtod_l+0x7e>
 8007c1e:	2a65      	cmp	r2, #101	; 0x65
 8007c20:	f43f ab75 	beq.w	800730e <_strtod_l+0x276>
 8007c24:	2a45      	cmp	r2, #69	; 0x45
 8007c26:	f43f ab72 	beq.w	800730e <_strtod_l+0x276>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	f7ff bbaa 	b.w	8007384 <_strtod_l+0x2ec>
 8007c30:	00000000 	.word	0x00000000
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	00000000 	.word	0x00000000
 8007c3c:	3ff00000 	.word	0x3ff00000
 8007c40:	94a03595 	.word	0x94a03595
 8007c44:	3fdfffff 	.word	0x3fdfffff
 8007c48:	35afe535 	.word	0x35afe535
 8007c4c:	3fe00000 	.word	0x3fe00000
 8007c50:	ffc00000 	.word	0xffc00000
 8007c54:	41dfffff 	.word	0x41dfffff
 8007c58:	94a03595 	.word	0x94a03595
 8007c5c:	3fcfffff 	.word	0x3fcfffff
 8007c60:	3ff00000 	.word	0x3ff00000
 8007c64:	3fe00000 	.word	0x3fe00000
 8007c68:	7ff00000 	.word	0x7ff00000
 8007c6c:	7fe00000 	.word	0x7fe00000
 8007c70:	7c9fffff 	.word	0x7c9fffff
 8007c74:	7fefffff 	.word	0x7fefffff

08007c78 <_strtod_r>:
 8007c78:	4b01      	ldr	r3, [pc, #4]	; (8007c80 <_strtod_r+0x8>)
 8007c7a:	f7ff ba0d 	b.w	8007098 <_strtod_l>
 8007c7e:	bf00      	nop
 8007c80:	20000068 	.word	0x20000068

08007c84 <_strtol_l.constprop.0>:
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8a:	d001      	beq.n	8007c90 <_strtol_l.constprop.0+0xc>
 8007c8c:	2b24      	cmp	r3, #36	; 0x24
 8007c8e:	d906      	bls.n	8007c9e <_strtol_l.constprop.0+0x1a>
 8007c90:	f7fd fd8a 	bl	80057a8 <__errno>
 8007c94:	2316      	movs	r3, #22
 8007c96:	6003      	str	r3, [r0, #0]
 8007c98:	2000      	movs	r0, #0
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007d84 <_strtol_l.constprop.0+0x100>
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	462e      	mov	r6, r5
 8007ca6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007caa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007cae:	f017 0708 	ands.w	r7, r7, #8
 8007cb2:	d1f7      	bne.n	8007ca4 <_strtol_l.constprop.0+0x20>
 8007cb4:	2c2d      	cmp	r4, #45	; 0x2d
 8007cb6:	d132      	bne.n	8007d1e <_strtol_l.constprop.0+0x9a>
 8007cb8:	782c      	ldrb	r4, [r5, #0]
 8007cba:	2701      	movs	r7, #1
 8007cbc:	1cb5      	adds	r5, r6, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d05b      	beq.n	8007d7a <_strtol_l.constprop.0+0xf6>
 8007cc2:	2b10      	cmp	r3, #16
 8007cc4:	d109      	bne.n	8007cda <_strtol_l.constprop.0+0x56>
 8007cc6:	2c30      	cmp	r4, #48	; 0x30
 8007cc8:	d107      	bne.n	8007cda <_strtol_l.constprop.0+0x56>
 8007cca:	782c      	ldrb	r4, [r5, #0]
 8007ccc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007cd0:	2c58      	cmp	r4, #88	; 0x58
 8007cd2:	d14d      	bne.n	8007d70 <_strtol_l.constprop.0+0xec>
 8007cd4:	786c      	ldrb	r4, [r5, #1]
 8007cd6:	2310      	movs	r3, #16
 8007cd8:	3502      	adds	r5, #2
 8007cda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ce2:	f04f 0e00 	mov.w	lr, #0
 8007ce6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007cea:	4676      	mov	r6, lr
 8007cec:	fb03 8a19 	mls	sl, r3, r9, r8
 8007cf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007cf4:	f1bc 0f09 	cmp.w	ip, #9
 8007cf8:	d816      	bhi.n	8007d28 <_strtol_l.constprop.0+0xa4>
 8007cfa:	4664      	mov	r4, ip
 8007cfc:	42a3      	cmp	r3, r4
 8007cfe:	dd24      	ble.n	8007d4a <_strtol_l.constprop.0+0xc6>
 8007d00:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d04:	d008      	beq.n	8007d18 <_strtol_l.constprop.0+0x94>
 8007d06:	45b1      	cmp	r9, r6
 8007d08:	d31c      	bcc.n	8007d44 <_strtol_l.constprop.0+0xc0>
 8007d0a:	d101      	bne.n	8007d10 <_strtol_l.constprop.0+0x8c>
 8007d0c:	45a2      	cmp	sl, r4
 8007d0e:	db19      	blt.n	8007d44 <_strtol_l.constprop.0+0xc0>
 8007d10:	fb06 4603 	mla	r6, r6, r3, r4
 8007d14:	f04f 0e01 	mov.w	lr, #1
 8007d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d1c:	e7e8      	b.n	8007cf0 <_strtol_l.constprop.0+0x6c>
 8007d1e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d20:	bf04      	itt	eq
 8007d22:	782c      	ldrbeq	r4, [r5, #0]
 8007d24:	1cb5      	addeq	r5, r6, #2
 8007d26:	e7ca      	b.n	8007cbe <_strtol_l.constprop.0+0x3a>
 8007d28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d2c:	f1bc 0f19 	cmp.w	ip, #25
 8007d30:	d801      	bhi.n	8007d36 <_strtol_l.constprop.0+0xb2>
 8007d32:	3c37      	subs	r4, #55	; 0x37
 8007d34:	e7e2      	b.n	8007cfc <_strtol_l.constprop.0+0x78>
 8007d36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007d3a:	f1bc 0f19 	cmp.w	ip, #25
 8007d3e:	d804      	bhi.n	8007d4a <_strtol_l.constprop.0+0xc6>
 8007d40:	3c57      	subs	r4, #87	; 0x57
 8007d42:	e7db      	b.n	8007cfc <_strtol_l.constprop.0+0x78>
 8007d44:	f04f 3eff 	mov.w	lr, #4294967295
 8007d48:	e7e6      	b.n	8007d18 <_strtol_l.constprop.0+0x94>
 8007d4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d4e:	d105      	bne.n	8007d5c <_strtol_l.constprop.0+0xd8>
 8007d50:	2322      	movs	r3, #34	; 0x22
 8007d52:	6003      	str	r3, [r0, #0]
 8007d54:	4646      	mov	r6, r8
 8007d56:	b942      	cbnz	r2, 8007d6a <_strtol_l.constprop.0+0xe6>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	e79e      	b.n	8007c9a <_strtol_l.constprop.0+0x16>
 8007d5c:	b107      	cbz	r7, 8007d60 <_strtol_l.constprop.0+0xdc>
 8007d5e:	4276      	negs	r6, r6
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d0f9      	beq.n	8007d58 <_strtol_l.constprop.0+0xd4>
 8007d64:	f1be 0f00 	cmp.w	lr, #0
 8007d68:	d000      	beq.n	8007d6c <_strtol_l.constprop.0+0xe8>
 8007d6a:	1e69      	subs	r1, r5, #1
 8007d6c:	6011      	str	r1, [r2, #0]
 8007d6e:	e7f3      	b.n	8007d58 <_strtol_l.constprop.0+0xd4>
 8007d70:	2430      	movs	r4, #48	; 0x30
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1b1      	bne.n	8007cda <_strtol_l.constprop.0+0x56>
 8007d76:	2308      	movs	r3, #8
 8007d78:	e7af      	b.n	8007cda <_strtol_l.constprop.0+0x56>
 8007d7a:	2c30      	cmp	r4, #48	; 0x30
 8007d7c:	d0a5      	beq.n	8007cca <_strtol_l.constprop.0+0x46>
 8007d7e:	230a      	movs	r3, #10
 8007d80:	e7ab      	b.n	8007cda <_strtol_l.constprop.0+0x56>
 8007d82:	bf00      	nop
 8007d84:	08009251 	.word	0x08009251

08007d88 <_strtol_r>:
 8007d88:	f7ff bf7c 	b.w	8007c84 <_strtol_l.constprop.0>

08007d8c <__ssputs_r>:
 8007d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d90:	688e      	ldr	r6, [r1, #8]
 8007d92:	461f      	mov	r7, r3
 8007d94:	42be      	cmp	r6, r7
 8007d96:	680b      	ldr	r3, [r1, #0]
 8007d98:	4682      	mov	sl, r0
 8007d9a:	460c      	mov	r4, r1
 8007d9c:	4690      	mov	r8, r2
 8007d9e:	d82c      	bhi.n	8007dfa <__ssputs_r+0x6e>
 8007da0:	898a      	ldrh	r2, [r1, #12]
 8007da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007da6:	d026      	beq.n	8007df6 <__ssputs_r+0x6a>
 8007da8:	6965      	ldr	r5, [r4, #20]
 8007daa:	6909      	ldr	r1, [r1, #16]
 8007dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007db0:	eba3 0901 	sub.w	r9, r3, r1
 8007db4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db8:	1c7b      	adds	r3, r7, #1
 8007dba:	444b      	add	r3, r9
 8007dbc:	106d      	asrs	r5, r5, #1
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	bf38      	it	cc
 8007dc2:	461d      	movcc	r5, r3
 8007dc4:	0553      	lsls	r3, r2, #21
 8007dc6:	d527      	bpl.n	8007e18 <__ssputs_r+0x8c>
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7fe fc0f 	bl	80065ec <_malloc_r>
 8007dce:	4606      	mov	r6, r0
 8007dd0:	b360      	cbz	r0, 8007e2c <__ssputs_r+0xa0>
 8007dd2:	6921      	ldr	r1, [r4, #16]
 8007dd4:	464a      	mov	r2, r9
 8007dd6:	f000 fa1b 	bl	8008210 <memcpy>
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	6126      	str	r6, [r4, #16]
 8007de8:	6165      	str	r5, [r4, #20]
 8007dea:	444e      	add	r6, r9
 8007dec:	eba5 0509 	sub.w	r5, r5, r9
 8007df0:	6026      	str	r6, [r4, #0]
 8007df2:	60a5      	str	r5, [r4, #8]
 8007df4:	463e      	mov	r6, r7
 8007df6:	42be      	cmp	r6, r7
 8007df8:	d900      	bls.n	8007dfc <__ssputs_r+0x70>
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	4632      	mov	r2, r6
 8007e00:	4641      	mov	r1, r8
 8007e02:	f000 f9c9 	bl	8008198 <memmove>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	1b9b      	subs	r3, r3, r6
 8007e0a:	60a3      	str	r3, [r4, #8]
 8007e0c:	6823      	ldr	r3, [r4, #0]
 8007e0e:	4433      	add	r3, r6
 8007e10:	6023      	str	r3, [r4, #0]
 8007e12:	2000      	movs	r0, #0
 8007e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e18:	462a      	mov	r2, r5
 8007e1a:	f000 fdae 	bl	800897a <_realloc_r>
 8007e1e:	4606      	mov	r6, r0
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d1e0      	bne.n	8007de6 <__ssputs_r+0x5a>
 8007e24:	6921      	ldr	r1, [r4, #16]
 8007e26:	4650      	mov	r0, sl
 8007e28:	f7fe fb6c 	bl	8006504 <_free_r>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	f8ca 3000 	str.w	r3, [sl]
 8007e32:	89a3      	ldrh	r3, [r4, #12]
 8007e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	e7e9      	b.n	8007e14 <__ssputs_r+0x88>

08007e40 <_svfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	4698      	mov	r8, r3
 8007e46:	898b      	ldrh	r3, [r1, #12]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	b09d      	sub	sp, #116	; 0x74
 8007e4c:	4607      	mov	r7, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	4614      	mov	r4, r2
 8007e52:	d50e      	bpl.n	8007e72 <_svfiprintf_r+0x32>
 8007e54:	690b      	ldr	r3, [r1, #16]
 8007e56:	b963      	cbnz	r3, 8007e72 <_svfiprintf_r+0x32>
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	f7fe fbc7 	bl	80065ec <_malloc_r>
 8007e5e:	6028      	str	r0, [r5, #0]
 8007e60:	6128      	str	r0, [r5, #16]
 8007e62:	b920      	cbnz	r0, 8007e6e <_svfiprintf_r+0x2e>
 8007e64:	230c      	movs	r3, #12
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295
 8007e6c:	e0d0      	b.n	8008010 <_svfiprintf_r+0x1d0>
 8007e6e:	2340      	movs	r3, #64	; 0x40
 8007e70:	616b      	str	r3, [r5, #20]
 8007e72:	2300      	movs	r3, #0
 8007e74:	9309      	str	r3, [sp, #36]	; 0x24
 8007e76:	2320      	movs	r3, #32
 8007e78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e80:	2330      	movs	r3, #48	; 0x30
 8007e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008028 <_svfiprintf_r+0x1e8>
 8007e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e8a:	f04f 0901 	mov.w	r9, #1
 8007e8e:	4623      	mov	r3, r4
 8007e90:	469a      	mov	sl, r3
 8007e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e96:	b10a      	cbz	r2, 8007e9c <_svfiprintf_r+0x5c>
 8007e98:	2a25      	cmp	r2, #37	; 0x25
 8007e9a:	d1f9      	bne.n	8007e90 <_svfiprintf_r+0x50>
 8007e9c:	ebba 0b04 	subs.w	fp, sl, r4
 8007ea0:	d00b      	beq.n	8007eba <_svfiprintf_r+0x7a>
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	4622      	mov	r2, r4
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4638      	mov	r0, r7
 8007eaa:	f7ff ff6f 	bl	8007d8c <__ssputs_r>
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f000 80a9 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb6:	445a      	add	r2, fp
 8007eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eba:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f000 80a1 	beq.w	8008006 <_svfiprintf_r+0x1c6>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ece:	f10a 0a01 	add.w	sl, sl, #1
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	9307      	str	r3, [sp, #28]
 8007ed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eda:	931a      	str	r3, [sp, #104]	; 0x68
 8007edc:	4654      	mov	r4, sl
 8007ede:	2205      	movs	r2, #5
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	4850      	ldr	r0, [pc, #320]	; (8008028 <_svfiprintf_r+0x1e8>)
 8007ee6:	f7f8 f983 	bl	80001f0 <memchr>
 8007eea:	9a04      	ldr	r2, [sp, #16]
 8007eec:	b9d8      	cbnz	r0, 8007f26 <_svfiprintf_r+0xe6>
 8007eee:	06d0      	lsls	r0, r2, #27
 8007ef0:	bf44      	itt	mi
 8007ef2:	2320      	movmi	r3, #32
 8007ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef8:	0711      	lsls	r1, r2, #28
 8007efa:	bf44      	itt	mi
 8007efc:	232b      	movmi	r3, #43	; 0x2b
 8007efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f02:	f89a 3000 	ldrb.w	r3, [sl]
 8007f06:	2b2a      	cmp	r3, #42	; 0x2a
 8007f08:	d015      	beq.n	8007f36 <_svfiprintf_r+0xf6>
 8007f0a:	9a07      	ldr	r2, [sp, #28]
 8007f0c:	4654      	mov	r4, sl
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f04f 0c0a 	mov.w	ip, #10
 8007f14:	4621      	mov	r1, r4
 8007f16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f1a:	3b30      	subs	r3, #48	; 0x30
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	d94d      	bls.n	8007fbc <_svfiprintf_r+0x17c>
 8007f20:	b1b0      	cbz	r0, 8007f50 <_svfiprintf_r+0x110>
 8007f22:	9207      	str	r2, [sp, #28]
 8007f24:	e014      	b.n	8007f50 <_svfiprintf_r+0x110>
 8007f26:	eba0 0308 	sub.w	r3, r0, r8
 8007f2a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	9304      	str	r3, [sp, #16]
 8007f32:	46a2      	mov	sl, r4
 8007f34:	e7d2      	b.n	8007edc <_svfiprintf_r+0x9c>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	1d19      	adds	r1, r3, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	9103      	str	r1, [sp, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	bfbb      	ittet	lt
 8007f42:	425b      	neglt	r3, r3
 8007f44:	f042 0202 	orrlt.w	r2, r2, #2
 8007f48:	9307      	strge	r3, [sp, #28]
 8007f4a:	9307      	strlt	r3, [sp, #28]
 8007f4c:	bfb8      	it	lt
 8007f4e:	9204      	strlt	r2, [sp, #16]
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b2e      	cmp	r3, #46	; 0x2e
 8007f54:	d10c      	bne.n	8007f70 <_svfiprintf_r+0x130>
 8007f56:	7863      	ldrb	r3, [r4, #1]
 8007f58:	2b2a      	cmp	r3, #42	; 0x2a
 8007f5a:	d134      	bne.n	8007fc6 <_svfiprintf_r+0x186>
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	1d1a      	adds	r2, r3, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	9203      	str	r2, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bfb8      	it	lt
 8007f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f6c:	3402      	adds	r4, #2
 8007f6e:	9305      	str	r3, [sp, #20]
 8007f70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008038 <_svfiprintf_r+0x1f8>
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	2203      	movs	r2, #3
 8007f78:	4650      	mov	r0, sl
 8007f7a:	f7f8 f939 	bl	80001f0 <memchr>
 8007f7e:	b138      	cbz	r0, 8007f90 <_svfiprintf_r+0x150>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	eba0 000a 	sub.w	r0, r0, sl
 8007f86:	2240      	movs	r2, #64	; 0x40
 8007f88:	4082      	lsls	r2, r0
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	3401      	adds	r4, #1
 8007f8e:	9304      	str	r3, [sp, #16]
 8007f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f94:	4825      	ldr	r0, [pc, #148]	; (800802c <_svfiprintf_r+0x1ec>)
 8007f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f7f8 f928 	bl	80001f0 <memchr>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d038      	beq.n	8008016 <_svfiprintf_r+0x1d6>
 8007fa4:	4b22      	ldr	r3, [pc, #136]	; (8008030 <_svfiprintf_r+0x1f0>)
 8007fa6:	bb1b      	cbnz	r3, 8007ff0 <_svfiprintf_r+0x1b0>
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	3307      	adds	r3, #7
 8007fac:	f023 0307 	bic.w	r3, r3, #7
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	9303      	str	r3, [sp, #12]
 8007fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb6:	4433      	add	r3, r6
 8007fb8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fba:	e768      	b.n	8007e8e <_svfiprintf_r+0x4e>
 8007fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	2001      	movs	r0, #1
 8007fc4:	e7a6      	b.n	8007f14 <_svfiprintf_r+0xd4>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	3401      	adds	r4, #1
 8007fca:	9305      	str	r3, [sp, #20]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f04f 0c0a 	mov.w	ip, #10
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd8:	3a30      	subs	r2, #48	; 0x30
 8007fda:	2a09      	cmp	r2, #9
 8007fdc:	d903      	bls.n	8007fe6 <_svfiprintf_r+0x1a6>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0c6      	beq.n	8007f70 <_svfiprintf_r+0x130>
 8007fe2:	9105      	str	r1, [sp, #20]
 8007fe4:	e7c4      	b.n	8007f70 <_svfiprintf_r+0x130>
 8007fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fea:	4604      	mov	r4, r0
 8007fec:	2301      	movs	r3, #1
 8007fee:	e7f0      	b.n	8007fd2 <_svfiprintf_r+0x192>
 8007ff0:	ab03      	add	r3, sp, #12
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	462a      	mov	r2, r5
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <_svfiprintf_r+0x1f4>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7fc fc86 	bl	800490c <_printf_float>
 8008000:	1c42      	adds	r2, r0, #1
 8008002:	4606      	mov	r6, r0
 8008004:	d1d6      	bne.n	8007fb4 <_svfiprintf_r+0x174>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	065b      	lsls	r3, r3, #25
 800800a:	f53f af2d 	bmi.w	8007e68 <_svfiprintf_r+0x28>
 800800e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008010:	b01d      	add	sp, #116	; 0x74
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	ab03      	add	r3, sp, #12
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	462a      	mov	r2, r5
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <_svfiprintf_r+0x1f4>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	4638      	mov	r0, r7
 8008022:	f7fc ff17 	bl	8004e54 <_printf_i>
 8008026:	e7eb      	b.n	8008000 <_svfiprintf_r+0x1c0>
 8008028:	08009351 	.word	0x08009351
 800802c:	0800935b 	.word	0x0800935b
 8008030:	0800490d 	.word	0x0800490d
 8008034:	08007d8d 	.word	0x08007d8d
 8008038:	08009357 	.word	0x08009357

0800803c <__sflush_r>:
 800803c:	898a      	ldrh	r2, [r1, #12]
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	4605      	mov	r5, r0
 8008044:	0710      	lsls	r0, r2, #28
 8008046:	460c      	mov	r4, r1
 8008048:	d458      	bmi.n	80080fc <__sflush_r+0xc0>
 800804a:	684b      	ldr	r3, [r1, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dc05      	bgt.n	800805c <__sflush_r+0x20>
 8008050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	dc02      	bgt.n	800805c <__sflush_r+0x20>
 8008056:	2000      	movs	r0, #0
 8008058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800805c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800805e:	2e00      	cmp	r6, #0
 8008060:	d0f9      	beq.n	8008056 <__sflush_r+0x1a>
 8008062:	2300      	movs	r3, #0
 8008064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008068:	682f      	ldr	r7, [r5, #0]
 800806a:	6a21      	ldr	r1, [r4, #32]
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	d032      	beq.n	80080d6 <__sflush_r+0x9a>
 8008070:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	075a      	lsls	r2, r3, #29
 8008076:	d505      	bpl.n	8008084 <__sflush_r+0x48>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	1ac0      	subs	r0, r0, r3
 800807c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800807e:	b10b      	cbz	r3, 8008084 <__sflush_r+0x48>
 8008080:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008082:	1ac0      	subs	r0, r0, r3
 8008084:	2300      	movs	r3, #0
 8008086:	4602      	mov	r2, r0
 8008088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800808a:	6a21      	ldr	r1, [r4, #32]
 800808c:	4628      	mov	r0, r5
 800808e:	47b0      	blx	r6
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	d106      	bne.n	80080a4 <__sflush_r+0x68>
 8008096:	6829      	ldr	r1, [r5, #0]
 8008098:	291d      	cmp	r1, #29
 800809a:	d82b      	bhi.n	80080f4 <__sflush_r+0xb8>
 800809c:	4a29      	ldr	r2, [pc, #164]	; (8008144 <__sflush_r+0x108>)
 800809e:	410a      	asrs	r2, r1
 80080a0:	07d6      	lsls	r6, r2, #31
 80080a2:	d427      	bmi.n	80080f4 <__sflush_r+0xb8>
 80080a4:	2200      	movs	r2, #0
 80080a6:	6062      	str	r2, [r4, #4]
 80080a8:	04d9      	lsls	r1, r3, #19
 80080aa:	6922      	ldr	r2, [r4, #16]
 80080ac:	6022      	str	r2, [r4, #0]
 80080ae:	d504      	bpl.n	80080ba <__sflush_r+0x7e>
 80080b0:	1c42      	adds	r2, r0, #1
 80080b2:	d101      	bne.n	80080b8 <__sflush_r+0x7c>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	b903      	cbnz	r3, 80080ba <__sflush_r+0x7e>
 80080b8:	6560      	str	r0, [r4, #84]	; 0x54
 80080ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080bc:	602f      	str	r7, [r5, #0]
 80080be:	2900      	cmp	r1, #0
 80080c0:	d0c9      	beq.n	8008056 <__sflush_r+0x1a>
 80080c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c6:	4299      	cmp	r1, r3
 80080c8:	d002      	beq.n	80080d0 <__sflush_r+0x94>
 80080ca:	4628      	mov	r0, r5
 80080cc:	f7fe fa1a 	bl	8006504 <_free_r>
 80080d0:	2000      	movs	r0, #0
 80080d2:	6360      	str	r0, [r4, #52]	; 0x34
 80080d4:	e7c0      	b.n	8008058 <__sflush_r+0x1c>
 80080d6:	2301      	movs	r3, #1
 80080d8:	4628      	mov	r0, r5
 80080da:	47b0      	blx	r6
 80080dc:	1c41      	adds	r1, r0, #1
 80080de:	d1c8      	bne.n	8008072 <__sflush_r+0x36>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0c5      	beq.n	8008072 <__sflush_r+0x36>
 80080e6:	2b1d      	cmp	r3, #29
 80080e8:	d001      	beq.n	80080ee <__sflush_r+0xb2>
 80080ea:	2b16      	cmp	r3, #22
 80080ec:	d101      	bne.n	80080f2 <__sflush_r+0xb6>
 80080ee:	602f      	str	r7, [r5, #0]
 80080f0:	e7b1      	b.n	8008056 <__sflush_r+0x1a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	e7ad      	b.n	8008058 <__sflush_r+0x1c>
 80080fc:	690f      	ldr	r7, [r1, #16]
 80080fe:	2f00      	cmp	r7, #0
 8008100:	d0a9      	beq.n	8008056 <__sflush_r+0x1a>
 8008102:	0793      	lsls	r3, r2, #30
 8008104:	680e      	ldr	r6, [r1, #0]
 8008106:	bf08      	it	eq
 8008108:	694b      	ldreq	r3, [r1, #20]
 800810a:	600f      	str	r7, [r1, #0]
 800810c:	bf18      	it	ne
 800810e:	2300      	movne	r3, #0
 8008110:	eba6 0807 	sub.w	r8, r6, r7
 8008114:	608b      	str	r3, [r1, #8]
 8008116:	f1b8 0f00 	cmp.w	r8, #0
 800811a:	dd9c      	ble.n	8008056 <__sflush_r+0x1a>
 800811c:	6a21      	ldr	r1, [r4, #32]
 800811e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008120:	4643      	mov	r3, r8
 8008122:	463a      	mov	r2, r7
 8008124:	4628      	mov	r0, r5
 8008126:	47b0      	blx	r6
 8008128:	2800      	cmp	r0, #0
 800812a:	dc06      	bgt.n	800813a <__sflush_r+0xfe>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	e78e      	b.n	8008058 <__sflush_r+0x1c>
 800813a:	4407      	add	r7, r0
 800813c:	eba8 0800 	sub.w	r8, r8, r0
 8008140:	e7e9      	b.n	8008116 <__sflush_r+0xda>
 8008142:	bf00      	nop
 8008144:	dfbffffe 	.word	0xdfbffffe

08008148 <_fflush_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	690b      	ldr	r3, [r1, #16]
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
 8008150:	b913      	cbnz	r3, 8008158 <_fflush_r+0x10>
 8008152:	2500      	movs	r5, #0
 8008154:	4628      	mov	r0, r5
 8008156:	bd38      	pop	{r3, r4, r5, pc}
 8008158:	b118      	cbz	r0, 8008162 <_fflush_r+0x1a>
 800815a:	6a03      	ldr	r3, [r0, #32]
 800815c:	b90b      	cbnz	r3, 8008162 <_fflush_r+0x1a>
 800815e:	f7fd fa37 	bl	80055d0 <__sinit>
 8008162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f3      	beq.n	8008152 <_fflush_r+0xa>
 800816a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800816c:	07d0      	lsls	r0, r2, #31
 800816e:	d404      	bmi.n	800817a <_fflush_r+0x32>
 8008170:	0599      	lsls	r1, r3, #22
 8008172:	d402      	bmi.n	800817a <_fflush_r+0x32>
 8008174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008176:	f7fd fb42 	bl	80057fe <__retarget_lock_acquire_recursive>
 800817a:	4628      	mov	r0, r5
 800817c:	4621      	mov	r1, r4
 800817e:	f7ff ff5d 	bl	800803c <__sflush_r>
 8008182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008184:	07da      	lsls	r2, r3, #31
 8008186:	4605      	mov	r5, r0
 8008188:	d4e4      	bmi.n	8008154 <_fflush_r+0xc>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	059b      	lsls	r3, r3, #22
 800818e:	d4e1      	bmi.n	8008154 <_fflush_r+0xc>
 8008190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008192:	f7fd fb35 	bl	8005800 <__retarget_lock_release_recursive>
 8008196:	e7dd      	b.n	8008154 <_fflush_r+0xc>

08008198 <memmove>:
 8008198:	4288      	cmp	r0, r1
 800819a:	b510      	push	{r4, lr}
 800819c:	eb01 0402 	add.w	r4, r1, r2
 80081a0:	d902      	bls.n	80081a8 <memmove+0x10>
 80081a2:	4284      	cmp	r4, r0
 80081a4:	4623      	mov	r3, r4
 80081a6:	d807      	bhi.n	80081b8 <memmove+0x20>
 80081a8:	1e43      	subs	r3, r0, #1
 80081aa:	42a1      	cmp	r1, r4
 80081ac:	d008      	beq.n	80081c0 <memmove+0x28>
 80081ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081b6:	e7f8      	b.n	80081aa <memmove+0x12>
 80081b8:	4402      	add	r2, r0
 80081ba:	4601      	mov	r1, r0
 80081bc:	428a      	cmp	r2, r1
 80081be:	d100      	bne.n	80081c2 <memmove+0x2a>
 80081c0:	bd10      	pop	{r4, pc}
 80081c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081ca:	e7f7      	b.n	80081bc <memmove+0x24>

080081cc <strncmp>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	b16a      	cbz	r2, 80081ec <strncmp+0x20>
 80081d0:	3901      	subs	r1, #1
 80081d2:	1884      	adds	r4, r0, r2
 80081d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081dc:	429a      	cmp	r2, r3
 80081de:	d103      	bne.n	80081e8 <strncmp+0x1c>
 80081e0:	42a0      	cmp	r0, r4
 80081e2:	d001      	beq.n	80081e8 <strncmp+0x1c>
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	d1f5      	bne.n	80081d4 <strncmp+0x8>
 80081e8:	1ad0      	subs	r0, r2, r3
 80081ea:	bd10      	pop	{r4, pc}
 80081ec:	4610      	mov	r0, r2
 80081ee:	e7fc      	b.n	80081ea <strncmp+0x1e>

080081f0 <_sbrk_r>:
 80081f0:	b538      	push	{r3, r4, r5, lr}
 80081f2:	4d06      	ldr	r5, [pc, #24]	; (800820c <_sbrk_r+0x1c>)
 80081f4:	2300      	movs	r3, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f9 fbfa 	bl	80019f4 <_sbrk>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d102      	bne.n	800820a <_sbrk_r+0x1a>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	b103      	cbz	r3, 800820a <_sbrk_r+0x1a>
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	bd38      	pop	{r3, r4, r5, pc}
 800820c:	20000404 	.word	0x20000404

08008210 <memcpy>:
 8008210:	440a      	add	r2, r1
 8008212:	4291      	cmp	r1, r2
 8008214:	f100 33ff 	add.w	r3, r0, #4294967295
 8008218:	d100      	bne.n	800821c <memcpy+0xc>
 800821a:	4770      	bx	lr
 800821c:	b510      	push	{r4, lr}
 800821e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008226:	4291      	cmp	r1, r2
 8008228:	d1f9      	bne.n	800821e <memcpy+0xe>
 800822a:	bd10      	pop	{r4, pc}
 800822c:	0000      	movs	r0, r0
	...

08008230 <nan>:
 8008230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008238 <nan+0x8>
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	00000000 	.word	0x00000000
 800823c:	7ff80000 	.word	0x7ff80000

08008240 <__assert_func>:
 8008240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008242:	4614      	mov	r4, r2
 8008244:	461a      	mov	r2, r3
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <__assert_func+0x2c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4605      	mov	r5, r0
 800824c:	68d8      	ldr	r0, [r3, #12]
 800824e:	b14c      	cbz	r4, 8008264 <__assert_func+0x24>
 8008250:	4b07      	ldr	r3, [pc, #28]	; (8008270 <__assert_func+0x30>)
 8008252:	9100      	str	r1, [sp, #0]
 8008254:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008258:	4906      	ldr	r1, [pc, #24]	; (8008274 <__assert_func+0x34>)
 800825a:	462b      	mov	r3, r5
 800825c:	f000 fbca 	bl	80089f4 <fiprintf>
 8008260:	f000 fbda 	bl	8008a18 <abort>
 8008264:	4b04      	ldr	r3, [pc, #16]	; (8008278 <__assert_func+0x38>)
 8008266:	461c      	mov	r4, r3
 8008268:	e7f3      	b.n	8008252 <__assert_func+0x12>
 800826a:	bf00      	nop
 800826c:	20000064 	.word	0x20000064
 8008270:	0800936a 	.word	0x0800936a
 8008274:	08009377 	.word	0x08009377
 8008278:	080093a5 	.word	0x080093a5

0800827c <_calloc_r>:
 800827c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800827e:	fba1 2402 	umull	r2, r4, r1, r2
 8008282:	b94c      	cbnz	r4, 8008298 <_calloc_r+0x1c>
 8008284:	4611      	mov	r1, r2
 8008286:	9201      	str	r2, [sp, #4]
 8008288:	f7fe f9b0 	bl	80065ec <_malloc_r>
 800828c:	9a01      	ldr	r2, [sp, #4]
 800828e:	4605      	mov	r5, r0
 8008290:	b930      	cbnz	r0, 80082a0 <_calloc_r+0x24>
 8008292:	4628      	mov	r0, r5
 8008294:	b003      	add	sp, #12
 8008296:	bd30      	pop	{r4, r5, pc}
 8008298:	220c      	movs	r2, #12
 800829a:	6002      	str	r2, [r0, #0]
 800829c:	2500      	movs	r5, #0
 800829e:	e7f8      	b.n	8008292 <_calloc_r+0x16>
 80082a0:	4621      	mov	r1, r4
 80082a2:	f7fd fa2e 	bl	8005702 <memset>
 80082a6:	e7f4      	b.n	8008292 <_calloc_r+0x16>

080082a8 <rshift>:
 80082a8:	6903      	ldr	r3, [r0, #16]
 80082aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80082ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80082b6:	f100 0414 	add.w	r4, r0, #20
 80082ba:	dd45      	ble.n	8008348 <rshift+0xa0>
 80082bc:	f011 011f 	ands.w	r1, r1, #31
 80082c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082c8:	d10c      	bne.n	80082e4 <rshift+0x3c>
 80082ca:	f100 0710 	add.w	r7, r0, #16
 80082ce:	4629      	mov	r1, r5
 80082d0:	42b1      	cmp	r1, r6
 80082d2:	d334      	bcc.n	800833e <rshift+0x96>
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	1eea      	subs	r2, r5, #3
 80082da:	4296      	cmp	r6, r2
 80082dc:	bf38      	it	cc
 80082de:	2300      	movcc	r3, #0
 80082e0:	4423      	add	r3, r4
 80082e2:	e015      	b.n	8008310 <rshift+0x68>
 80082e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082e8:	f1c1 0820 	rsb	r8, r1, #32
 80082ec:	40cf      	lsrs	r7, r1
 80082ee:	f105 0e04 	add.w	lr, r5, #4
 80082f2:	46a1      	mov	r9, r4
 80082f4:	4576      	cmp	r6, lr
 80082f6:	46f4      	mov	ip, lr
 80082f8:	d815      	bhi.n	8008326 <rshift+0x7e>
 80082fa:	1a9a      	subs	r2, r3, r2
 80082fc:	0092      	lsls	r2, r2, #2
 80082fe:	3a04      	subs	r2, #4
 8008300:	3501      	adds	r5, #1
 8008302:	42ae      	cmp	r6, r5
 8008304:	bf38      	it	cc
 8008306:	2200      	movcc	r2, #0
 8008308:	18a3      	adds	r3, r4, r2
 800830a:	50a7      	str	r7, [r4, r2]
 800830c:	b107      	cbz	r7, 8008310 <rshift+0x68>
 800830e:	3304      	adds	r3, #4
 8008310:	1b1a      	subs	r2, r3, r4
 8008312:	42a3      	cmp	r3, r4
 8008314:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008318:	bf08      	it	eq
 800831a:	2300      	moveq	r3, #0
 800831c:	6102      	str	r2, [r0, #16]
 800831e:	bf08      	it	eq
 8008320:	6143      	streq	r3, [r0, #20]
 8008322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008326:	f8dc c000 	ldr.w	ip, [ip]
 800832a:	fa0c fc08 	lsl.w	ip, ip, r8
 800832e:	ea4c 0707 	orr.w	r7, ip, r7
 8008332:	f849 7b04 	str.w	r7, [r9], #4
 8008336:	f85e 7b04 	ldr.w	r7, [lr], #4
 800833a:	40cf      	lsrs	r7, r1
 800833c:	e7da      	b.n	80082f4 <rshift+0x4c>
 800833e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008342:	f847 cf04 	str.w	ip, [r7, #4]!
 8008346:	e7c3      	b.n	80082d0 <rshift+0x28>
 8008348:	4623      	mov	r3, r4
 800834a:	e7e1      	b.n	8008310 <rshift+0x68>

0800834c <__hexdig_fun>:
 800834c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008350:	2b09      	cmp	r3, #9
 8008352:	d802      	bhi.n	800835a <__hexdig_fun+0xe>
 8008354:	3820      	subs	r0, #32
 8008356:	b2c0      	uxtb	r0, r0
 8008358:	4770      	bx	lr
 800835a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800835e:	2b05      	cmp	r3, #5
 8008360:	d801      	bhi.n	8008366 <__hexdig_fun+0x1a>
 8008362:	3847      	subs	r0, #71	; 0x47
 8008364:	e7f7      	b.n	8008356 <__hexdig_fun+0xa>
 8008366:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800836a:	2b05      	cmp	r3, #5
 800836c:	d801      	bhi.n	8008372 <__hexdig_fun+0x26>
 800836e:	3827      	subs	r0, #39	; 0x27
 8008370:	e7f1      	b.n	8008356 <__hexdig_fun+0xa>
 8008372:	2000      	movs	r0, #0
 8008374:	4770      	bx	lr
	...

08008378 <__gethex>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	4617      	mov	r7, r2
 800837e:	680a      	ldr	r2, [r1, #0]
 8008380:	b085      	sub	sp, #20
 8008382:	f102 0b02 	add.w	fp, r2, #2
 8008386:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800838a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800838e:	4681      	mov	r9, r0
 8008390:	468a      	mov	sl, r1
 8008392:	9302      	str	r3, [sp, #8]
 8008394:	32fe      	adds	r2, #254	; 0xfe
 8008396:	eb02 030b 	add.w	r3, r2, fp
 800839a:	46d8      	mov	r8, fp
 800839c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	2830      	cmp	r0, #48	; 0x30
 80083a4:	d0f7      	beq.n	8008396 <__gethex+0x1e>
 80083a6:	f7ff ffd1 	bl	800834c <__hexdig_fun>
 80083aa:	4604      	mov	r4, r0
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d138      	bne.n	8008422 <__gethex+0xaa>
 80083b0:	49a7      	ldr	r1, [pc, #668]	; (8008650 <__gethex+0x2d8>)
 80083b2:	2201      	movs	r2, #1
 80083b4:	4640      	mov	r0, r8
 80083b6:	f7ff ff09 	bl	80081cc <strncmp>
 80083ba:	4606      	mov	r6, r0
 80083bc:	2800      	cmp	r0, #0
 80083be:	d169      	bne.n	8008494 <__gethex+0x11c>
 80083c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80083c4:	465d      	mov	r5, fp
 80083c6:	f7ff ffc1 	bl	800834c <__hexdig_fun>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d064      	beq.n	8008498 <__gethex+0x120>
 80083ce:	465a      	mov	r2, fp
 80083d0:	7810      	ldrb	r0, [r2, #0]
 80083d2:	2830      	cmp	r0, #48	; 0x30
 80083d4:	4690      	mov	r8, r2
 80083d6:	f102 0201 	add.w	r2, r2, #1
 80083da:	d0f9      	beq.n	80083d0 <__gethex+0x58>
 80083dc:	f7ff ffb6 	bl	800834c <__hexdig_fun>
 80083e0:	2301      	movs	r3, #1
 80083e2:	fab0 f480 	clz	r4, r0
 80083e6:	0964      	lsrs	r4, r4, #5
 80083e8:	465e      	mov	r6, fp
 80083ea:	9301      	str	r3, [sp, #4]
 80083ec:	4642      	mov	r2, r8
 80083ee:	4615      	mov	r5, r2
 80083f0:	3201      	adds	r2, #1
 80083f2:	7828      	ldrb	r0, [r5, #0]
 80083f4:	f7ff ffaa 	bl	800834c <__hexdig_fun>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d1f8      	bne.n	80083ee <__gethex+0x76>
 80083fc:	4994      	ldr	r1, [pc, #592]	; (8008650 <__gethex+0x2d8>)
 80083fe:	2201      	movs	r2, #1
 8008400:	4628      	mov	r0, r5
 8008402:	f7ff fee3 	bl	80081cc <strncmp>
 8008406:	b978      	cbnz	r0, 8008428 <__gethex+0xb0>
 8008408:	b946      	cbnz	r6, 800841c <__gethex+0xa4>
 800840a:	1c6e      	adds	r6, r5, #1
 800840c:	4632      	mov	r2, r6
 800840e:	4615      	mov	r5, r2
 8008410:	3201      	adds	r2, #1
 8008412:	7828      	ldrb	r0, [r5, #0]
 8008414:	f7ff ff9a 	bl	800834c <__hexdig_fun>
 8008418:	2800      	cmp	r0, #0
 800841a:	d1f8      	bne.n	800840e <__gethex+0x96>
 800841c:	1b73      	subs	r3, r6, r5
 800841e:	009e      	lsls	r6, r3, #2
 8008420:	e004      	b.n	800842c <__gethex+0xb4>
 8008422:	2400      	movs	r4, #0
 8008424:	4626      	mov	r6, r4
 8008426:	e7e1      	b.n	80083ec <__gethex+0x74>
 8008428:	2e00      	cmp	r6, #0
 800842a:	d1f7      	bne.n	800841c <__gethex+0xa4>
 800842c:	782b      	ldrb	r3, [r5, #0]
 800842e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008432:	2b50      	cmp	r3, #80	; 0x50
 8008434:	d13d      	bne.n	80084b2 <__gethex+0x13a>
 8008436:	786b      	ldrb	r3, [r5, #1]
 8008438:	2b2b      	cmp	r3, #43	; 0x2b
 800843a:	d02f      	beq.n	800849c <__gethex+0x124>
 800843c:	2b2d      	cmp	r3, #45	; 0x2d
 800843e:	d031      	beq.n	80084a4 <__gethex+0x12c>
 8008440:	1c69      	adds	r1, r5, #1
 8008442:	f04f 0b00 	mov.w	fp, #0
 8008446:	7808      	ldrb	r0, [r1, #0]
 8008448:	f7ff ff80 	bl	800834c <__hexdig_fun>
 800844c:	1e42      	subs	r2, r0, #1
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	2a18      	cmp	r2, #24
 8008452:	d82e      	bhi.n	80084b2 <__gethex+0x13a>
 8008454:	f1a0 0210 	sub.w	r2, r0, #16
 8008458:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800845c:	f7ff ff76 	bl	800834c <__hexdig_fun>
 8008460:	f100 3cff 	add.w	ip, r0, #4294967295
 8008464:	fa5f fc8c 	uxtb.w	ip, ip
 8008468:	f1bc 0f18 	cmp.w	ip, #24
 800846c:	d91d      	bls.n	80084aa <__gethex+0x132>
 800846e:	f1bb 0f00 	cmp.w	fp, #0
 8008472:	d000      	beq.n	8008476 <__gethex+0xfe>
 8008474:	4252      	negs	r2, r2
 8008476:	4416      	add	r6, r2
 8008478:	f8ca 1000 	str.w	r1, [sl]
 800847c:	b1dc      	cbz	r4, 80084b6 <__gethex+0x13e>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf14      	ite	ne
 8008484:	f04f 0800 	movne.w	r8, #0
 8008488:	f04f 0806 	moveq.w	r8, #6
 800848c:	4640      	mov	r0, r8
 800848e:	b005      	add	sp, #20
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008494:	4645      	mov	r5, r8
 8008496:	4626      	mov	r6, r4
 8008498:	2401      	movs	r4, #1
 800849a:	e7c7      	b.n	800842c <__gethex+0xb4>
 800849c:	f04f 0b00 	mov.w	fp, #0
 80084a0:	1ca9      	adds	r1, r5, #2
 80084a2:	e7d0      	b.n	8008446 <__gethex+0xce>
 80084a4:	f04f 0b01 	mov.w	fp, #1
 80084a8:	e7fa      	b.n	80084a0 <__gethex+0x128>
 80084aa:	230a      	movs	r3, #10
 80084ac:	fb03 0002 	mla	r0, r3, r2, r0
 80084b0:	e7d0      	b.n	8008454 <__gethex+0xdc>
 80084b2:	4629      	mov	r1, r5
 80084b4:	e7e0      	b.n	8008478 <__gethex+0x100>
 80084b6:	eba5 0308 	sub.w	r3, r5, r8
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4621      	mov	r1, r4
 80084be:	2b07      	cmp	r3, #7
 80084c0:	dc0a      	bgt.n	80084d8 <__gethex+0x160>
 80084c2:	4648      	mov	r0, r9
 80084c4:	f7fe f91e 	bl	8006704 <_Balloc>
 80084c8:	4604      	mov	r4, r0
 80084ca:	b940      	cbnz	r0, 80084de <__gethex+0x166>
 80084cc:	4b61      	ldr	r3, [pc, #388]	; (8008654 <__gethex+0x2dc>)
 80084ce:	4602      	mov	r2, r0
 80084d0:	21e4      	movs	r1, #228	; 0xe4
 80084d2:	4861      	ldr	r0, [pc, #388]	; (8008658 <__gethex+0x2e0>)
 80084d4:	f7ff feb4 	bl	8008240 <__assert_func>
 80084d8:	3101      	adds	r1, #1
 80084da:	105b      	asrs	r3, r3, #1
 80084dc:	e7ef      	b.n	80084be <__gethex+0x146>
 80084de:	f100 0a14 	add.w	sl, r0, #20
 80084e2:	2300      	movs	r3, #0
 80084e4:	495a      	ldr	r1, [pc, #360]	; (8008650 <__gethex+0x2d8>)
 80084e6:	f8cd a004 	str.w	sl, [sp, #4]
 80084ea:	469b      	mov	fp, r3
 80084ec:	45a8      	cmp	r8, r5
 80084ee:	d342      	bcc.n	8008576 <__gethex+0x1fe>
 80084f0:	9801      	ldr	r0, [sp, #4]
 80084f2:	f840 bb04 	str.w	fp, [r0], #4
 80084f6:	eba0 000a 	sub.w	r0, r0, sl
 80084fa:	1080      	asrs	r0, r0, #2
 80084fc:	6120      	str	r0, [r4, #16]
 80084fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008502:	4658      	mov	r0, fp
 8008504:	f7fe f9f0 	bl	80068e8 <__hi0bits>
 8008508:	683d      	ldr	r5, [r7, #0]
 800850a:	eba8 0000 	sub.w	r0, r8, r0
 800850e:	42a8      	cmp	r0, r5
 8008510:	dd59      	ble.n	80085c6 <__gethex+0x24e>
 8008512:	eba0 0805 	sub.w	r8, r0, r5
 8008516:	4641      	mov	r1, r8
 8008518:	4620      	mov	r0, r4
 800851a:	f7fe fd7f 	bl	800701c <__any_on>
 800851e:	4683      	mov	fp, r0
 8008520:	b1b8      	cbz	r0, 8008552 <__gethex+0x1da>
 8008522:	f108 33ff 	add.w	r3, r8, #4294967295
 8008526:	1159      	asrs	r1, r3, #5
 8008528:	f003 021f 	and.w	r2, r3, #31
 800852c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008530:	f04f 0b01 	mov.w	fp, #1
 8008534:	fa0b f202 	lsl.w	r2, fp, r2
 8008538:	420a      	tst	r2, r1
 800853a:	d00a      	beq.n	8008552 <__gethex+0x1da>
 800853c:	455b      	cmp	r3, fp
 800853e:	dd06      	ble.n	800854e <__gethex+0x1d6>
 8008540:	f1a8 0102 	sub.w	r1, r8, #2
 8008544:	4620      	mov	r0, r4
 8008546:	f7fe fd69 	bl	800701c <__any_on>
 800854a:	2800      	cmp	r0, #0
 800854c:	d138      	bne.n	80085c0 <__gethex+0x248>
 800854e:	f04f 0b02 	mov.w	fp, #2
 8008552:	4641      	mov	r1, r8
 8008554:	4620      	mov	r0, r4
 8008556:	f7ff fea7 	bl	80082a8 <rshift>
 800855a:	4446      	add	r6, r8
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	42b3      	cmp	r3, r6
 8008560:	da41      	bge.n	80085e6 <__gethex+0x26e>
 8008562:	4621      	mov	r1, r4
 8008564:	4648      	mov	r0, r9
 8008566:	f7fe f90d 	bl	8006784 <_Bfree>
 800856a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800856c:	2300      	movs	r3, #0
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008574:	e78a      	b.n	800848c <__gethex+0x114>
 8008576:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800857a:	2a2e      	cmp	r2, #46	; 0x2e
 800857c:	d014      	beq.n	80085a8 <__gethex+0x230>
 800857e:	2b20      	cmp	r3, #32
 8008580:	d106      	bne.n	8008590 <__gethex+0x218>
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	f843 bb04 	str.w	fp, [r3], #4
 8008588:	f04f 0b00 	mov.w	fp, #0
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	465b      	mov	r3, fp
 8008590:	7828      	ldrb	r0, [r5, #0]
 8008592:	9303      	str	r3, [sp, #12]
 8008594:	f7ff feda 	bl	800834c <__hexdig_fun>
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	f000 000f 	and.w	r0, r0, #15
 800859e:	4098      	lsls	r0, r3
 80085a0:	ea4b 0b00 	orr.w	fp, fp, r0
 80085a4:	3304      	adds	r3, #4
 80085a6:	e7a1      	b.n	80084ec <__gethex+0x174>
 80085a8:	45a8      	cmp	r8, r5
 80085aa:	d8e8      	bhi.n	800857e <__gethex+0x206>
 80085ac:	2201      	movs	r2, #1
 80085ae:	4628      	mov	r0, r5
 80085b0:	9303      	str	r3, [sp, #12]
 80085b2:	f7ff fe0b 	bl	80081cc <strncmp>
 80085b6:	4926      	ldr	r1, [pc, #152]	; (8008650 <__gethex+0x2d8>)
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d1df      	bne.n	800857e <__gethex+0x206>
 80085be:	e795      	b.n	80084ec <__gethex+0x174>
 80085c0:	f04f 0b03 	mov.w	fp, #3
 80085c4:	e7c5      	b.n	8008552 <__gethex+0x1da>
 80085c6:	da0b      	bge.n	80085e0 <__gethex+0x268>
 80085c8:	eba5 0800 	sub.w	r8, r5, r0
 80085cc:	4621      	mov	r1, r4
 80085ce:	4642      	mov	r2, r8
 80085d0:	4648      	mov	r0, r9
 80085d2:	f7fe faf1 	bl	8006bb8 <__lshift>
 80085d6:	eba6 0608 	sub.w	r6, r6, r8
 80085da:	4604      	mov	r4, r0
 80085dc:	f100 0a14 	add.w	sl, r0, #20
 80085e0:	f04f 0b00 	mov.w	fp, #0
 80085e4:	e7ba      	b.n	800855c <__gethex+0x1e4>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	42b3      	cmp	r3, r6
 80085ea:	dd73      	ble.n	80086d4 <__gethex+0x35c>
 80085ec:	1b9e      	subs	r6, r3, r6
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	dc34      	bgt.n	800865c <__gethex+0x2e4>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d023      	beq.n	8008640 <__gethex+0x2c8>
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d025      	beq.n	8008648 <__gethex+0x2d0>
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d115      	bne.n	800862c <__gethex+0x2b4>
 8008600:	42b5      	cmp	r5, r6
 8008602:	d113      	bne.n	800862c <__gethex+0x2b4>
 8008604:	2d01      	cmp	r5, #1
 8008606:	d10b      	bne.n	8008620 <__gethex+0x2a8>
 8008608:	9a02      	ldr	r2, [sp, #8]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	2301      	movs	r3, #1
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	f8ca 3000 	str.w	r3, [sl]
 8008616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008618:	f04f 0862 	mov.w	r8, #98	; 0x62
 800861c:	601c      	str	r4, [r3, #0]
 800861e:	e735      	b.n	800848c <__gethex+0x114>
 8008620:	1e69      	subs	r1, r5, #1
 8008622:	4620      	mov	r0, r4
 8008624:	f7fe fcfa 	bl	800701c <__any_on>
 8008628:	2800      	cmp	r0, #0
 800862a:	d1ed      	bne.n	8008608 <__gethex+0x290>
 800862c:	4621      	mov	r1, r4
 800862e:	4648      	mov	r0, r9
 8008630:	f7fe f8a8 	bl	8006784 <_Bfree>
 8008634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008636:	2300      	movs	r3, #0
 8008638:	6013      	str	r3, [r2, #0]
 800863a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800863e:	e725      	b.n	800848c <__gethex+0x114>
 8008640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f2      	bne.n	800862c <__gethex+0x2b4>
 8008646:	e7df      	b.n	8008608 <__gethex+0x290>
 8008648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1dc      	bne.n	8008608 <__gethex+0x290>
 800864e:	e7ed      	b.n	800862c <__gethex+0x2b4>
 8008650:	080091fc 	.word	0x080091fc
 8008654:	08009091 	.word	0x08009091
 8008658:	080093a6 	.word	0x080093a6
 800865c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008660:	f1bb 0f00 	cmp.w	fp, #0
 8008664:	d133      	bne.n	80086ce <__gethex+0x356>
 8008666:	f1b8 0f00 	cmp.w	r8, #0
 800866a:	d004      	beq.n	8008676 <__gethex+0x2fe>
 800866c:	4641      	mov	r1, r8
 800866e:	4620      	mov	r0, r4
 8008670:	f7fe fcd4 	bl	800701c <__any_on>
 8008674:	4683      	mov	fp, r0
 8008676:	ea4f 1268 	mov.w	r2, r8, asr #5
 800867a:	2301      	movs	r3, #1
 800867c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008680:	f008 081f 	and.w	r8, r8, #31
 8008684:	fa03 f308 	lsl.w	r3, r3, r8
 8008688:	4213      	tst	r3, r2
 800868a:	4631      	mov	r1, r6
 800868c:	4620      	mov	r0, r4
 800868e:	bf18      	it	ne
 8008690:	f04b 0b02 	orrne.w	fp, fp, #2
 8008694:	1bad      	subs	r5, r5, r6
 8008696:	f7ff fe07 	bl	80082a8 <rshift>
 800869a:	687e      	ldr	r6, [r7, #4]
 800869c:	f04f 0802 	mov.w	r8, #2
 80086a0:	f1bb 0f00 	cmp.w	fp, #0
 80086a4:	d04a      	beq.n	800873c <__gethex+0x3c4>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d016      	beq.n	80086da <__gethex+0x362>
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d018      	beq.n	80086e2 <__gethex+0x36a>
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d109      	bne.n	80086c8 <__gethex+0x350>
 80086b4:	f01b 0f02 	tst.w	fp, #2
 80086b8:	d006      	beq.n	80086c8 <__gethex+0x350>
 80086ba:	f8da 3000 	ldr.w	r3, [sl]
 80086be:	ea4b 0b03 	orr.w	fp, fp, r3
 80086c2:	f01b 0f01 	tst.w	fp, #1
 80086c6:	d10f      	bne.n	80086e8 <__gethex+0x370>
 80086c8:	f048 0810 	orr.w	r8, r8, #16
 80086cc:	e036      	b.n	800873c <__gethex+0x3c4>
 80086ce:	f04f 0b01 	mov.w	fp, #1
 80086d2:	e7d0      	b.n	8008676 <__gethex+0x2fe>
 80086d4:	f04f 0801 	mov.w	r8, #1
 80086d8:	e7e2      	b.n	80086a0 <__gethex+0x328>
 80086da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086dc:	f1c3 0301 	rsb	r3, r3, #1
 80086e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80086e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0ef      	beq.n	80086c8 <__gethex+0x350>
 80086e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80086ec:	f104 0214 	add.w	r2, r4, #20
 80086f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80086fa:	2300      	movs	r3, #0
 80086fc:	4694      	mov	ip, r2
 80086fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8008702:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008706:	d01e      	beq.n	8008746 <__gethex+0x3ce>
 8008708:	3101      	adds	r1, #1
 800870a:	f8cc 1000 	str.w	r1, [ip]
 800870e:	f1b8 0f02 	cmp.w	r8, #2
 8008712:	f104 0214 	add.w	r2, r4, #20
 8008716:	d13d      	bne.n	8008794 <__gethex+0x41c>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	42ab      	cmp	r3, r5
 800871e:	d10b      	bne.n	8008738 <__gethex+0x3c0>
 8008720:	1169      	asrs	r1, r5, #5
 8008722:	2301      	movs	r3, #1
 8008724:	f005 051f 	and.w	r5, r5, #31
 8008728:	fa03 f505 	lsl.w	r5, r3, r5
 800872c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008730:	421d      	tst	r5, r3
 8008732:	bf18      	it	ne
 8008734:	f04f 0801 	movne.w	r8, #1
 8008738:	f048 0820 	orr.w	r8, r8, #32
 800873c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800873e:	601c      	str	r4, [r3, #0]
 8008740:	9b02      	ldr	r3, [sp, #8]
 8008742:	601e      	str	r6, [r3, #0]
 8008744:	e6a2      	b.n	800848c <__gethex+0x114>
 8008746:	4290      	cmp	r0, r2
 8008748:	f842 3c04 	str.w	r3, [r2, #-4]
 800874c:	d8d6      	bhi.n	80086fc <__gethex+0x384>
 800874e:	68a2      	ldr	r2, [r4, #8]
 8008750:	4593      	cmp	fp, r2
 8008752:	db17      	blt.n	8008784 <__gethex+0x40c>
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4648      	mov	r0, r9
 8008758:	3101      	adds	r1, #1
 800875a:	f7fd ffd3 	bl	8006704 <_Balloc>
 800875e:	4682      	mov	sl, r0
 8008760:	b918      	cbnz	r0, 800876a <__gethex+0x3f2>
 8008762:	4b1b      	ldr	r3, [pc, #108]	; (80087d0 <__gethex+0x458>)
 8008764:	4602      	mov	r2, r0
 8008766:	2184      	movs	r1, #132	; 0x84
 8008768:	e6b3      	b.n	80084d2 <__gethex+0x15a>
 800876a:	6922      	ldr	r2, [r4, #16]
 800876c:	3202      	adds	r2, #2
 800876e:	f104 010c 	add.w	r1, r4, #12
 8008772:	0092      	lsls	r2, r2, #2
 8008774:	300c      	adds	r0, #12
 8008776:	f7ff fd4b 	bl	8008210 <memcpy>
 800877a:	4621      	mov	r1, r4
 800877c:	4648      	mov	r0, r9
 800877e:	f7fe f801 	bl	8006784 <_Bfree>
 8008782:	4654      	mov	r4, sl
 8008784:	6922      	ldr	r2, [r4, #16]
 8008786:	1c51      	adds	r1, r2, #1
 8008788:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800878c:	6121      	str	r1, [r4, #16]
 800878e:	2101      	movs	r1, #1
 8008790:	6151      	str	r1, [r2, #20]
 8008792:	e7bc      	b.n	800870e <__gethex+0x396>
 8008794:	6921      	ldr	r1, [r4, #16]
 8008796:	4559      	cmp	r1, fp
 8008798:	dd0b      	ble.n	80087b2 <__gethex+0x43a>
 800879a:	2101      	movs	r1, #1
 800879c:	4620      	mov	r0, r4
 800879e:	f7ff fd83 	bl	80082a8 <rshift>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3601      	adds	r6, #1
 80087a6:	42b3      	cmp	r3, r6
 80087a8:	f6ff aedb 	blt.w	8008562 <__gethex+0x1ea>
 80087ac:	f04f 0801 	mov.w	r8, #1
 80087b0:	e7c2      	b.n	8008738 <__gethex+0x3c0>
 80087b2:	f015 051f 	ands.w	r5, r5, #31
 80087b6:	d0f9      	beq.n	80087ac <__gethex+0x434>
 80087b8:	9b01      	ldr	r3, [sp, #4]
 80087ba:	441a      	add	r2, r3
 80087bc:	f1c5 0520 	rsb	r5, r5, #32
 80087c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80087c4:	f7fe f890 	bl	80068e8 <__hi0bits>
 80087c8:	42a8      	cmp	r0, r5
 80087ca:	dbe6      	blt.n	800879a <__gethex+0x422>
 80087cc:	e7ee      	b.n	80087ac <__gethex+0x434>
 80087ce:	bf00      	nop
 80087d0:	08009091 	.word	0x08009091

080087d4 <L_shift>:
 80087d4:	f1c2 0208 	rsb	r2, r2, #8
 80087d8:	0092      	lsls	r2, r2, #2
 80087da:	b570      	push	{r4, r5, r6, lr}
 80087dc:	f1c2 0620 	rsb	r6, r2, #32
 80087e0:	6843      	ldr	r3, [r0, #4]
 80087e2:	6804      	ldr	r4, [r0, #0]
 80087e4:	fa03 f506 	lsl.w	r5, r3, r6
 80087e8:	432c      	orrs	r4, r5
 80087ea:	40d3      	lsrs	r3, r2
 80087ec:	6004      	str	r4, [r0, #0]
 80087ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80087f2:	4288      	cmp	r0, r1
 80087f4:	d3f4      	bcc.n	80087e0 <L_shift+0xc>
 80087f6:	bd70      	pop	{r4, r5, r6, pc}

080087f8 <__match>:
 80087f8:	b530      	push	{r4, r5, lr}
 80087fa:	6803      	ldr	r3, [r0, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008802:	b914      	cbnz	r4, 800880a <__match+0x12>
 8008804:	6003      	str	r3, [r0, #0]
 8008806:	2001      	movs	r0, #1
 8008808:	bd30      	pop	{r4, r5, pc}
 800880a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008812:	2d19      	cmp	r5, #25
 8008814:	bf98      	it	ls
 8008816:	3220      	addls	r2, #32
 8008818:	42a2      	cmp	r2, r4
 800881a:	d0f0      	beq.n	80087fe <__match+0x6>
 800881c:	2000      	movs	r0, #0
 800881e:	e7f3      	b.n	8008808 <__match+0x10>

08008820 <__hexnan>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	680b      	ldr	r3, [r1, #0]
 8008826:	6801      	ldr	r1, [r0, #0]
 8008828:	115e      	asrs	r6, r3, #5
 800882a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800882e:	f013 031f 	ands.w	r3, r3, #31
 8008832:	b087      	sub	sp, #28
 8008834:	bf18      	it	ne
 8008836:	3604      	addne	r6, #4
 8008838:	2500      	movs	r5, #0
 800883a:	1f37      	subs	r7, r6, #4
 800883c:	4682      	mov	sl, r0
 800883e:	4690      	mov	r8, r2
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	f846 5c04 	str.w	r5, [r6, #-4]
 8008846:	46b9      	mov	r9, r7
 8008848:	463c      	mov	r4, r7
 800884a:	9502      	str	r5, [sp, #8]
 800884c:	46ab      	mov	fp, r5
 800884e:	784a      	ldrb	r2, [r1, #1]
 8008850:	1c4b      	adds	r3, r1, #1
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	b342      	cbz	r2, 80088a8 <__hexnan+0x88>
 8008856:	4610      	mov	r0, r2
 8008858:	9105      	str	r1, [sp, #20]
 800885a:	9204      	str	r2, [sp, #16]
 800885c:	f7ff fd76 	bl	800834c <__hexdig_fun>
 8008860:	2800      	cmp	r0, #0
 8008862:	d14f      	bne.n	8008904 <__hexnan+0xe4>
 8008864:	9a04      	ldr	r2, [sp, #16]
 8008866:	9905      	ldr	r1, [sp, #20]
 8008868:	2a20      	cmp	r2, #32
 800886a:	d818      	bhi.n	800889e <__hexnan+0x7e>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	459b      	cmp	fp, r3
 8008870:	dd13      	ble.n	800889a <__hexnan+0x7a>
 8008872:	454c      	cmp	r4, r9
 8008874:	d206      	bcs.n	8008884 <__hexnan+0x64>
 8008876:	2d07      	cmp	r5, #7
 8008878:	dc04      	bgt.n	8008884 <__hexnan+0x64>
 800887a:	462a      	mov	r2, r5
 800887c:	4649      	mov	r1, r9
 800887e:	4620      	mov	r0, r4
 8008880:	f7ff ffa8 	bl	80087d4 <L_shift>
 8008884:	4544      	cmp	r4, r8
 8008886:	d950      	bls.n	800892a <__hexnan+0x10a>
 8008888:	2300      	movs	r3, #0
 800888a:	f1a4 0904 	sub.w	r9, r4, #4
 800888e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008892:	f8cd b008 	str.w	fp, [sp, #8]
 8008896:	464c      	mov	r4, r9
 8008898:	461d      	mov	r5, r3
 800889a:	9903      	ldr	r1, [sp, #12]
 800889c:	e7d7      	b.n	800884e <__hexnan+0x2e>
 800889e:	2a29      	cmp	r2, #41	; 0x29
 80088a0:	d155      	bne.n	800894e <__hexnan+0x12e>
 80088a2:	3102      	adds	r1, #2
 80088a4:	f8ca 1000 	str.w	r1, [sl]
 80088a8:	f1bb 0f00 	cmp.w	fp, #0
 80088ac:	d04f      	beq.n	800894e <__hexnan+0x12e>
 80088ae:	454c      	cmp	r4, r9
 80088b0:	d206      	bcs.n	80088c0 <__hexnan+0xa0>
 80088b2:	2d07      	cmp	r5, #7
 80088b4:	dc04      	bgt.n	80088c0 <__hexnan+0xa0>
 80088b6:	462a      	mov	r2, r5
 80088b8:	4649      	mov	r1, r9
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7ff ff8a 	bl	80087d4 <L_shift>
 80088c0:	4544      	cmp	r4, r8
 80088c2:	d934      	bls.n	800892e <__hexnan+0x10e>
 80088c4:	f1a8 0204 	sub.w	r2, r8, #4
 80088c8:	4623      	mov	r3, r4
 80088ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80088ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80088d2:	429f      	cmp	r7, r3
 80088d4:	d2f9      	bcs.n	80088ca <__hexnan+0xaa>
 80088d6:	1b3b      	subs	r3, r7, r4
 80088d8:	f023 0303 	bic.w	r3, r3, #3
 80088dc:	3304      	adds	r3, #4
 80088de:	3e03      	subs	r6, #3
 80088e0:	3401      	adds	r4, #1
 80088e2:	42a6      	cmp	r6, r4
 80088e4:	bf38      	it	cc
 80088e6:	2304      	movcc	r3, #4
 80088e8:	4443      	add	r3, r8
 80088ea:	2200      	movs	r2, #0
 80088ec:	f843 2b04 	str.w	r2, [r3], #4
 80088f0:	429f      	cmp	r7, r3
 80088f2:	d2fb      	bcs.n	80088ec <__hexnan+0xcc>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	b91b      	cbnz	r3, 8008900 <__hexnan+0xe0>
 80088f8:	4547      	cmp	r7, r8
 80088fa:	d126      	bne.n	800894a <__hexnan+0x12a>
 80088fc:	2301      	movs	r3, #1
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	2005      	movs	r0, #5
 8008902:	e025      	b.n	8008950 <__hexnan+0x130>
 8008904:	3501      	adds	r5, #1
 8008906:	2d08      	cmp	r5, #8
 8008908:	f10b 0b01 	add.w	fp, fp, #1
 800890c:	dd06      	ble.n	800891c <__hexnan+0xfc>
 800890e:	4544      	cmp	r4, r8
 8008910:	d9c3      	bls.n	800889a <__hexnan+0x7a>
 8008912:	2300      	movs	r3, #0
 8008914:	f844 3c04 	str.w	r3, [r4, #-4]
 8008918:	2501      	movs	r5, #1
 800891a:	3c04      	subs	r4, #4
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	f000 000f 	and.w	r0, r0, #15
 8008922:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008926:	6020      	str	r0, [r4, #0]
 8008928:	e7b7      	b.n	800889a <__hexnan+0x7a>
 800892a:	2508      	movs	r5, #8
 800892c:	e7b5      	b.n	800889a <__hexnan+0x7a>
 800892e:	9b01      	ldr	r3, [sp, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0df      	beq.n	80088f4 <__hexnan+0xd4>
 8008934:	f1c3 0320 	rsb	r3, r3, #32
 8008938:	f04f 32ff 	mov.w	r2, #4294967295
 800893c:	40da      	lsrs	r2, r3
 800893e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008942:	4013      	ands	r3, r2
 8008944:	f846 3c04 	str.w	r3, [r6, #-4]
 8008948:	e7d4      	b.n	80088f4 <__hexnan+0xd4>
 800894a:	3f04      	subs	r7, #4
 800894c:	e7d2      	b.n	80088f4 <__hexnan+0xd4>
 800894e:	2004      	movs	r0, #4
 8008950:	b007      	add	sp, #28
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008956 <__ascii_mbtowc>:
 8008956:	b082      	sub	sp, #8
 8008958:	b901      	cbnz	r1, 800895c <__ascii_mbtowc+0x6>
 800895a:	a901      	add	r1, sp, #4
 800895c:	b142      	cbz	r2, 8008970 <__ascii_mbtowc+0x1a>
 800895e:	b14b      	cbz	r3, 8008974 <__ascii_mbtowc+0x1e>
 8008960:	7813      	ldrb	r3, [r2, #0]
 8008962:	600b      	str	r3, [r1, #0]
 8008964:	7812      	ldrb	r2, [r2, #0]
 8008966:	1e10      	subs	r0, r2, #0
 8008968:	bf18      	it	ne
 800896a:	2001      	movne	r0, #1
 800896c:	b002      	add	sp, #8
 800896e:	4770      	bx	lr
 8008970:	4610      	mov	r0, r2
 8008972:	e7fb      	b.n	800896c <__ascii_mbtowc+0x16>
 8008974:	f06f 0001 	mvn.w	r0, #1
 8008978:	e7f8      	b.n	800896c <__ascii_mbtowc+0x16>

0800897a <_realloc_r>:
 800897a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800897e:	4680      	mov	r8, r0
 8008980:	4614      	mov	r4, r2
 8008982:	460e      	mov	r6, r1
 8008984:	b921      	cbnz	r1, 8008990 <_realloc_r+0x16>
 8008986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	4611      	mov	r1, r2
 800898c:	f7fd be2e 	b.w	80065ec <_malloc_r>
 8008990:	b92a      	cbnz	r2, 800899e <_realloc_r+0x24>
 8008992:	f7fd fdb7 	bl	8006504 <_free_r>
 8008996:	4625      	mov	r5, r4
 8008998:	4628      	mov	r0, r5
 800899a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800899e:	f000 f842 	bl	8008a26 <_malloc_usable_size_r>
 80089a2:	4284      	cmp	r4, r0
 80089a4:	4607      	mov	r7, r0
 80089a6:	d802      	bhi.n	80089ae <_realloc_r+0x34>
 80089a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089ac:	d812      	bhi.n	80089d4 <_realloc_r+0x5a>
 80089ae:	4621      	mov	r1, r4
 80089b0:	4640      	mov	r0, r8
 80089b2:	f7fd fe1b 	bl	80065ec <_malloc_r>
 80089b6:	4605      	mov	r5, r0
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d0ed      	beq.n	8008998 <_realloc_r+0x1e>
 80089bc:	42bc      	cmp	r4, r7
 80089be:	4622      	mov	r2, r4
 80089c0:	4631      	mov	r1, r6
 80089c2:	bf28      	it	cs
 80089c4:	463a      	movcs	r2, r7
 80089c6:	f7ff fc23 	bl	8008210 <memcpy>
 80089ca:	4631      	mov	r1, r6
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7fd fd99 	bl	8006504 <_free_r>
 80089d2:	e7e1      	b.n	8008998 <_realloc_r+0x1e>
 80089d4:	4635      	mov	r5, r6
 80089d6:	e7df      	b.n	8008998 <_realloc_r+0x1e>

080089d8 <__ascii_wctomb>:
 80089d8:	b149      	cbz	r1, 80089ee <__ascii_wctomb+0x16>
 80089da:	2aff      	cmp	r2, #255	; 0xff
 80089dc:	bf85      	ittet	hi
 80089de:	238a      	movhi	r3, #138	; 0x8a
 80089e0:	6003      	strhi	r3, [r0, #0]
 80089e2:	700a      	strbls	r2, [r1, #0]
 80089e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089e8:	bf98      	it	ls
 80089ea:	2001      	movls	r0, #1
 80089ec:	4770      	bx	lr
 80089ee:	4608      	mov	r0, r1
 80089f0:	4770      	bx	lr
	...

080089f4 <fiprintf>:
 80089f4:	b40e      	push	{r1, r2, r3}
 80089f6:	b503      	push	{r0, r1, lr}
 80089f8:	4601      	mov	r1, r0
 80089fa:	ab03      	add	r3, sp, #12
 80089fc:	4805      	ldr	r0, [pc, #20]	; (8008a14 <fiprintf+0x20>)
 80089fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a02:	6800      	ldr	r0, [r0, #0]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	f000 f83f 	bl	8008a88 <_vfiprintf_r>
 8008a0a:	b002      	add	sp, #8
 8008a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a10:	b003      	add	sp, #12
 8008a12:	4770      	bx	lr
 8008a14:	20000064 	.word	0x20000064

08008a18 <abort>:
 8008a18:	b508      	push	{r3, lr}
 8008a1a:	2006      	movs	r0, #6
 8008a1c:	f000 fa0c 	bl	8008e38 <raise>
 8008a20:	2001      	movs	r0, #1
 8008a22:	f7f8 ff6f 	bl	8001904 <_exit>

08008a26 <_malloc_usable_size_r>:
 8008a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2a:	1f18      	subs	r0, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bfbc      	itt	lt
 8008a30:	580b      	ldrlt	r3, [r1, r0]
 8008a32:	18c0      	addlt	r0, r0, r3
 8008a34:	4770      	bx	lr

08008a36 <__sfputc_r>:
 8008a36:	6893      	ldr	r3, [r2, #8]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	b410      	push	{r4}
 8008a3e:	6093      	str	r3, [r2, #8]
 8008a40:	da08      	bge.n	8008a54 <__sfputc_r+0x1e>
 8008a42:	6994      	ldr	r4, [r2, #24]
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	db01      	blt.n	8008a4c <__sfputc_r+0x16>
 8008a48:	290a      	cmp	r1, #10
 8008a4a:	d103      	bne.n	8008a54 <__sfputc_r+0x1e>
 8008a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a50:	f000 b934 	b.w	8008cbc <__swbuf_r>
 8008a54:	6813      	ldr	r3, [r2, #0]
 8008a56:	1c58      	adds	r0, r3, #1
 8008a58:	6010      	str	r0, [r2, #0]
 8008a5a:	7019      	strb	r1, [r3, #0]
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <__sfputs_r>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	4614      	mov	r4, r2
 8008a6c:	18d5      	adds	r5, r2, r3
 8008a6e:	42ac      	cmp	r4, r5
 8008a70:	d101      	bne.n	8008a76 <__sfputs_r+0x12>
 8008a72:	2000      	movs	r0, #0
 8008a74:	e007      	b.n	8008a86 <__sfputs_r+0x22>
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	463a      	mov	r2, r7
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ffda 	bl	8008a36 <__sfputc_r>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	d1f3      	bne.n	8008a6e <__sfputs_r+0xa>
 8008a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a88 <_vfiprintf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	b09d      	sub	sp, #116	; 0x74
 8008a90:	4614      	mov	r4, r2
 8008a92:	4698      	mov	r8, r3
 8008a94:	4606      	mov	r6, r0
 8008a96:	b118      	cbz	r0, 8008aa0 <_vfiprintf_r+0x18>
 8008a98:	6a03      	ldr	r3, [r0, #32]
 8008a9a:	b90b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x18>
 8008a9c:	f7fc fd98 	bl	80055d0 <__sinit>
 8008aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa2:	07d9      	lsls	r1, r3, #31
 8008aa4:	d405      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	059a      	lsls	r2, r3, #22
 8008aaa:	d402      	bmi.n	8008ab2 <_vfiprintf_r+0x2a>
 8008aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008aae:	f7fc fea6 	bl	80057fe <__retarget_lock_acquire_recursive>
 8008ab2:	89ab      	ldrh	r3, [r5, #12]
 8008ab4:	071b      	lsls	r3, r3, #28
 8008ab6:	d501      	bpl.n	8008abc <_vfiprintf_r+0x34>
 8008ab8:	692b      	ldr	r3, [r5, #16]
 8008aba:	b99b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x5c>
 8008abc:	4629      	mov	r1, r5
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f000 f93a 	bl	8008d38 <__swsetup_r>
 8008ac4:	b170      	cbz	r0, 8008ae4 <_vfiprintf_r+0x5c>
 8008ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac8:	07dc      	lsls	r4, r3, #31
 8008aca:	d504      	bpl.n	8008ad6 <_vfiprintf_r+0x4e>
 8008acc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad0:	b01d      	add	sp, #116	; 0x74
 8008ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	0598      	lsls	r0, r3, #22
 8008ada:	d4f7      	bmi.n	8008acc <_vfiprintf_r+0x44>
 8008adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ade:	f7fc fe8f 	bl	8005800 <__retarget_lock_release_recursive>
 8008ae2:	e7f3      	b.n	8008acc <_vfiprintf_r+0x44>
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae8:	2320      	movs	r3, #32
 8008aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8008af2:	2330      	movs	r3, #48	; 0x30
 8008af4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008ca8 <_vfiprintf_r+0x220>
 8008af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008afc:	f04f 0901 	mov.w	r9, #1
 8008b00:	4623      	mov	r3, r4
 8008b02:	469a      	mov	sl, r3
 8008b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b08:	b10a      	cbz	r2, 8008b0e <_vfiprintf_r+0x86>
 8008b0a:	2a25      	cmp	r2, #37	; 0x25
 8008b0c:	d1f9      	bne.n	8008b02 <_vfiprintf_r+0x7a>
 8008b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b12:	d00b      	beq.n	8008b2c <_vfiprintf_r+0xa4>
 8008b14:	465b      	mov	r3, fp
 8008b16:	4622      	mov	r2, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7ff ffa2 	bl	8008a64 <__sfputs_r>
 8008b20:	3001      	adds	r0, #1
 8008b22:	f000 80a9 	beq.w	8008c78 <_vfiprintf_r+0x1f0>
 8008b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b28:	445a      	add	r2, fp
 8008b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80a1 	beq.w	8008c78 <_vfiprintf_r+0x1f0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b40:	f10a 0a01 	add.w	sl, sl, #1
 8008b44:	9304      	str	r3, [sp, #16]
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b4e:	4654      	mov	r4, sl
 8008b50:	2205      	movs	r2, #5
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4854      	ldr	r0, [pc, #336]	; (8008ca8 <_vfiprintf_r+0x220>)
 8008b58:	f7f7 fb4a 	bl	80001f0 <memchr>
 8008b5c:	9a04      	ldr	r2, [sp, #16]
 8008b5e:	b9d8      	cbnz	r0, 8008b98 <_vfiprintf_r+0x110>
 8008b60:	06d1      	lsls	r1, r2, #27
 8008b62:	bf44      	itt	mi
 8008b64:	2320      	movmi	r3, #32
 8008b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b6a:	0713      	lsls	r3, r2, #28
 8008b6c:	bf44      	itt	mi
 8008b6e:	232b      	movmi	r3, #43	; 0x2b
 8008b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b74:	f89a 3000 	ldrb.w	r3, [sl]
 8008b78:	2b2a      	cmp	r3, #42	; 0x2a
 8008b7a:	d015      	beq.n	8008ba8 <_vfiprintf_r+0x120>
 8008b7c:	9a07      	ldr	r2, [sp, #28]
 8008b7e:	4654      	mov	r4, sl
 8008b80:	2000      	movs	r0, #0
 8008b82:	f04f 0c0a 	mov.w	ip, #10
 8008b86:	4621      	mov	r1, r4
 8008b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b8c:	3b30      	subs	r3, #48	; 0x30
 8008b8e:	2b09      	cmp	r3, #9
 8008b90:	d94d      	bls.n	8008c2e <_vfiprintf_r+0x1a6>
 8008b92:	b1b0      	cbz	r0, 8008bc2 <_vfiprintf_r+0x13a>
 8008b94:	9207      	str	r2, [sp, #28]
 8008b96:	e014      	b.n	8008bc2 <_vfiprintf_r+0x13a>
 8008b98:	eba0 0308 	sub.w	r3, r0, r8
 8008b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	9304      	str	r3, [sp, #16]
 8008ba4:	46a2      	mov	sl, r4
 8008ba6:	e7d2      	b.n	8008b4e <_vfiprintf_r+0xc6>
 8008ba8:	9b03      	ldr	r3, [sp, #12]
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	9103      	str	r1, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bfbb      	ittet	lt
 8008bb4:	425b      	neglt	r3, r3
 8008bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8008bba:	9307      	strge	r3, [sp, #28]
 8008bbc:	9307      	strlt	r3, [sp, #28]
 8008bbe:	bfb8      	it	lt
 8008bc0:	9204      	strlt	r2, [sp, #16]
 8008bc2:	7823      	ldrb	r3, [r4, #0]
 8008bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bc6:	d10c      	bne.n	8008be2 <_vfiprintf_r+0x15a>
 8008bc8:	7863      	ldrb	r3, [r4, #1]
 8008bca:	2b2a      	cmp	r3, #42	; 0x2a
 8008bcc:	d134      	bne.n	8008c38 <_vfiprintf_r+0x1b0>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	1d1a      	adds	r2, r3, #4
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	9203      	str	r2, [sp, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	bfb8      	it	lt
 8008bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bde:	3402      	adds	r4, #2
 8008be0:	9305      	str	r3, [sp, #20]
 8008be2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008cb8 <_vfiprintf_r+0x230>
 8008be6:	7821      	ldrb	r1, [r4, #0]
 8008be8:	2203      	movs	r2, #3
 8008bea:	4650      	mov	r0, sl
 8008bec:	f7f7 fb00 	bl	80001f0 <memchr>
 8008bf0:	b138      	cbz	r0, 8008c02 <_vfiprintf_r+0x17a>
 8008bf2:	9b04      	ldr	r3, [sp, #16]
 8008bf4:	eba0 000a 	sub.w	r0, r0, sl
 8008bf8:	2240      	movs	r2, #64	; 0x40
 8008bfa:	4082      	lsls	r2, r0
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	3401      	adds	r4, #1
 8008c00:	9304      	str	r3, [sp, #16]
 8008c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c06:	4829      	ldr	r0, [pc, #164]	; (8008cac <_vfiprintf_r+0x224>)
 8008c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0c:	2206      	movs	r2, #6
 8008c0e:	f7f7 faef 	bl	80001f0 <memchr>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d03f      	beq.n	8008c96 <_vfiprintf_r+0x20e>
 8008c16:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <_vfiprintf_r+0x228>)
 8008c18:	bb1b      	cbnz	r3, 8008c62 <_vfiprintf_r+0x1da>
 8008c1a:	9b03      	ldr	r3, [sp, #12]
 8008c1c:	3307      	adds	r3, #7
 8008c1e:	f023 0307 	bic.w	r3, r3, #7
 8008c22:	3308      	adds	r3, #8
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c28:	443b      	add	r3, r7
 8008c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2c:	e768      	b.n	8008b00 <_vfiprintf_r+0x78>
 8008c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c32:	460c      	mov	r4, r1
 8008c34:	2001      	movs	r0, #1
 8008c36:	e7a6      	b.n	8008b86 <_vfiprintf_r+0xfe>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	3401      	adds	r4, #1
 8008c3c:	9305      	str	r3, [sp, #20]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	f04f 0c0a 	mov.w	ip, #10
 8008c44:	4620      	mov	r0, r4
 8008c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c4a:	3a30      	subs	r2, #48	; 0x30
 8008c4c:	2a09      	cmp	r2, #9
 8008c4e:	d903      	bls.n	8008c58 <_vfiprintf_r+0x1d0>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0c6      	beq.n	8008be2 <_vfiprintf_r+0x15a>
 8008c54:	9105      	str	r1, [sp, #20]
 8008c56:	e7c4      	b.n	8008be2 <_vfiprintf_r+0x15a>
 8008c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e7f0      	b.n	8008c44 <_vfiprintf_r+0x1bc>
 8008c62:	ab03      	add	r3, sp, #12
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	462a      	mov	r2, r5
 8008c68:	4b12      	ldr	r3, [pc, #72]	; (8008cb4 <_vfiprintf_r+0x22c>)
 8008c6a:	a904      	add	r1, sp, #16
 8008c6c:	4630      	mov	r0, r6
 8008c6e:	f7fb fe4d 	bl	800490c <_printf_float>
 8008c72:	4607      	mov	r7, r0
 8008c74:	1c78      	adds	r0, r7, #1
 8008c76:	d1d6      	bne.n	8008c26 <_vfiprintf_r+0x19e>
 8008c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c7a:	07d9      	lsls	r1, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_vfiprintf_r+0x202>
 8008c7e:	89ab      	ldrh	r3, [r5, #12]
 8008c80:	059a      	lsls	r2, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_vfiprintf_r+0x202>
 8008c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c86:	f7fc fdbb 	bl	8005800 <__retarget_lock_release_recursive>
 8008c8a:	89ab      	ldrh	r3, [r5, #12]
 8008c8c:	065b      	lsls	r3, r3, #25
 8008c8e:	f53f af1d 	bmi.w	8008acc <_vfiprintf_r+0x44>
 8008c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c94:	e71c      	b.n	8008ad0 <_vfiprintf_r+0x48>
 8008c96:	ab03      	add	r3, sp, #12
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	4b05      	ldr	r3, [pc, #20]	; (8008cb4 <_vfiprintf_r+0x22c>)
 8008c9e:	a904      	add	r1, sp, #16
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	f7fc f8d7 	bl	8004e54 <_printf_i>
 8008ca6:	e7e4      	b.n	8008c72 <_vfiprintf_r+0x1ea>
 8008ca8:	08009351 	.word	0x08009351
 8008cac:	0800935b 	.word	0x0800935b
 8008cb0:	0800490d 	.word	0x0800490d
 8008cb4:	08008a65 	.word	0x08008a65
 8008cb8:	08009357 	.word	0x08009357

08008cbc <__swbuf_r>:
 8008cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbe:	460e      	mov	r6, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	b118      	cbz	r0, 8008cce <__swbuf_r+0x12>
 8008cc6:	6a03      	ldr	r3, [r0, #32]
 8008cc8:	b90b      	cbnz	r3, 8008cce <__swbuf_r+0x12>
 8008cca:	f7fc fc81 	bl	80055d0 <__sinit>
 8008cce:	69a3      	ldr	r3, [r4, #24]
 8008cd0:	60a3      	str	r3, [r4, #8]
 8008cd2:	89a3      	ldrh	r3, [r4, #12]
 8008cd4:	071a      	lsls	r2, r3, #28
 8008cd6:	d525      	bpl.n	8008d24 <__swbuf_r+0x68>
 8008cd8:	6923      	ldr	r3, [r4, #16]
 8008cda:	b31b      	cbz	r3, 8008d24 <__swbuf_r+0x68>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	6922      	ldr	r2, [r4, #16]
 8008ce0:	1a98      	subs	r0, r3, r2
 8008ce2:	6963      	ldr	r3, [r4, #20]
 8008ce4:	b2f6      	uxtb	r6, r6
 8008ce6:	4283      	cmp	r3, r0
 8008ce8:	4637      	mov	r7, r6
 8008cea:	dc04      	bgt.n	8008cf6 <__swbuf_r+0x3a>
 8008cec:	4621      	mov	r1, r4
 8008cee:	4628      	mov	r0, r5
 8008cf0:	f7ff fa2a 	bl	8008148 <_fflush_r>
 8008cf4:	b9e0      	cbnz	r0, 8008d30 <__swbuf_r+0x74>
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	60a3      	str	r3, [r4, #8]
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	1c5a      	adds	r2, r3, #1
 8008d00:	6022      	str	r2, [r4, #0]
 8008d02:	701e      	strb	r6, [r3, #0]
 8008d04:	6962      	ldr	r2, [r4, #20]
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d004      	beq.n	8008d16 <__swbuf_r+0x5a>
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	07db      	lsls	r3, r3, #31
 8008d10:	d506      	bpl.n	8008d20 <__swbuf_r+0x64>
 8008d12:	2e0a      	cmp	r6, #10
 8008d14:	d104      	bne.n	8008d20 <__swbuf_r+0x64>
 8008d16:	4621      	mov	r1, r4
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7ff fa15 	bl	8008148 <_fflush_r>
 8008d1e:	b938      	cbnz	r0, 8008d30 <__swbuf_r+0x74>
 8008d20:	4638      	mov	r0, r7
 8008d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d24:	4621      	mov	r1, r4
 8008d26:	4628      	mov	r0, r5
 8008d28:	f000 f806 	bl	8008d38 <__swsetup_r>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	d0d5      	beq.n	8008cdc <__swbuf_r+0x20>
 8008d30:	f04f 37ff 	mov.w	r7, #4294967295
 8008d34:	e7f4      	b.n	8008d20 <__swbuf_r+0x64>
	...

08008d38 <__swsetup_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4b2a      	ldr	r3, [pc, #168]	; (8008de4 <__swsetup_r+0xac>)
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	460c      	mov	r4, r1
 8008d42:	b118      	cbz	r0, 8008d4c <__swsetup_r+0x14>
 8008d44:	6a03      	ldr	r3, [r0, #32]
 8008d46:	b90b      	cbnz	r3, 8008d4c <__swsetup_r+0x14>
 8008d48:	f7fc fc42 	bl	80055d0 <__sinit>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d52:	0718      	lsls	r0, r3, #28
 8008d54:	d422      	bmi.n	8008d9c <__swsetup_r+0x64>
 8008d56:	06d9      	lsls	r1, r3, #27
 8008d58:	d407      	bmi.n	8008d6a <__swsetup_r+0x32>
 8008d5a:	2309      	movs	r3, #9
 8008d5c:	602b      	str	r3, [r5, #0]
 8008d5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e034      	b.n	8008dd4 <__swsetup_r+0x9c>
 8008d6a:	0758      	lsls	r0, r3, #29
 8008d6c:	d512      	bpl.n	8008d94 <__swsetup_r+0x5c>
 8008d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d70:	b141      	cbz	r1, 8008d84 <__swsetup_r+0x4c>
 8008d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d76:	4299      	cmp	r1, r3
 8008d78:	d002      	beq.n	8008d80 <__swsetup_r+0x48>
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f7fd fbc2 	bl	8006504 <_free_r>
 8008d80:	2300      	movs	r3, #0
 8008d82:	6363      	str	r3, [r4, #52]	; 0x34
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d8a:	81a3      	strh	r3, [r4, #12]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	6063      	str	r3, [r4, #4]
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	f043 0308 	orr.w	r3, r3, #8
 8008d9a:	81a3      	strh	r3, [r4, #12]
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	b94b      	cbnz	r3, 8008db4 <__swsetup_r+0x7c>
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008daa:	d003      	beq.n	8008db4 <__swsetup_r+0x7c>
 8008dac:	4621      	mov	r1, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f884 	bl	8008ebc <__smakebuf_r>
 8008db4:	89a0      	ldrh	r0, [r4, #12]
 8008db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dba:	f010 0301 	ands.w	r3, r0, #1
 8008dbe:	d00a      	beq.n	8008dd6 <__swsetup_r+0x9e>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6963      	ldr	r3, [r4, #20]
 8008dc6:	425b      	negs	r3, r3
 8008dc8:	61a3      	str	r3, [r4, #24]
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	b943      	cbnz	r3, 8008de0 <__swsetup_r+0xa8>
 8008dce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008dd2:	d1c4      	bne.n	8008d5e <__swsetup_r+0x26>
 8008dd4:	bd38      	pop	{r3, r4, r5, pc}
 8008dd6:	0781      	lsls	r1, r0, #30
 8008dd8:	bf58      	it	pl
 8008dda:	6963      	ldrpl	r3, [r4, #20]
 8008ddc:	60a3      	str	r3, [r4, #8]
 8008dde:	e7f4      	b.n	8008dca <__swsetup_r+0x92>
 8008de0:	2000      	movs	r0, #0
 8008de2:	e7f7      	b.n	8008dd4 <__swsetup_r+0x9c>
 8008de4:	20000064 	.word	0x20000064

08008de8 <_raise_r>:
 8008de8:	291f      	cmp	r1, #31
 8008dea:	b538      	push	{r3, r4, r5, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	d904      	bls.n	8008dfc <_raise_r+0x14>
 8008df2:	2316      	movs	r3, #22
 8008df4:	6003      	str	r3, [r0, #0]
 8008df6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008dfe:	b112      	cbz	r2, 8008e06 <_raise_r+0x1e>
 8008e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e04:	b94b      	cbnz	r3, 8008e1a <_raise_r+0x32>
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f830 	bl	8008e6c <_getpid_r>
 8008e0c:	462a      	mov	r2, r5
 8008e0e:	4601      	mov	r1, r0
 8008e10:	4620      	mov	r0, r4
 8008e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e16:	f000 b817 	b.w	8008e48 <_kill_r>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d00a      	beq.n	8008e34 <_raise_r+0x4c>
 8008e1e:	1c59      	adds	r1, r3, #1
 8008e20:	d103      	bne.n	8008e2a <_raise_r+0x42>
 8008e22:	2316      	movs	r3, #22
 8008e24:	6003      	str	r3, [r0, #0]
 8008e26:	2001      	movs	r0, #1
 8008e28:	e7e7      	b.n	8008dfa <_raise_r+0x12>
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e30:	4628      	mov	r0, r5
 8008e32:	4798      	blx	r3
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7e0      	b.n	8008dfa <_raise_r+0x12>

08008e38 <raise>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <raise+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfd3 	b.w	8008de8 <_raise_r>
 8008e42:	bf00      	nop
 8008e44:	20000064 	.word	0x20000064

08008e48 <_kill_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_kill_r+0x20>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f7f8 fd45 	bl	80018e4 <_kill>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d102      	bne.n	8008e64 <_kill_r+0x1c>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	b103      	cbz	r3, 8008e64 <_kill_r+0x1c>
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	20000404 	.word	0x20000404

08008e6c <_getpid_r>:
 8008e6c:	f7f8 bd32 	b.w	80018d4 <_getpid>

08008e70 <__swhatbuf_r>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	460c      	mov	r4, r1
 8008e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	b096      	sub	sp, #88	; 0x58
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	461e      	mov	r6, r3
 8008e80:	da0d      	bge.n	8008e9e <__swhatbuf_r+0x2e>
 8008e82:	89a3      	ldrh	r3, [r4, #12]
 8008e84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e88:	f04f 0100 	mov.w	r1, #0
 8008e8c:	bf0c      	ite	eq
 8008e8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e92:	2340      	movne	r3, #64	; 0x40
 8008e94:	2000      	movs	r0, #0
 8008e96:	6031      	str	r1, [r6, #0]
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	b016      	add	sp, #88	; 0x58
 8008e9c:	bd70      	pop	{r4, r5, r6, pc}
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f000 f848 	bl	8008f34 <_fstat_r>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	dbec      	blt.n	8008e82 <__swhatbuf_r+0x12>
 8008ea8:	9901      	ldr	r1, [sp, #4]
 8008eaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008eae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008eb2:	4259      	negs	r1, r3
 8008eb4:	4159      	adcs	r1, r3
 8008eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eba:	e7eb      	b.n	8008e94 <__swhatbuf_r+0x24>

08008ebc <__smakebuf_r>:
 8008ebc:	898b      	ldrh	r3, [r1, #12]
 8008ebe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ec0:	079d      	lsls	r5, r3, #30
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	460c      	mov	r4, r1
 8008ec6:	d507      	bpl.n	8008ed8 <__smakebuf_r+0x1c>
 8008ec8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	6163      	str	r3, [r4, #20]
 8008ed4:	b002      	add	sp, #8
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
 8008ed8:	ab01      	add	r3, sp, #4
 8008eda:	466a      	mov	r2, sp
 8008edc:	f7ff ffc8 	bl	8008e70 <__swhatbuf_r>
 8008ee0:	9900      	ldr	r1, [sp, #0]
 8008ee2:	4605      	mov	r5, r0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7fd fb81 	bl	80065ec <_malloc_r>
 8008eea:	b948      	cbnz	r0, 8008f00 <__smakebuf_r+0x44>
 8008eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ef0:	059a      	lsls	r2, r3, #22
 8008ef2:	d4ef      	bmi.n	8008ed4 <__smakebuf_r+0x18>
 8008ef4:	f023 0303 	bic.w	r3, r3, #3
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	81a3      	strh	r3, [r4, #12]
 8008efe:	e7e3      	b.n	8008ec8 <__smakebuf_r+0xc>
 8008f00:	89a3      	ldrh	r3, [r4, #12]
 8008f02:	6020      	str	r0, [r4, #0]
 8008f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f08:	81a3      	strh	r3, [r4, #12]
 8008f0a:	9b00      	ldr	r3, [sp, #0]
 8008f0c:	6163      	str	r3, [r4, #20]
 8008f0e:	9b01      	ldr	r3, [sp, #4]
 8008f10:	6120      	str	r0, [r4, #16]
 8008f12:	b15b      	cbz	r3, 8008f2c <__smakebuf_r+0x70>
 8008f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f81d 	bl	8008f58 <_isatty_r>
 8008f1e:	b128      	cbz	r0, 8008f2c <__smakebuf_r+0x70>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	f043 0301 	orr.w	r3, r3, #1
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	431d      	orrs	r5, r3
 8008f30:	81a5      	strh	r5, [r4, #12]
 8008f32:	e7cf      	b.n	8008ed4 <__smakebuf_r+0x18>

08008f34 <_fstat_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4d07      	ldr	r5, [pc, #28]	; (8008f54 <_fstat_r+0x20>)
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	4611      	mov	r1, r2
 8008f40:	602b      	str	r3, [r5, #0]
 8008f42:	f7f8 fd2e 	bl	80019a2 <_fstat>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	d102      	bne.n	8008f50 <_fstat_r+0x1c>
 8008f4a:	682b      	ldr	r3, [r5, #0]
 8008f4c:	b103      	cbz	r3, 8008f50 <_fstat_r+0x1c>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd38      	pop	{r3, r4, r5, pc}
 8008f52:	bf00      	nop
 8008f54:	20000404 	.word	0x20000404

08008f58 <_isatty_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d06      	ldr	r5, [pc, #24]	; (8008f74 <_isatty_r+0x1c>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	f7f8 fd2d 	bl	80019c2 <_isatty>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_isatty_r+0x1a>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_isatty_r+0x1a>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000404 	.word	0x20000404

08008f78 <_init>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	bf00      	nop
 8008f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f7e:	bc08      	pop	{r3}
 8008f80:	469e      	mov	lr, r3
 8008f82:	4770      	bx	lr

08008f84 <_fini>:
 8008f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f86:	bf00      	nop
 8008f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8a:	bc08      	pop	{r3}
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	4770      	bx	lr
